/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

package com.aspose.slides.api;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.aspose.slides.ApiException;
import com.aspose.slides.FileInfo;
import com.aspose.slides.ApiTest;
import com.aspose.slides.model.*;

import com.aspose.slides.model.ApiInfo;
import com.aspose.slides.model.Chart;
import com.aspose.slides.model.ChartCategory;
import com.aspose.slides.model.ColorScheme;
import com.aspose.slides.model.DataPoint;
import com.aspose.slides.model.DiscUsage;
import com.aspose.slides.model.Document;
import com.aspose.slides.model.DocumentProperties;
import com.aspose.slides.model.DocumentProperty;
import com.aspose.slides.model.DocumentReplaceResult;
import com.aspose.slides.model.Effect;
import com.aspose.slides.model.EntityExists;
import com.aspose.slides.model.ExportOptions;
import java.io.File;
import com.aspose.slides.model.FileVersions;
import com.aspose.slides.model.FilesList;
import com.aspose.slides.model.FilesUploadResult;
import com.aspose.slides.model.FontScheme;
import com.aspose.slides.model.FormatScheme;
import com.aspose.slides.model.HeaderFooter;
import com.aspose.slides.model.IShapeExportOptions;
import com.aspose.slides.model.Images;
import com.aspose.slides.model.InteractiveSequence;
import com.aspose.slides.model.LayoutSlide;
import com.aspose.slides.model.LayoutSlides;
import com.aspose.slides.model.MasterSlide;
import com.aspose.slides.model.MasterSlides;
import com.aspose.slides.model.NotesSlide;
import com.aspose.slides.model.NotesSlideHeaderFooter;
import com.aspose.slides.model.ObjectExist;
import com.aspose.slides.model.OrderedMergeRequest;
import com.aspose.slides.model.Paragraph;
import com.aspose.slides.model.Paragraphs;
import com.aspose.slides.model.Pipeline;
import com.aspose.slides.model.Placeholder;
import com.aspose.slides.model.Placeholders;
import com.aspose.slides.model.Portion;
import com.aspose.slides.model.Portions;
import com.aspose.slides.model.PresentationsMergeRequest;
import com.aspose.slides.model.ProtectionProperties;
import com.aspose.slides.model.Sections;
import com.aspose.slides.model.Series;
import com.aspose.slides.model.ShapeBase;
import com.aspose.slides.model.Shapes;
import com.aspose.slides.model.Slide;
import com.aspose.slides.model.SlideAnimation;
import com.aspose.slides.model.SlideBackground;
import com.aspose.slides.model.SlideComments;
import com.aspose.slides.model.SlideProperties;
import com.aspose.slides.model.SlideReplaceResult;
import com.aspose.slides.model.Slides;
import com.aspose.slides.model.SplitDocumentResult;
import com.aspose.slides.model.StorageExist;
import com.aspose.slides.model.TextItems;
import com.aspose.slides.model.Theme;
import com.aspose.slides.model.ViewProperties;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.startsWith;
import static org.hamcrest.CoreMatchers.anyOf;
import static org.hamcrest.CoreMatchers.equalTo;

/**
 * API tests for SlidesApi
 */
public class SlidesApiTest extends ApiTest {
    
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileTest() throws ApiException, Exception {
        initialize("copyFile", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
    }

    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "copyFile", "srcPath");
            initialize("copyFile", "srcPath", valueSrcPath);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "copyFile", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "copyFile", "destPath");
            initialize("copyFile", "destPath", valueDestPath);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "copyFile", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "copyFile", "srcStorageName");
            initialize("copyFile", "srcStorageName", valueSrcStorageName);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "copyFile", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "copyFile", "destStorageName");
            initialize("copyFile", "destStorageName", valueDestStorageName);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "copyFile", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "copyFile", "versionId");
            initialize("copyFile", "versionId", valueVersionId);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "copyFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "copyFile");
        }
    }
    
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderTest() throws ApiException, Exception {
        initialize("copyFolder", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
    }

    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "copyFolder", "srcPath");
            initialize("copyFolder", "srcPath", valueSrcPath);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "copyFolder", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "copyFolder", "destPath");
            initialize("copyFolder", "destPath", valueDestPath);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "copyFolder", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "copyFolder", "srcStorageName");
            initialize("copyFolder", "srcStorageName", valueSrcStorageName);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "copyFolder", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "copyFolder", "destStorageName");
            initialize("copyFolder", "destStorageName", valueDestStorageName);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "copyFolder", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "copyFolder");
        }
    }
    
    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException, Exception {
        initialize("createFolder", null, null);
        ;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        api.createFolder(valuePath, valueStorageName);
    }

    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "createFolder", "path");
            initialize("createFolder", "path", valuePath);
            api.createFolder(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "createFolder", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "createFolder");
        }
    }
    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "createFolder", "storageName");
            initialize("createFolder", "storageName", valueStorageName);
            api.createFolder(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "createFolder", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "createFolder");
        }
    }
    
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryTest() throws ApiException, Exception {
        initialize("deleteChartCategory", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartCategory", "name");
            initialize("deleteChartCategory", "name", valueName);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartCategory", "slideIndex");
            initialize("deleteChartCategory", "slideIndex", valueSlideIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartCategory", "shapeIndex");
            initialize("deleteChartCategory", "shapeIndex", valueShapeIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidCategoryIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueCategoryIndex = (Integer)invalidizeTestValue("Integer", valueCategoryIndex, "deleteChartCategory", "categoryIndex");
            initialize("deleteChartCategory", "categoryIndex", valueCategoryIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "categoryIndex", "deleteChartCategory", valueCategoryIndex);
        }
        if (needAssertResponse) {
            assertResponse("categoryIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartCategory", "password");
            initialize("deleteChartCategory", "password", valuePassword);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartCategory", "folder");
            initialize("deleteChartCategory", "folder", valueFolder);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartCategory", "storage");
            initialize("deleteChartCategory", "storage", valueStorage);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteChartCategory");
        }
    }
    
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointTest() throws ApiException, Exception {
        initialize("deleteChartDataPoint", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartDataPoint", "name");
            initialize("deleteChartDataPoint", "name", valueName);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartDataPoint", "slideIndex");
            initialize("deleteChartDataPoint", "slideIndex", valueSlideIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartDataPoint", "shapeIndex");
            initialize("deleteChartDataPoint", "shapeIndex", valueShapeIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "deleteChartDataPoint", "seriesIndex");
            initialize("deleteChartDataPoint", "seriesIndex", valueSeriesIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "deleteChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidPointIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valuePointIndex = (Integer)invalidizeTestValue("Integer", valuePointIndex, "deleteChartDataPoint", "pointIndex");
            initialize("deleteChartDataPoint", "pointIndex", valuePointIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pointIndex", "deleteChartDataPoint", valuePointIndex);
        }
        if (needAssertResponse) {
            assertResponse("pointIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartDataPoint", "password");
            initialize("deleteChartDataPoint", "password", valuePassword);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartDataPoint", "folder");
            initialize("deleteChartDataPoint", "folder", valueFolder);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartDataPoint", "storage");
            initialize("deleteChartDataPoint", "storage", valueStorage);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteChartDataPoint");
        }
    }
    
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesTest() throws ApiException, Exception {
        initialize("deleteChartSeries", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartSeries", "name");
            initialize("deleteChartSeries", "name", valueName);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartSeries", "slideIndex");
            initialize("deleteChartSeries", "slideIndex", valueSlideIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartSeries", "shapeIndex");
            initialize("deleteChartSeries", "shapeIndex", valueShapeIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "deleteChartSeries", "seriesIndex");
            initialize("deleteChartSeries", "seriesIndex", valueSeriesIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "deleteChartSeries", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartSeries", "password");
            initialize("deleteChartSeries", "password", valuePassword);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartSeries", "folder");
            initialize("deleteChartSeries", "folder", valueFolder);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartSeries", "storage");
            initialize("deleteChartSeries", "storage", valueStorage);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteChartSeries");
        }
    }
    
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException, Exception {
        initialize("deleteFile", null, null);
        ;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        api.deleteFile(valuePath, valueStorageName, valueVersionId);
    }

    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteFile", "path");
            initialize("deleteFile", "path", valuePath);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteFile");
        }
    }
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "deleteFile", "storageName");
            initialize("deleteFile", "storageName", valueStorageName);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "deleteFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "deleteFile");
        }
    }
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "deleteFile", "versionId");
            initialize("deleteFile", "versionId", valueVersionId);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "deleteFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "deleteFile");
        }
    }
    
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException, Exception {
        initialize("deleteFolder", null, null);
        ;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        api.deleteFolder(valuePath, valueStorageName, valueRecursive);
    }

    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteFolder", "path");
            initialize("deleteFolder", "path", valuePath);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteFolder", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteFolder");
        }
    }
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "deleteFolder", "storageName");
            initialize("deleteFolder", "storageName", valueStorageName);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "deleteFolder", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "deleteFolder");
        }
    }
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidRecursiveTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valueRecursive = (Boolean)invalidizeTestValue("Boolean", valueRecursive, "deleteFolder", "recursive");
            initialize("deleteFolder", "recursive", valueRecursive);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "recursive", "deleteFolder", valueRecursive);
        }
        if (needAssertResponse) {
            assertResponse("recursive", "deleteFolder");
        }
    }
    
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideTest() throws ApiException, Exception {
        initialize("deleteNotesSlide", null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlide", "name");
            initialize("deleteNotesSlide", "name", valueName);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlide", "slideIndex");
            initialize("deleteNotesSlide", "slideIndex", valueSlideIndex);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlide", "password");
            initialize("deleteNotesSlide", "password", valuePassword);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlide", "folder");
            initialize("deleteNotesSlide", "folder", valueFolder);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlide", "storage");
            initialize("deleteNotesSlide", "storage", valueStorage);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlide");
        }
    }
    
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphTest() throws ApiException, Exception {
        initialize("deleteNotesSlideParagraph", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideParagraph", "name");
            initialize("deleteNotesSlideParagraph", "name", valueName);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideParagraph", "slideIndex");
            initialize("deleteNotesSlideParagraph", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlideParagraph", "shapeIndex");
            initialize("deleteNotesSlideParagraph", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteNotesSlideParagraph", "paragraphIndex");
            initialize("deleteNotesSlideParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteNotesSlideParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideParagraph", "password");
            initialize("deleteNotesSlideParagraph", "password", valuePassword);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideParagraph", "folder");
            initialize("deleteNotesSlideParagraph", "folder", valueFolder);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideParagraph", "storage");
            initialize("deleteNotesSlideParagraph", "storage", valueStorage);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsTest() throws ApiException, Exception {
        initialize("deleteNotesSlideParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideParagraphs", "name");
            initialize("deleteNotesSlideParagraphs", "name", valueName);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideParagraphs", "slideIndex");
            initialize("deleteNotesSlideParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlideParagraphs", "shapeIndex");
            initialize("deleteNotesSlideParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlideParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteNotesSlideParagraphs", "paragraphs");
            initialize("deleteNotesSlideParagraphs", "paragraphs", valueParagraphs);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphs", "deleteNotesSlideParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("paragraphs", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideParagraphs", "password");
            initialize("deleteNotesSlideParagraphs", "password", valuePassword);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideParagraphs", "folder");
            initialize("deleteNotesSlideParagraphs", "folder", valueFolder);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideParagraphs", "storage");
            initialize("deleteNotesSlideParagraphs", "storage", valueStorage);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideParagraphs");
        }
    }
    
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionTest() throws ApiException, Exception {
        initialize("deleteNotesSlidePortion", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlidePortion", "name");
            initialize("deleteNotesSlidePortion", "name", valueName);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlidePortion", "slideIndex");
            initialize("deleteNotesSlidePortion", "slideIndex", valueSlideIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlidePortion", "shapeIndex");
            initialize("deleteNotesSlidePortion", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteNotesSlidePortion", "paragraphIndex");
            initialize("deleteNotesSlidePortion", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteNotesSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deleteNotesSlidePortion", "portionIndex");
            initialize("deleteNotesSlidePortion", "portionIndex", valuePortionIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "deleteNotesSlidePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlidePortion", "password");
            initialize("deleteNotesSlidePortion", "password", valuePassword);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlidePortion", "folder");
            initialize("deleteNotesSlidePortion", "folder", valueFolder);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlidePortion", "storage");
            initialize("deleteNotesSlidePortion", "storage", valueStorage);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlidePortion");
        }
    }
    
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsTest() throws ApiException, Exception {
        initialize("deleteNotesSlidePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlidePortions", "name");
            initialize("deleteNotesSlidePortions", "name", valueName);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlidePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlidePortions", "slideIndex");
            initialize("deleteNotesSlidePortions", "slideIndex", valueSlideIndex);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlidePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlidePortions", "shapeIndex");
            initialize("deleteNotesSlidePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlidePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteNotesSlidePortions", "paragraphIndex");
            initialize("deleteNotesSlidePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteNotesSlidePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deleteNotesSlidePortions", "portions");
            initialize("deleteNotesSlidePortions", "portions", valuePortions);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portions", "deleteNotesSlidePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("portions", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlidePortions", "password");
            initialize("deleteNotesSlidePortions", "password", valuePassword);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlidePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlidePortions", "folder");
            initialize("deleteNotesSlidePortions", "folder", valueFolder);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlidePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlidePortions", "storage");
            initialize("deleteNotesSlidePortions", "storage", valueStorage);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlidePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlidePortions");
        }
    }
    
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeTest() throws ApiException, Exception {
        initialize("deleteNotesSlideShape", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideShape", "name");
            initialize("deleteNotesSlideShape", "name", valueName);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideShape", "slideIndex");
            initialize("deleteNotesSlideShape", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlideShape", "shapeIndex");
            initialize("deleteNotesSlideShape", "shapeIndex", valueShapeIndex);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideShape", "password");
            initialize("deleteNotesSlideShape", "password", valuePassword);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideShape", "folder");
            initialize("deleteNotesSlideShape", "folder", valueFolder);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideShape", "storage");
            initialize("deleteNotesSlideShape", "storage", valueStorage);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideShape");
        }
    }
    
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesTest() throws ApiException, Exception {
        initialize("deleteNotesSlideShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideShapes", "name");
            initialize("deleteNotesSlideShapes", "name", valueName);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideShapes", "slideIndex");
            initialize("deleteNotesSlideShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteNotesSlideShapes", "shapes");
            initialize("deleteNotesSlideShapes", "shapes", valueShapes);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "deleteNotesSlideShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideShapes", "password");
            initialize("deleteNotesSlideShapes", "password", valuePassword);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideShapes", "folder");
            initialize("deleteNotesSlideShapes", "folder", valueFolder);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideShapes", "storage");
            initialize("deleteNotesSlideShapes", "storage", valueStorage);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideShapes");
        }
    }
    
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphTest() throws ApiException, Exception {
        initialize("deleteParagraph", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteParagraph", "name");
            initialize("deleteParagraph", "name", valueName);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteParagraph", "slideIndex");
            initialize("deleteParagraph", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteParagraph", "shapeIndex");
            initialize("deleteParagraph", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteParagraph", "paragraphIndex");
            initialize("deleteParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteParagraph", "password");
            initialize("deleteParagraph", "password", valuePassword);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteParagraph", "folder");
            initialize("deleteParagraph", "folder", valueFolder);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteParagraph", "storage");
            initialize("deleteParagraph", "storage", valueStorage);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsTest() throws ApiException, Exception {
        initialize("deleteParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteParagraphs", "name");
            initialize("deleteParagraphs", "name", valueName);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteParagraphs", "slideIndex");
            initialize("deleteParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteParagraphs", "shapeIndex");
            initialize("deleteParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteParagraphs", "paragraphs");
            initialize("deleteParagraphs", "paragraphs", valueParagraphs);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphs", "deleteParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("paragraphs", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteParagraphs", "password");
            initialize("deleteParagraphs", "password", valuePassword);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteParagraphs", "folder");
            initialize("deleteParagraphs", "folder", valueFolder);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteParagraphs", "storage");
            initialize("deleteParagraphs", "storage", valueStorage);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteParagraphs");
        }
    }
    
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionTest() throws ApiException, Exception {
        initialize("deletePortion", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deletePortion", "name");
            initialize("deletePortion", "name", valueName);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deletePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deletePortion", "slideIndex");
            initialize("deletePortion", "slideIndex", valueSlideIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deletePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deletePortion", "shapeIndex");
            initialize("deletePortion", "shapeIndex", valueShapeIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deletePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deletePortion", "paragraphIndex");
            initialize("deletePortion", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deletePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deletePortion", "portionIndex");
            initialize("deletePortion", "portionIndex", valuePortionIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "deletePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deletePortion", "password");
            initialize("deletePortion", "password", valuePassword);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deletePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deletePortion", "folder");
            initialize("deletePortion", "folder", valueFolder);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deletePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deletePortion", "storage");
            initialize("deletePortion", "storage", valueStorage);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deletePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deletePortion");
        }
    }
    
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsTest() throws ApiException, Exception {
        initialize("deletePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deletePortions", "name");
            initialize("deletePortions", "name", valueName);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deletePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deletePortions", "slideIndex");
            initialize("deletePortions", "slideIndex", valueSlideIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deletePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deletePortions", "shapeIndex");
            initialize("deletePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deletePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deletePortions", "paragraphIndex");
            initialize("deletePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deletePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deletePortions", "portions");
            initialize("deletePortions", "portions", valuePortions);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portions", "deletePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("portions", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deletePortions", "password");
            initialize("deletePortions", "password", valuePassword);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deletePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deletePortions", "folder");
            initialize("deletePortions", "folder", valueFolder);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deletePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deletePortions", "storage");
            initialize("deletePortions", "storage", valueStorage);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deletePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deletePortions");
        }
    }
    
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionTest() throws ApiException, Exception {
        initialize("deleteSection", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSection", "name");
            initialize("deleteSection", "name", valueName);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "deleteSection", "sectionIndex");
            initialize("deleteSection", "sectionIndex", valueSectionIndex);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionIndex", "deleteSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("sectionIndex", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidWithSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueWithSlides = (Boolean)invalidizeTestValue("Boolean", valueWithSlides, "deleteSection", "withSlides");
            initialize("deleteSection", "withSlides", valueWithSlides);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withSlides", "deleteSection", valueWithSlides);
        }
        if (needAssertResponse) {
            assertResponse("withSlides", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSection", "password");
            initialize("deleteSection", "password", valuePassword);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSection", "folder");
            initialize("deleteSection", "folder", valueFolder);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSection", "storage");
            initialize("deleteSection", "storage", valueStorage);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSection");
        }
    }
    
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsTest() throws ApiException, Exception {
        initialize("deleteSections", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSections", "name");
            initialize("deleteSections", "name", valueName);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidSectionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueSections = (List<Integer>)invalidizeTestValue("List<Integer>", valueSections, "deleteSections", "sections");
            initialize("deleteSections", "sections", valueSections);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sections", "deleteSections", valueSections);
        }
        if (needAssertResponse) {
            assertResponse("sections", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidWithSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueWithSlides = (Boolean)invalidizeTestValue("Boolean", valueWithSlides, "deleteSections", "withSlides");
            initialize("deleteSections", "withSlides", valueWithSlides);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withSlides", "deleteSections", valueWithSlides);
        }
        if (needAssertResponse) {
            assertResponse("withSlides", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSections", "password");
            initialize("deleteSections", "password", valuePassword);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSections", "folder");
            initialize("deleteSections", "folder", valueFolder);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSections", "storage");
            initialize("deleteSections", "storage", valueStorage);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSections");
        }
    }
    
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationTest() throws ApiException, Exception {
        initialize("deleteSlideAnimation", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimation", "storage");
        response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideAnimation", "name");
            initialize("deleteSlideAnimation", "name", valueName);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideAnimation", "slideIndex");
            initialize("deleteSlideAnimation", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideAnimation", "password");
            initialize("deleteSlideAnimation", "password", valuePassword);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideAnimation", "folder");
            initialize("deleteSlideAnimation", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideAnimation", "storage");
            initialize("deleteSlideAnimation", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideAnimation");
        }
    }
    
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationEffectTest() throws ApiException, Exception {
        initialize("deleteSlideAnimationEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationEffect", "storage");
        response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideAnimationEffect", "name");
            initialize("deleteSlideAnimationEffect", "name", valueName);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideAnimationEffect", "slideIndex");
            initialize("deleteSlideAnimationEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteSlideAnimationEffect", "effectIndex");
            initialize("deleteSlideAnimationEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "deleteSlideAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "deleteSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideAnimationEffect", "password");
            initialize("deleteSlideAnimationEffect", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideAnimationEffect", "folder");
            initialize("deleteSlideAnimationEffect", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideAnimationEffect", "storage");
            initialize("deleteSlideAnimationEffect", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideAnimationEffect");
        }
    }
    
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("deleteSlideAnimationInteractiveSequence", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "storage");
        response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideAnimationInteractiveSequence", "name");
            initialize("deleteSlideAnimationInteractiveSequence", "name", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideAnimationInteractiveSequence", "slideIndex");
            initialize("deleteSlideAnimationInteractiveSequence", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
            initialize("deleteSlideAnimationInteractiveSequence", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "deleteSlideAnimationInteractiveSequence", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "deleteSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideAnimationInteractiveSequence", "password");
            initialize("deleteSlideAnimationInteractiveSequence", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideAnimationInteractiveSequence", "folder");
            initialize("deleteSlideAnimationInteractiveSequence", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideAnimationInteractiveSequence", "storage");
            initialize("deleteSlideAnimationInteractiveSequence", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideAnimationInteractiveSequence");
        }
    }
    
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("deleteSlideAnimationInteractiveSequenceEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideAnimationInteractiveSequenceEffect", "name");
            initialize("deleteSlideAnimationInteractiveSequenceEffect", "name", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("deleteSlideAnimationInteractiveSequenceEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "deleteSlideAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "deleteSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("deleteSlideAnimationInteractiveSequenceEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "deleteSlideAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "deleteSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideAnimationInteractiveSequenceEffect", "password");
            initialize("deleteSlideAnimationInteractiveSequenceEffect", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideAnimationInteractiveSequenceEffect", "folder");
            initialize("deleteSlideAnimationInteractiveSequenceEffect", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideAnimationInteractiveSequenceEffect", "storage");
            initialize("deleteSlideAnimationInteractiveSequenceEffect", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequencesTest() throws ApiException, Exception {
        initialize("deleteSlideAnimationInteractiveSequences", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "storage");
        response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequencesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideAnimationInteractiveSequences", "name");
            initialize("deleteSlideAnimationInteractiveSequences", "name", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideAnimationInteractiveSequences", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequencesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideAnimationInteractiveSequences", "slideIndex");
            initialize("deleteSlideAnimationInteractiveSequences", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideAnimationInteractiveSequences", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequencesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideAnimationInteractiveSequences", "password");
            initialize("deleteSlideAnimationInteractiveSequences", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideAnimationInteractiveSequences", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequencesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideAnimationInteractiveSequences", "folder");
            initialize("deleteSlideAnimationInteractiveSequences", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideAnimationInteractiveSequences", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationInteractiveSequencesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationInteractiveSequences", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideAnimationInteractiveSequences", "storage");
            initialize("deleteSlideAnimationInteractiveSequences", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideAnimationInteractiveSequences", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideAnimationInteractiveSequences");
        }
    }
    
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationMainSequenceTest() throws ApiException, Exception {
        initialize("deleteSlideAnimationMainSequence", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "storage");
        response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationMainSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideAnimationMainSequence", "name");
            initialize("deleteSlideAnimationMainSequence", "name", valueName);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideAnimationMainSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationMainSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideAnimationMainSequence", "slideIndex");
            initialize("deleteSlideAnimationMainSequence", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideAnimationMainSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationMainSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideAnimationMainSequence", "password");
            initialize("deleteSlideAnimationMainSequence", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideAnimationMainSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationMainSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideAnimationMainSequence", "folder");
            initialize("deleteSlideAnimationMainSequence", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideAnimationMainSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideAnimationMainSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideAnimationMainSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideAnimationMainSequence", "storage");
            initialize("deleteSlideAnimationMainSequence", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideAnimationMainSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideAnimationMainSequence");
        }
    }
    
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideByIndexTest() throws ApiException, Exception {
        initialize("deleteSlideByIndex", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "deleteSlideByIndex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideByIndex", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideByIndex", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideByIndex", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideByIndex", "storage");
        response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideByIndexInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideByIndex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideByIndex", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideByIndex", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideByIndex", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideByIndex", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideByIndex", "name");
            initialize("deleteSlideByIndex", "name", valueName);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideByIndex", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideByIndex");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideByIndexInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideByIndex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideByIndex", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideByIndex", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideByIndex", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideByIndex", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideByIndex", "slideIndex");
            initialize("deleteSlideByIndex", "slideIndex", valueSlideIndex);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideByIndex", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideByIndex");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideByIndexInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideByIndex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideByIndex", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideByIndex", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideByIndex", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideByIndex", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideByIndex", "password");
            initialize("deleteSlideByIndex", "password", valuePassword);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideByIndex", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideByIndex");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideByIndexInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideByIndex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideByIndex", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideByIndex", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideByIndex", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideByIndex", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideByIndex", "folder");
            initialize("deleteSlideByIndex", "folder", valueFolder);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideByIndex", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideByIndex");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideByIndexInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideByIndex", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideByIndex", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideByIndex", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideByIndex", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideByIndex", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideByIndex", "storage");
            initialize("deleteSlideByIndex", "storage", valueStorage);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideByIndex", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideByIndex");
        }
    }
    
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapeTest() throws ApiException, Exception {
        initialize("deleteSlideShape", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShape", "storage");
        response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideShape", "name");
            initialize("deleteSlideShape", "name", valueName);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideShape", "slideIndex");
            initialize("deleteSlideShape", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSlideShape", "shapeIndex");
            initialize("deleteSlideShape", "shapeIndex", valueShapeIndex);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideShape", "password");
            initialize("deleteSlideShape", "password", valuePassword);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideShape", "folder");
            initialize("deleteSlideShape", "folder", valueFolder);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideShape", "storage");
            initialize("deleteSlideShape", "storage", valueStorage);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideShape");
        }
    }
    
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapesTest() throws ApiException, Exception {
        initialize("deleteSlideShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShapes", "storage");
        response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideShapes", "name");
            initialize("deleteSlideShapes", "name", valueName);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideShapes", "slideIndex");
            initialize("deleteSlideShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteSlideShapes", "shapes");
            initialize("deleteSlideShapes", "shapes", valueShapes);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "deleteSlideShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "deleteSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideShapes", "password");
            initialize("deleteSlideShapes", "password", valuePassword);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideShapes", "folder");
            initialize("deleteSlideShapes", "folder", valueFolder);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideShapes", "storage");
            initialize("deleteSlideShapes", "storage", valueStorage);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideShapes");
        }
    }
    
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeTest() throws ApiException, Exception {
        initialize("deleteSlideSubshape", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideSubshape", "name");
            initialize("deleteSlideSubshape", "name", valueName);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideSubshape", "slideIndex");
            initialize("deleteSlideSubshape", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSlideSubshape", "path");
            initialize("deleteSlideSubshape", "path", valuePath);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSlideSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSlideSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSlideSubshape", "shapeIndex");
            initialize("deleteSlideSubshape", "shapeIndex", valueShapeIndex);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSlideSubshape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSlideSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideSubshape", "password");
            initialize("deleteSlideSubshape", "password", valuePassword);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideSubshape", "folder");
            initialize("deleteSlideSubshape", "folder", valueFolder);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideSubshape", "storage");
            initialize("deleteSlideSubshape", "storage", valueStorage);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideSubshape");
        }
    }
    
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesTest() throws ApiException, Exception {
        initialize("deleteSlideSubshapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideSubshapes", "name");
            initialize("deleteSlideSubshapes", "name", valueName);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideSubshapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideSubshapes", "slideIndex");
            initialize("deleteSlideSubshapes", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideSubshapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSlideSubshapes", "path");
            initialize("deleteSlideSubshapes", "path", valuePath);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSlideSubshapes", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSlideSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteSlideSubshapes", "shapes");
            initialize("deleteSlideSubshapes", "shapes", valueShapes);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "deleteSlideSubshapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "deleteSlideSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideSubshapes", "password");
            initialize("deleteSlideSubshapes", "password", valuePassword);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideSubshapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideSubshapes", "folder");
            initialize("deleteSlideSubshapes", "folder", valueFolder);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideSubshapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideSubshapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSlideSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSlideSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideSubshapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideSubshapes", "storage");
            initialize("deleteSlideSubshapes", "storage", valueStorage);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideSubshapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideSubshapes");
        }
    }
    
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesCleanSlidesListTest() throws ApiException, Exception {
        initialize("deleteSlidesCleanSlidesList", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlidesCleanSlidesList", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "storage");
        response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesCleanSlidesListInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlidesCleanSlidesList", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlidesCleanSlidesList", "name");
            initialize("deleteSlidesCleanSlidesList", "name", valueName);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlidesCleanSlidesList", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlidesCleanSlidesList");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesCleanSlidesListInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlidesCleanSlidesList", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "storage");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "deleteSlidesCleanSlidesList", "slides");
            initialize("deleteSlidesCleanSlidesList", "slides", valueSlides);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slides", "deleteSlidesCleanSlidesList", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("slides", "deleteSlidesCleanSlidesList");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesCleanSlidesListInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlidesCleanSlidesList", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlidesCleanSlidesList", "password");
            initialize("deleteSlidesCleanSlidesList", "password", valuePassword);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlidesCleanSlidesList", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlidesCleanSlidesList");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesCleanSlidesListInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlidesCleanSlidesList", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlidesCleanSlidesList", "folder");
            initialize("deleteSlidesCleanSlidesList", "folder", valueFolder);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlidesCleanSlidesList", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlidesCleanSlidesList");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesCleanSlidesListInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlidesCleanSlidesList", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesCleanSlidesList", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlidesCleanSlidesList", "storage");
            initialize("deleteSlidesCleanSlidesList", "storage", valueStorage);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlidesCleanSlidesList", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlidesCleanSlidesList");
        }
    }
    
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertiesTest() throws ApiException, Exception {
        initialize("deleteSlidesDocumentProperties", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperties", "storage");
        response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlidesDocumentProperties", "name");
            initialize("deleteSlidesDocumentProperties", "name", valueName);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlidesDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlidesDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlidesDocumentProperties", "password");
            initialize("deleteSlidesDocumentProperties", "password", valuePassword);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlidesDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlidesDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlidesDocumentProperties", "folder");
            initialize("deleteSlidesDocumentProperties", "folder", valueFolder);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlidesDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlidesDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlidesDocumentProperties", "storage");
            initialize("deleteSlidesDocumentProperties", "storage", valueStorage);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlidesDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlidesDocumentProperties");
        }
    }
    
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertyTest() throws ApiException, Exception {
        initialize("deleteSlidesDocumentProperty", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperty", "storage");
        response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlidesDocumentProperty", "name");
            initialize("deleteSlidesDocumentProperty", "name", valueName);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlidesDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlidesDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "deleteSlidesDocumentProperty", "propertyName");
            initialize("deleteSlidesDocumentProperty", "propertyName", valuePropertyName);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "propertyName", "deleteSlidesDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("propertyName", "deleteSlidesDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlidesDocumentProperty", "password");
            initialize("deleteSlidesDocumentProperty", "password", valuePassword);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlidesDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlidesDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlidesDocumentProperty", "folder");
            initialize("deleteSlidesDocumentProperty", "folder", valueFolder);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlidesDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlidesDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlidesDocumentProperty", "storage");
            initialize("deleteSlidesDocumentProperty", "storage", valueStorage);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlidesDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlidesDocumentProperty");
        }
    }
    
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesSlideBackgroundTest() throws ApiException, Exception {
        initialize("deleteSlidesSlideBackground", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "deleteSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesSlideBackground", "storage");
        response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesSlideBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesSlideBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlidesSlideBackground", "name");
            initialize("deleteSlidesSlideBackground", "name", valueName);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlidesSlideBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlidesSlideBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesSlideBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesSlideBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlidesSlideBackground", "slideIndex");
            initialize("deleteSlidesSlideBackground", "slideIndex", valueSlideIndex);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlidesSlideBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlidesSlideBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesSlideBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesSlideBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlidesSlideBackground", "password");
            initialize("deleteSlidesSlideBackground", "password", valuePassword);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlidesSlideBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlidesSlideBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesSlideBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesSlideBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlidesSlideBackground", "folder");
            initialize("deleteSlidesSlideBackground", "folder", valueFolder);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlidesSlideBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlidesSlideBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesSlideBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlidesSlideBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlidesSlideBackground", "storage");
            initialize("deleteSlidesSlideBackground", "storage", valueStorage);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlidesSlideBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlidesSlideBackground");
        }
    }
    
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphTest() throws ApiException, Exception {
        initialize("deleteSubshapeParagraph", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapeParagraph", "name");
            initialize("deleteSubshapeParagraph", "name", valueName);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapeParagraph", "slideIndex");
            initialize("deleteSubshapeParagraph", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapeParagraph", "path");
            initialize("deleteSubshapeParagraph", "path", valuePath);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapeParagraph", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapeParagraph", "shapeIndex");
            initialize("deleteSubshapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSubshapeParagraph", "paragraphIndex");
            initialize("deleteSubshapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteSubshapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapeParagraph", "password");
            initialize("deleteSubshapeParagraph", "password", valuePassword);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapeParagraph", "folder");
            initialize("deleteSubshapeParagraph", "folder", valueFolder);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapeParagraph", "storage");
            initialize("deleteSubshapeParagraph", "storage", valueStorage);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapeParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsTest() throws ApiException, Exception {
        initialize("deleteSubshapeParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapeParagraphs", "name");
            initialize("deleteSubshapeParagraphs", "name", valueName);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapeParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapeParagraphs", "slideIndex");
            initialize("deleteSubshapeParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapeParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapeParagraphs", "path");
            initialize("deleteSubshapeParagraphs", "path", valuePath);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapeParagraphs", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapeParagraphs", "shapeIndex");
            initialize("deleteSubshapeParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapeParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteSubshapeParagraphs", "paragraphs");
            initialize("deleteSubshapeParagraphs", "paragraphs", valueParagraphs);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphs", "deleteSubshapeParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("paragraphs", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapeParagraphs", "password");
            initialize("deleteSubshapeParagraphs", "password", valuePassword);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapeParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapeParagraphs", "folder");
            initialize("deleteSubshapeParagraphs", "folder", valueFolder);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapeParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapeParagraphs", "storage");
            initialize("deleteSubshapeParagraphs", "storage", valueStorage);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapeParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapeParagraphs");
        }
    }
    
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionTest() throws ApiException, Exception {
        initialize("deleteSubshapePortion", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapePortion", "name");
            initialize("deleteSubshapePortion", "name", valueName);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapePortion", "slideIndex");
            initialize("deleteSubshapePortion", "slideIndex", valueSlideIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapePortion", "path");
            initialize("deleteSubshapePortion", "path", valuePath);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapePortion", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapePortion", "shapeIndex");
            initialize("deleteSubshapePortion", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSubshapePortion", "paragraphIndex");
            initialize("deleteSubshapePortion", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteSubshapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deleteSubshapePortion", "portionIndex");
            initialize("deleteSubshapePortion", "portionIndex", valuePortionIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "deleteSubshapePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapePortion", "password");
            initialize("deleteSubshapePortion", "password", valuePassword);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapePortion", "folder");
            initialize("deleteSubshapePortion", "folder", valueFolder);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapePortion", "storage");
            initialize("deleteSubshapePortion", "storage", valueStorage);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapePortion");
        }
    }
    
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsTest() throws ApiException, Exception {
        initialize("deleteSubshapePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapePortions", "name");
            initialize("deleteSubshapePortions", "name", valueName);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapePortions", "slideIndex");
            initialize("deleteSubshapePortions", "slideIndex", valueSlideIndex);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapePortions", "path");
            initialize("deleteSubshapePortions", "path", valuePath);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapePortions", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapePortions", "shapeIndex");
            initialize("deleteSubshapePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSubshapePortions", "paragraphIndex");
            initialize("deleteSubshapePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteSubshapePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deleteSubshapePortions", "portions");
            initialize("deleteSubshapePortions", "portions", valuePortions);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portions", "deleteSubshapePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("portions", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapePortions", "password");
            initialize("deleteSubshapePortions", "password", valuePassword);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapePortions", "folder");
            initialize("deleteSubshapePortions", "folder", valueFolder);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapePortions", "storage");
            initialize("deleteSubshapePortions", "storage", valueStorage);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapePortions");
        }
    }
    
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileTest() throws ApiException, Exception {
        initialize("downloadFile", null, null);
        File response = null;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
        assertTrue(response.isFile());
    }

    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "downloadFile", "path");
            initialize("downloadFile", "path", valuePath);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "downloadFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "downloadFile");
        }
    }
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "downloadFile", "storageName");
            initialize("downloadFile", "storageName", valueStorageName);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "downloadFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "downloadFile");
        }
    }
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "downloadFile", "versionId");
            initialize("downloadFile", "versionId", valueVersionId);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "downloadFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "downloadFile");
        }
    }
    
    /**
     * Get disc usage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscUsageTest() throws ApiException, Exception {
        initialize("getDiscUsage", null, null);
        DiscUsage response = null;
        String valueStorageName = (String)getTestValue("String", "getDiscUsage", "storageName");
        response = api.getDiscUsage(valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get disc usage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscUsageInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueStorageName = (String)getTestValue("String", "getDiscUsage", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getDiscUsage", "storageName");
            initialize("getDiscUsage", "storageName", valueStorageName);
            DiscUsage response = api.getDiscUsage(valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "getDiscUsage", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "getDiscUsage");
        }
    }
    
    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsTest() throws ApiException, Exception {
        initialize("getFileVersions", null, null);
        FileVersions response = null;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        response = api.getFileVersions(valuePath, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getFileVersions", "path");
            initialize("getFileVersions", "path", valuePath);
            FileVersions response = api.getFileVersions(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getFileVersions", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getFileVersions");
        }
    }
    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getFileVersions", "storageName");
            initialize("getFileVersions", "storageName", valueStorageName);
            FileVersions response = api.getFileVersions(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "getFileVersions", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "getFileVersions");
        }
    }
    
    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListTest() throws ApiException, Exception {
        initialize("getFilesList", null, null);
        FilesList response = null;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        response = api.getFilesList(valuePath, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getFilesList", "path");
            initialize("getFilesList", "path", valuePath);
            FilesList response = api.getFilesList(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getFilesList", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getFilesList");
        }
    }
    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getFilesList", "storageName");
            initialize("getFilesList", "storageName", valueStorageName);
            FilesList response = api.getFilesList(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "getFilesList", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "getFilesList");
        }
    }
    
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideTest() throws ApiException, Exception {
        initialize("getLayoutSlide", null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getLayoutSlide", "name");
            initialize("getLayoutSlide", "name", valueName);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getLayoutSlide", "slideIndex");
            initialize("getLayoutSlide", "slideIndex", valueSlideIndex);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getLayoutSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getLayoutSlide", "password");
            initialize("getLayoutSlide", "password", valuePassword);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getLayoutSlide", "folder");
            initialize("getLayoutSlide", "folder", valueFolder);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getLayoutSlide", "storage");
            initialize("getLayoutSlide", "storage", valueStorage);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getLayoutSlide");
        }
    }
    
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesListTest() throws ApiException, Exception {
        initialize("getLayoutSlidesList", null, null);
        LayoutSlides response = null;
        String valueName = (String)getTestValue("String", "getLayoutSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlidesList", "storage");
        response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesListInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlidesList", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getLayoutSlidesList", "name");
            initialize("getLayoutSlidesList", "name", valueName);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getLayoutSlidesList", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getLayoutSlidesList");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesListInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlidesList", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getLayoutSlidesList", "password");
            initialize("getLayoutSlidesList", "password", valuePassword);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getLayoutSlidesList", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getLayoutSlidesList");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesListInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlidesList", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getLayoutSlidesList", "folder");
            initialize("getLayoutSlidesList", "folder", valueFolder);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getLayoutSlidesList", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getLayoutSlidesList");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesListInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlidesList", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getLayoutSlidesList", "storage");
            initialize("getLayoutSlidesList", "storage", valueStorage);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getLayoutSlidesList", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getLayoutSlidesList");
        }
    }
    
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideTest() throws ApiException, Exception {
        initialize("getMasterSlide", null, null);
        MasterSlide response = null;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getMasterSlide", "name");
            initialize("getMasterSlide", "name", valueName);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getMasterSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getMasterSlide", "slideIndex");
            initialize("getMasterSlide", "slideIndex", valueSlideIndex);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getMasterSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getMasterSlide", "password");
            initialize("getMasterSlide", "password", valuePassword);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getMasterSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getMasterSlide", "folder");
            initialize("getMasterSlide", "folder", valueFolder);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getMasterSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getMasterSlide", "storage");
            initialize("getMasterSlide", "storage", valueStorage);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getMasterSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getMasterSlide");
        }
    }
    
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesListTest() throws ApiException, Exception {
        initialize("getMasterSlidesList", null, null);
        MasterSlides response = null;
        String valueName = (String)getTestValue("String", "getMasterSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlidesList", "storage");
        response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesListInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlidesList", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getMasterSlidesList", "name");
            initialize("getMasterSlidesList", "name", valueName);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getMasterSlidesList", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getMasterSlidesList");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesListInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlidesList", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getMasterSlidesList", "password");
            initialize("getMasterSlidesList", "password", valuePassword);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getMasterSlidesList", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getMasterSlidesList");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesListInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlidesList", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getMasterSlidesList", "folder");
            initialize("getMasterSlidesList", "folder", valueFolder);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getMasterSlidesList", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getMasterSlidesList");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesListInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlidesList", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getMasterSlidesList", "storage");
            initialize("getMasterSlidesList", "storage", valueStorage);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getMasterSlidesList", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getMasterSlidesList");
        }
    }
    
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideTest() throws ApiException, Exception {
        initialize("getNotesSlide", null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlide", "name");
            initialize("getNotesSlide", "name", valueName);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlide", "slideIndex");
            initialize("getNotesSlide", "slideIndex", valueSlideIndex);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlide", "password");
            initialize("getNotesSlide", "password", valuePassword);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlide", "folder");
            initialize("getNotesSlide", "folder", valueFolder);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlide", "storage");
            initialize("getNotesSlide", "storage", valueStorage);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlide");
        }
    }
    
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideExistsTest() throws ApiException, Exception {
        initialize("getNotesSlideExists", null, null);
        EntityExists response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideExists", "storage");
        response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideExistsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideExists", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideExists", "name");
            initialize("getNotesSlideExists", "name", valueName);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideExists", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideExistsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideExists", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideExists", "slideIndex");
            initialize("getNotesSlideExists", "slideIndex", valueSlideIndex);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideExists", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideExistsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideExists", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideExists", "password");
            initialize("getNotesSlideExists", "password", valuePassword);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideExists", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideExistsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideExists", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideExists", "folder");
            initialize("getNotesSlideExists", "folder", valueFolder);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideExists", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideExistsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideExists", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideExists", "storage");
            initialize("getNotesSlideExists", "storage", valueStorage);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideExists", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideExists");
        }
    }
    
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("getNotesSlideHeaderFooter", null, null);
        NotesSlideHeaderFooter response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideHeaderFooter", "name");
            initialize("getNotesSlideHeaderFooter", "name", valueName);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideHeaderFooter", "slideIndex");
            initialize("getNotesSlideHeaderFooter", "slideIndex", valueSlideIndex);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideHeaderFooter", "password");
            initialize("getNotesSlideHeaderFooter", "password", valuePassword);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideHeaderFooter", "folder");
            initialize("getNotesSlideHeaderFooter", "folder", valueFolder);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideHeaderFooter", "storage");
            initialize("getNotesSlideHeaderFooter", "storage", valueStorage);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideHeaderFooter");
        }
    }
    
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeTest() throws ApiException, Exception {
        initialize("getNotesSlideShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShape", "name");
            initialize("getNotesSlideShape", "name", valueName);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShape", "slideIndex");
            initialize("getNotesSlideShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideShape", "shapeIndex");
            initialize("getNotesSlideShape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShape", "password");
            initialize("getNotesSlideShape", "password", valuePassword);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShape", "folder");
            initialize("getNotesSlideShape", "folder", valueFolder);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShape", "storage");
            initialize("getNotesSlideShape", "storage", valueStorage);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShape");
        }
    }
    
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphTest() throws ApiException, Exception {
        initialize("getNotesSlideShapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShapeParagraph", "name");
            initialize("getNotesSlideShapeParagraph", "name", valueName);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShapeParagraph", "slideIndex");
            initialize("getNotesSlideShapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideShapeParagraph", "shapeIndex");
            initialize("getNotesSlideShapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideShapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getNotesSlideShapeParagraph", "paragraphIndex");
            initialize("getNotesSlideShapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getNotesSlideShapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getNotesSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShapeParagraph", "password");
            initialize("getNotesSlideShapeParagraph", "password", valuePassword);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShapeParagraph", "folder");
            initialize("getNotesSlideShapeParagraph", "folder", valueFolder);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShapeParagraph", "storage");
            initialize("getNotesSlideShapeParagraph", "storage", valueStorage);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShapeParagraph");
        }
    }
    
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphsTest() throws ApiException, Exception {
        initialize("getNotesSlideShapeParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "storage");
        response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShapeParagraphs", "name");
            initialize("getNotesSlideShapeParagraphs", "name", valueName);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShapeParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShapeParagraphs", "slideIndex");
            initialize("getNotesSlideShapeParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShapeParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideShapeParagraphs", "shapeIndex");
            initialize("getNotesSlideShapeParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideShapeParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShapeParagraphs", "password");
            initialize("getNotesSlideShapeParagraphs", "password", valuePassword);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShapeParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShapeParagraphs", "folder");
            initialize("getNotesSlideShapeParagraphs", "folder", valueFolder);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShapeParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapeParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShapeParagraphs", "storage");
            initialize("getNotesSlideShapeParagraphs", "storage", valueStorage);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShapeParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShapeParagraphs");
        }
    }
    
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionTest() throws ApiException, Exception {
        initialize("getNotesSlideShapePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShapePortion", "name");
            initialize("getNotesSlideShapePortion", "name", valueName);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShapePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShapePortion", "slideIndex");
            initialize("getNotesSlideShapePortion", "slideIndex", valueSlideIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShapePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideShapePortion", "shapeIndex");
            initialize("getNotesSlideShapePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideShapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideShapePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getNotesSlideShapePortion", "paragraphIndex");
            initialize("getNotesSlideShapePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getNotesSlideShapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getNotesSlideShapePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getNotesSlideShapePortion", "portionIndex");
            initialize("getNotesSlideShapePortion", "portionIndex", valuePortionIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "getNotesSlideShapePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "getNotesSlideShapePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShapePortion", "password");
            initialize("getNotesSlideShapePortion", "password", valuePassword);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShapePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShapePortion", "folder");
            initialize("getNotesSlideShapePortion", "folder", valueFolder);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShapePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShapePortion", "storage");
            initialize("getNotesSlideShapePortion", "storage", valueStorage);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShapePortion");
        }
    }
    
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsTest() throws ApiException, Exception {
        initialize("getNotesSlideShapePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShapePortions", "name");
            initialize("getNotesSlideShapePortions", "name", valueName);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShapePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShapePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShapePortions", "slideIndex");
            initialize("getNotesSlideShapePortions", "slideIndex", valueSlideIndex);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShapePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShapePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideShapePortions", "shapeIndex");
            initialize("getNotesSlideShapePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideShapePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideShapePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getNotesSlideShapePortions", "paragraphIndex");
            initialize("getNotesSlideShapePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getNotesSlideShapePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getNotesSlideShapePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShapePortions", "password");
            initialize("getNotesSlideShapePortions", "password", valuePassword);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShapePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShapePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShapePortions", "folder");
            initialize("getNotesSlideShapePortions", "folder", valueFolder);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShapePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShapePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideShapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShapePortions", "storage");
            initialize("getNotesSlideShapePortions", "storage", valueStorage);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShapePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShapePortions");
        }
    }
    
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesTest() throws ApiException, Exception {
        initialize("getNotesSlideShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShapes", "name");
            initialize("getNotesSlideShapes", "name", valueName);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShapes", "slideIndex");
            initialize("getNotesSlideShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShapes", "password");
            initialize("getNotesSlideShapes", "password", valuePassword);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShapes", "folder");
            initialize("getNotesSlideShapes", "folder", valueFolder);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShapes", "storage");
            initialize("getNotesSlideShapes", "storage", valueStorage);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShapes");
        }
    }
    
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatTest() throws ApiException, Exception {
        initialize("getNotesSlideWithFormat", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideWithFormat", "name");
            initialize("getNotesSlideWithFormat", "name", valueName);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideWithFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideWithFormat", "slideIndex");
            initialize("getNotesSlideWithFormat", "slideIndex", valueSlideIndex);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideWithFormat", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueFormat = (NotesSlideExportFormat)invalidizeTestValue("NotesSlideExportFormat", valueFormat, "getNotesSlideWithFormat", "format");
            initialize("getNotesSlideWithFormat", "format", valueFormat);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "getNotesSlideWithFormat", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "getNotesSlideWithFormat", "width");
            initialize("getNotesSlideWithFormat", "width", valueWidth);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "getNotesSlideWithFormat", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "getNotesSlideWithFormat", "height");
            initialize("getNotesSlideWithFormat", "height", valueHeight);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "getNotesSlideWithFormat", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideWithFormat", "password");
            initialize("getNotesSlideWithFormat", "password", valuePassword);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideWithFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideWithFormat", "folder");
            initialize("getNotesSlideWithFormat", "folder", valueFolder);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideWithFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideWithFormat", "storage");
            initialize("getNotesSlideWithFormat", "storage", valueStorage);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideWithFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideWithFormatInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideWithFormat", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "getNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "getNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "getNotesSlideWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideWithFormat", "storage");
        String valueFontsFolder = (String)getTestValue("String", "getNotesSlideWithFormat", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "getNotesSlideWithFormat", "fontsFolder");
            initialize("getNotesSlideWithFormat", "fontsFolder", valueFontsFolder);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "getNotesSlideWithFormat", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "getNotesSlideWithFormat");
        }
    }
    
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionTest() throws ApiException, Exception {
        initialize("getParagraphPortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraphPortion", "name");
            initialize("getParagraphPortion", "name", valueName);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getParagraphPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraphPortion", "slideIndex");
            initialize("getParagraphPortion", "slideIndex", valueSlideIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getParagraphPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraphPortion", "shapeIndex");
            initialize("getParagraphPortion", "shapeIndex", valueShapeIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getParagraphPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getParagraphPortion", "paragraphIndex");
            initialize("getParagraphPortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getParagraphPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getParagraphPortion", "portionIndex");
            initialize("getParagraphPortion", "portionIndex", valuePortionIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "getParagraphPortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "getParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraphPortion", "password");
            initialize("getParagraphPortion", "password", valuePassword);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getParagraphPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraphPortion", "folder");
            initialize("getParagraphPortion", "folder", valueFolder);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getParagraphPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraphPortion", "storage");
            initialize("getParagraphPortion", "storage", valueStorage);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getParagraphPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getParagraphPortion");
        }
    }
    
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsTest() throws ApiException, Exception {
        initialize("getParagraphPortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraphPortions", "name");
            initialize("getParagraphPortions", "name", valueName);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getParagraphPortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraphPortions", "slideIndex");
            initialize("getParagraphPortions", "slideIndex", valueSlideIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getParagraphPortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraphPortions", "shapeIndex");
            initialize("getParagraphPortions", "shapeIndex", valueShapeIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getParagraphPortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getParagraphPortions", "paragraphIndex");
            initialize("getParagraphPortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getParagraphPortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraphPortions", "password");
            initialize("getParagraphPortions", "password", valuePassword);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getParagraphPortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraphPortions", "folder");
            initialize("getParagraphPortions", "folder", valueFolder);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getParagraphPortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphPortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphPortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraphPortions", "storage");
            initialize("getParagraphPortions", "storage", valueStorage);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getParagraphPortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getParagraphPortions");
        }
    }
    
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsTest() throws ApiException, Exception {
        initialize("getSections", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSections", "name");
            initialize("getSections", "name", valueName);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSections", "password");
            initialize("getSections", "password", valuePassword);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSections", "folder");
            initialize("getSections", "folder", valueFolder);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSections", "storage");
            initialize("getSections", "storage", valueStorage);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSections");
        }
    }
    
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideAnimationTest() throws ApiException, Exception {
        initialize("getSlideAnimation", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "getSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideAnimation", "storage");
        response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideAnimation", "name");
            initialize("getSlideAnimation", "name", valueName);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideAnimation", "slideIndex");
            initialize("getSlideAnimation", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideAnimationInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideAnimation", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSlideAnimation", "shapeIndex");
            initialize("getSlideAnimation", "shapeIndex", valueShapeIndex);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSlideAnimation", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSlideAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideAnimation", "password");
            initialize("getSlideAnimation", "password", valuePassword);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideAnimation", "folder");
            initialize("getSlideAnimation", "folder", valueFolder);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideAnimation", "storage");
            initialize("getSlideAnimation", "storage", valueStorage);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideAnimation");
        }
    }
    
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("getSlideHeaderFooter", null, null);
        HeaderFooter response = null;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideHeaderFooter", "name");
            initialize("getSlideHeaderFooter", "name", valueName);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideHeaderFooter", "slideIndex");
            initialize("getSlideHeaderFooter", "slideIndex", valueSlideIndex);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideHeaderFooter", "password");
            initialize("getSlideHeaderFooter", "password", valuePassword);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideHeaderFooter", "folder");
            initialize("getSlideHeaderFooter", "folder", valueFolder);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideHeaderFooter", "storage");
            initialize("getSlideHeaderFooter", "storage", valueStorage);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideHeaderFooter");
        }
    }
    
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeTest() throws ApiException, Exception {
        initialize("getSlideShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShape", "storage");
        response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideShape", "name");
            initialize("getSlideShape", "name", valueName);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideShape", "slideIndex");
            initialize("getSlideShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSlideShape", "shapeIndex");
            initialize("getSlideShape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideShape", "password");
            initialize("getSlideShape", "password", valuePassword);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideShape", "folder");
            initialize("getSlideShape", "folder", valueFolder);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideShape", "storage");
            initialize("getSlideShape", "storage", valueStorage);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideShape");
        }
    }
    
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphTest() throws ApiException, Exception {
        initialize("getSlideShapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideShapeParagraph", "name");
            initialize("getSlideShapeParagraph", "name", valueName);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideShapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideShapeParagraph", "slideIndex");
            initialize("getSlideShapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideShapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSlideShapeParagraph", "shapeIndex");
            initialize("getSlideShapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSlideShapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSlideShapeParagraph", "paragraphIndex");
            initialize("getSlideShapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getSlideShapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideShapeParagraph", "password");
            initialize("getSlideShapeParagraph", "password", valuePassword);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideShapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideShapeParagraph", "folder");
            initialize("getSlideShapeParagraph", "folder", valueFolder);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideShapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideShapeParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideShapeParagraph", "storage");
            initialize("getSlideShapeParagraph", "storage", valueStorage);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideShapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideShapeParagraph");
        }
    }
    
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphsTest() throws ApiException, Exception {
        initialize("getSlideShapeParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraphs", "storage");
        response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideShapeParagraphs", "name");
            initialize("getSlideShapeParagraphs", "name", valueName);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideShapeParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideShapeParagraphs", "slideIndex");
            initialize("getSlideShapeParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideShapeParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSlideShapeParagraphs", "shapeIndex");
            initialize("getSlideShapeParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSlideShapeParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideShapeParagraphs", "password");
            initialize("getSlideShapeParagraphs", "password", valuePassword);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideShapeParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideShapeParagraphs", "folder");
            initialize("getSlideShapeParagraphs", "folder", valueFolder);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideShapeParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideShapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapeParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideShapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapeParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideShapeParagraphs", "storage");
            initialize("getSlideShapeParagraphs", "storage", valueStorage);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideShapeParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideShapeParagraphs");
        }
    }
    
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapesTest() throws ApiException, Exception {
        initialize("getSlideShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapes", "storage");
        response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideShapes", "name");
            initialize("getSlideShapes", "name", valueName);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideShapes", "slideIndex");
            initialize("getSlideShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideShapes", "password");
            initialize("getSlideShapes", "password", valuePassword);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideShapes", "folder");
            initialize("getSlideShapes", "folder", valueFolder);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideShapes", "storage");
            initialize("getSlideShapes", "storage", valueStorage);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideShapes");
        }
    }
    
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeTest() throws ApiException, Exception {
        initialize("getSlideSubshape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideSubshape", "name");
            initialize("getSlideSubshape", "name", valueName);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideSubshape", "slideIndex");
            initialize("getSlideSubshape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSlideSubshape", "path");
            initialize("getSlideSubshape", "path", valuePath);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSlideSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSlideSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSlideSubshape", "shapeIndex");
            initialize("getSlideSubshape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSlideSubshape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSlideSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideSubshape", "password");
            initialize("getSlideSubshape", "password", valuePassword);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideSubshape", "folder");
            initialize("getSlideSubshape", "folder", valueFolder);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideSubshape", "storage");
            initialize("getSlideSubshape", "storage", valueStorage);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideSubshape");
        }
    }
    
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphTest() throws ApiException, Exception {
        initialize("getSlideSubshapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideSubshapeParagraph", "name");
            initialize("getSlideSubshapeParagraph", "name", valueName);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideSubshapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideSubshapeParagraph", "slideIndex");
            initialize("getSlideSubshapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideSubshapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSlideSubshapeParagraph", "path");
            initialize("getSlideSubshapeParagraph", "path", valuePath);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSlideSubshapeParagraph", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSlideSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSlideSubshapeParagraph", "shapeIndex");
            initialize("getSlideSubshapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSlideSubshapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSlideSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSlideSubshapeParagraph", "paragraphIndex");
            initialize("getSlideSubshapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getSlideSubshapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getSlideSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideSubshapeParagraph", "password");
            initialize("getSlideSubshapeParagraph", "password", valuePassword);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideSubshapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideSubshapeParagraph", "folder");
            initialize("getSlideSubshapeParagraph", "folder", valueFolder);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideSubshapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideSubshapeParagraph", "storage");
            initialize("getSlideSubshapeParagraph", "storage", valueStorage);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideSubshapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideSubshapeParagraph");
        }
    }
    
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsTest() throws ApiException, Exception {
        initialize("getSlideSubshapeParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideSubshapeParagraphs", "name");
            initialize("getSlideSubshapeParagraphs", "name", valueName);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideSubshapeParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideSubshapeParagraphs", "slideIndex");
            initialize("getSlideSubshapeParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideSubshapeParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSlideSubshapeParagraphs", "path");
            initialize("getSlideSubshapeParagraphs", "path", valuePath);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSlideSubshapeParagraphs", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSlideSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSlideSubshapeParagraphs", "shapeIndex");
            initialize("getSlideSubshapeParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSlideSubshapeParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSlideSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideSubshapeParagraphs", "password");
            initialize("getSlideSubshapeParagraphs", "password", valuePassword);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideSubshapeParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideSubshapeParagraphs", "folder");
            initialize("getSlideSubshapeParagraphs", "folder", valueFolder);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideSubshapeParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapeParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSlideSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapeParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideSubshapeParagraphs", "storage");
            initialize("getSlideSubshapeParagraphs", "storage", valueStorage);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideSubshapeParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideSubshapeParagraphs");
        }
    }
    
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapesTest() throws ApiException, Exception {
        initialize("getSlideSubshapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapes", "storage");
        response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideSubshapes", "name");
            initialize("getSlideSubshapes", "name", valueName);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideSubshapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideSubshapes", "slideIndex");
            initialize("getSlideSubshapes", "slideIndex", valueSlideIndex);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideSubshapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapesInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapes", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSlideSubshapes", "path");
            initialize("getSlideSubshapes", "path", valuePath);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSlideSubshapes", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSlideSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideSubshapes", "password");
            initialize("getSlideSubshapes", "password", valuePassword);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideSubshapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideSubshapes", "folder");
            initialize("getSlideSubshapes", "folder", valueFolder);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideSubshapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideSubshapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSlideSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSlideSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSlideSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideSubshapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideSubshapes", "storage");
            initialize("getSlideSubshapes", "storage", valueStorage);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideSubshapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideSubshapes");
        }
    }
    
    /**
     * Get API info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesApiInfoTest() throws ApiException, Exception {
        initialize("getSlidesApiInfo", null, null);
        ApiInfo response = null;
        response = api.getApiInfo();
        assertNotNull(response);
    }

    
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentTest() throws ApiException, Exception {
        initialize("getSlidesDocument", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "getSlidesDocument", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocument", "storage");
        response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocument", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocument", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesDocument", "name");
            initialize("getSlidesDocument", "name", valueName);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesDocument", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesDocument");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocument", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocument", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesDocument", "password");
            initialize("getSlidesDocument", "password", valuePassword);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesDocument", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesDocument");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocument", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocument", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesDocument", "folder");
            initialize("getSlidesDocument", "folder", valueFolder);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesDocument", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesDocument");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocument", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocument", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesDocument", "storage");
            initialize("getSlidesDocument", "storage", valueStorage);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesDocument", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesDocument");
        }
    }
    
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertiesTest() throws ApiException, Exception {
        initialize("getSlidesDocumentProperties", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperties", "storage");
        response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesDocumentProperties", "name");
            initialize("getSlidesDocumentProperties", "name", valueName);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesDocumentProperties", "password");
            initialize("getSlidesDocumentProperties", "password", valuePassword);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesDocumentProperties", "folder");
            initialize("getSlidesDocumentProperties", "folder", valueFolder);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesDocumentProperties", "storage");
            initialize("getSlidesDocumentProperties", "storage", valueStorage);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesDocumentProperties");
        }
    }
    
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertyTest() throws ApiException, Exception {
        initialize("getSlidesDocumentProperty", null, null);
        DocumentProperty response = null;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperty", "storage");
        response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesDocumentProperty", "name");
            initialize("getSlidesDocumentProperty", "name", valueName);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "getSlidesDocumentProperty", "propertyName");
            initialize("getSlidesDocumentProperty", "propertyName", valuePropertyName);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "propertyName", "getSlidesDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("propertyName", "getSlidesDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesDocumentProperty", "password");
            initialize("getSlidesDocumentProperty", "password", valuePassword);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesDocumentProperty", "folder");
            initialize("getSlidesDocumentProperty", "folder", valueFolder);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getSlidesDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getSlidesDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesDocumentProperty", "storage");
            initialize("getSlidesDocumentProperty", "storage", valueStorage);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesDocumentProperty");
        }
    }
    
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithDefaultFormatTest() throws ApiException, Exception {
        initialize("getSlidesImageWithDefaultFormat", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "storage");
        response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithDefaultFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesImageWithDefaultFormat", "name");
            initialize("getSlidesImageWithDefaultFormat", "name", valueName);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesImageWithDefaultFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesImageWithDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithDefaultFormatInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "storage");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "getSlidesImageWithDefaultFormat", "index");
            initialize("getSlidesImageWithDefaultFormat", "index", valueIndex);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "getSlidesImageWithDefaultFormat", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "getSlidesImageWithDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesImageWithDefaultFormat", "password");
            initialize("getSlidesImageWithDefaultFormat", "password", valuePassword);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesImageWithDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesImageWithDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithDefaultFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesImageWithDefaultFormat", "folder");
            initialize("getSlidesImageWithDefaultFormat", "folder", valueFolder);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesImageWithDefaultFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesImageWithDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithDefaultFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithDefaultFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesImageWithDefaultFormat", "storage");
            initialize("getSlidesImageWithDefaultFormat", "storage", valueStorage);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesImageWithDefaultFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesImageWithDefaultFormat");
        }
    }
    
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithFormatTest() throws ApiException, Exception {
        initialize("getSlidesImageWithFormat", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "getSlidesImageWithFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "getSlidesImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithFormat", "storage");
        response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "getSlidesImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesImageWithFormat", "name");
            initialize("getSlidesImageWithFormat", "name", valueName);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesImageWithFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithFormatInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "getSlidesImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithFormat", "storage");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "getSlidesImageWithFormat", "index");
            initialize("getSlidesImageWithFormat", "index", valueIndex);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "getSlidesImageWithFormat", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "getSlidesImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithFormatInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "getSlidesImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithFormat", "storage");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "getSlidesImageWithFormat", "format");
            initialize("getSlidesImageWithFormat", "format", valueFormat);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "getSlidesImageWithFormat", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "getSlidesImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "getSlidesImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesImageWithFormat", "password");
            initialize("getSlidesImageWithFormat", "password", valuePassword);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesImageWithFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "getSlidesImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesImageWithFormat", "folder");
            initialize("getSlidesImageWithFormat", "folder", valueFolder);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesImageWithFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImageWithFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImageWithFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "getSlidesImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "getSlidesImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "getSlidesImageWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImageWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImageWithFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesImageWithFormat", "storage");
            initialize("getSlidesImageWithFormat", "storage", valueStorage);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesImageWithFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesImageWithFormat");
        }
    }
    
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImagesTest() throws ApiException, Exception {
        initialize("getSlidesImages", null, null);
        Images response = null;
        String valueName = (String)getTestValue("String", "getSlidesImages", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImages", "storage");
        response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImages", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesImages", "name");
            initialize("getSlidesImages", "name", valueName);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImages", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesImages", "password");
            initialize("getSlidesImages", "password", valuePassword);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImages", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesImages", "folder");
            initialize("getSlidesImages", "folder", valueFolder);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesImages", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesImages", "storage");
            initialize("getSlidesImages", "storage", valueStorage);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesImages");
        }
    }
    
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholderTest() throws ApiException, Exception {
        initialize("getSlidesPlaceholder", null, null);
        Placeholder response = null;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholder", "storage");
        response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholderInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholder", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesPlaceholder", "name");
            initialize("getSlidesPlaceholder", "name", valueName);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesPlaceholder", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholderInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholder", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesPlaceholder", "slideIndex");
            initialize("getSlidesPlaceholder", "slideIndex", valueSlideIndex);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesPlaceholder", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholderInvalidPlaceholderIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholder", "storage");
        try {
            valuePlaceholderIndex = (Integer)invalidizeTestValue("Integer", valuePlaceholderIndex, "getSlidesPlaceholder", "placeholderIndex");
            initialize("getSlidesPlaceholder", "placeholderIndex", valuePlaceholderIndex);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "placeholderIndex", "getSlidesPlaceholder", valuePlaceholderIndex);
        }
        if (needAssertResponse) {
            assertResponse("placeholderIndex", "getSlidesPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholderInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholder", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesPlaceholder", "password");
            initialize("getSlidesPlaceholder", "password", valuePassword);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesPlaceholder", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholderInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholder", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesPlaceholder", "folder");
            initialize("getSlidesPlaceholder", "folder", valueFolder);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesPlaceholder", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholderInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholder", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesPlaceholder", "storage");
            initialize("getSlidesPlaceholder", "storage", valueStorage);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesPlaceholder", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesPlaceholder");
        }
    }
    
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholdersTest() throws ApiException, Exception {
        initialize("getSlidesPlaceholders", null, null);
        Placeholders response = null;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholders", "storage");
        response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholdersInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholders", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesPlaceholders", "name");
            initialize("getSlidesPlaceholders", "name", valueName);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesPlaceholders", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholdersInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholders", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesPlaceholders", "slideIndex");
            initialize("getSlidesPlaceholders", "slideIndex", valueSlideIndex);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesPlaceholders", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholdersInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholders", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesPlaceholders", "password");
            initialize("getSlidesPlaceholders", "password", valuePassword);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesPlaceholders", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholdersInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholders", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesPlaceholders", "folder");
            initialize("getSlidesPlaceholders", "folder", valueFolder);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesPlaceholders", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPlaceholdersInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPlaceholders", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesPlaceholders", "storage");
            initialize("getSlidesPlaceholders", "storage", valueStorage);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesPlaceholders", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesPlaceholders");
        }
    }
    
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPresentationTextItemsTest() throws ApiException, Exception {
        initialize("getSlidesPresentationTextItems", null, null);
        TextItems response = null;
        String valueName = (String)getTestValue("String", "getSlidesPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPresentationTextItems", "storage");
        response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPresentationTextItemsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPresentationTextItems", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesPresentationTextItems", "name");
            initialize("getSlidesPresentationTextItems", "name", valueName);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesPresentationTextItems", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPresentationTextItemsInvalidWithEmptyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPresentationTextItems", "storage");
        try {
            valueWithEmpty = (Boolean)invalidizeTestValue("Boolean", valueWithEmpty, "getSlidesPresentationTextItems", "withEmpty");
            initialize("getSlidesPresentationTextItems", "withEmpty", valueWithEmpty);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withEmpty", "getSlidesPresentationTextItems", valueWithEmpty);
        }
        if (needAssertResponse) {
            assertResponse("withEmpty", "getSlidesPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPresentationTextItemsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPresentationTextItems", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesPresentationTextItems", "password");
            initialize("getSlidesPresentationTextItems", "password", valuePassword);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesPresentationTextItems", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPresentationTextItemsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPresentationTextItems", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesPresentationTextItems", "folder");
            initialize("getSlidesPresentationTextItems", "folder", valueFolder);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesPresentationTextItems", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesPresentationTextItemsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesPresentationTextItems", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesPresentationTextItems", "storage");
            initialize("getSlidesPresentationTextItems", "storage", valueStorage);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesPresentationTextItems", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesPresentationTextItems");
        }
    }
    
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesProtectionPropertiesTest() throws ApiException, Exception {
        initialize("getSlidesProtectionProperties", null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "getSlidesProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesProtectionProperties", "storage");
        response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesProtectionPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesProtectionProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesProtectionProperties", "name");
            initialize("getSlidesProtectionProperties", "name", valueName);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesProtectionProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesProtectionPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesProtectionProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesProtectionProperties", "password");
            initialize("getSlidesProtectionProperties", "password", valuePassword);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesProtectionProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesProtectionPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesProtectionProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesProtectionProperties", "folder");
            initialize("getSlidesProtectionProperties", "folder", valueFolder);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesProtectionProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesProtectionPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesProtectionProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesProtectionProperties", "storage");
            initialize("getSlidesProtectionProperties", "storage", valueStorage);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesProtectionProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesProtectionProperties");
        }
    }
    
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTest() throws ApiException, Exception {
        initialize("getSlidesSlide", null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "getSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlide", "storage");
        response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesSlide", "name");
            initialize("getSlidesSlide", "name", valueName);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesSlide", "slideIndex");
            initialize("getSlidesSlide", "slideIndex", valueSlideIndex);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesSlide", "password");
            initialize("getSlidesSlide", "password", valuePassword);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesSlide", "folder");
            initialize("getSlidesSlide", "folder", valueFolder);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesSlide", "storage");
            initialize("getSlidesSlide", "storage", valueStorage);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesSlide");
        }
    }
    
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideBackgroundTest() throws ApiException, Exception {
        initialize("getSlidesSlideBackground", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "getSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideBackground", "storage");
        response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesSlideBackground", "name");
            initialize("getSlidesSlideBackground", "name", valueName);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesSlideBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesSlideBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesSlideBackground", "slideIndex");
            initialize("getSlidesSlideBackground", "slideIndex", valueSlideIndex);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesSlideBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesSlideBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesSlideBackground", "password");
            initialize("getSlidesSlideBackground", "password", valuePassword);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesSlideBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesSlideBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesSlideBackground", "folder");
            initialize("getSlidesSlideBackground", "folder", valueFolder);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesSlideBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesSlideBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesSlideBackground", "storage");
            initialize("getSlidesSlideBackground", "storage", valueStorage);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesSlideBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesSlideBackground");
        }
    }
    
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideCommentsTest() throws ApiException, Exception {
        initialize("getSlidesSlideComments", null, null);
        SlideComments response = null;
        String valueName = (String)getTestValue("String", "getSlidesSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideComments", "storage");
        response = api.getComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideCommentsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideComments", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesSlideComments", "name");
            initialize("getSlidesSlideComments", "name", valueName);
            SlideComments response = api.getComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesSlideComments", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideCommentsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideComments", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesSlideComments", "slideIndex");
            initialize("getSlidesSlideComments", "slideIndex", valueSlideIndex);
            SlideComments response = api.getComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesSlideComments", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideCommentsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideComments", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesSlideComments", "password");
            initialize("getSlidesSlideComments", "password", valuePassword);
            SlideComments response = api.getComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesSlideComments", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideCommentsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideComments", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesSlideComments", "folder");
            initialize("getSlidesSlideComments", "folder", valueFolder);
            SlideComments response = api.getComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesSlideComments", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideCommentsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideComments", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesSlideComments", "storage");
            initialize("getSlidesSlideComments", "storage", valueStorage);
            SlideComments response = api.getComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesSlideComments", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesSlideComments");
        }
    }
    
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideImagesTest() throws ApiException, Exception {
        initialize("getSlidesSlideImages", null, null);
        Images response = null;
        String valueName = (String)getTestValue("String", "getSlidesSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideImages", "storage");
        response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesSlideImages", "name");
            initialize("getSlidesSlideImages", "name", valueName);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesSlideImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideImagesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideImages", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesSlideImages", "slideIndex");
            initialize("getSlidesSlideImages", "slideIndex", valueSlideIndex);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesSlideImages", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesSlideImages", "password");
            initialize("getSlidesSlideImages", "password", valuePassword);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesSlideImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesSlideImages", "folder");
            initialize("getSlidesSlideImages", "folder", valueFolder);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesSlideImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesSlideImages", "storage");
            initialize("getSlidesSlideImages", "storage", valueStorage);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesSlideImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesSlideImages");
        }
    }
    
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidePropertiesTest() throws ApiException, Exception {
        initialize("getSlidesSlideProperties", null, null);
        SlideProperties response = null;
        String valueName = (String)getTestValue("String", "getSlidesSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideProperties", "storage");
        response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidePropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesSlideProperties", "name");
            initialize("getSlidesSlideProperties", "name", valueName);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesSlideProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidePropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesSlideProperties", "password");
            initialize("getSlidesSlideProperties", "password", valuePassword);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesSlideProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidePropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesSlideProperties", "folder");
            initialize("getSlidesSlideProperties", "folder", valueFolder);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesSlideProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidePropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesSlideProperties", "storage");
            initialize("getSlidesSlideProperties", "storage", valueStorage);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesSlideProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesSlideProperties");
        }
    }
    
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTextItemsTest() throws ApiException, Exception {
        initialize("getSlidesSlideTextItems", null, null);
        TextItems response = null;
        String valueName = (String)getTestValue("String", "getSlidesSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideTextItems", "storage");
        response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTextItemsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideTextItems", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesSlideTextItems", "name");
            initialize("getSlidesSlideTextItems", "name", valueName);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesSlideTextItems", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTextItemsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideTextItems", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesSlideTextItems", "slideIndex");
            initialize("getSlidesSlideTextItems", "slideIndex", valueSlideIndex);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesSlideTextItems", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTextItemsInvalidWithEmptyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideTextItems", "storage");
        try {
            valueWithEmpty = (Boolean)invalidizeTestValue("Boolean", valueWithEmpty, "getSlidesSlideTextItems", "withEmpty");
            initialize("getSlidesSlideTextItems", "withEmpty", valueWithEmpty);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withEmpty", "getSlidesSlideTextItems", valueWithEmpty);
        }
        if (needAssertResponse) {
            assertResponse("withEmpty", "getSlidesSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTextItemsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideTextItems", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesSlideTextItems", "password");
            initialize("getSlidesSlideTextItems", "password", valuePassword);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesSlideTextItems", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTextItemsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideTextItems", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesSlideTextItems", "folder");
            initialize("getSlidesSlideTextItems", "folder", valueFolder);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesSlideTextItems", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlideTextItemsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlidesSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlidesSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlideTextItems", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesSlideTextItems", "storage");
            initialize("getSlidesSlideTextItems", "storage", valueStorage);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesSlideTextItems", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesSlideTextItems");
        }
    }
    
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidesListTest() throws ApiException, Exception {
        initialize("getSlidesSlidesList", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "getSlidesSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlidesList", "storage");
        response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidesListInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlidesList", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesSlidesList", "name");
            initialize("getSlidesSlidesList", "name", valueName);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesSlidesList", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesSlidesList");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidesListInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlidesList", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesSlidesList", "password");
            initialize("getSlidesSlidesList", "password", valuePassword);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesSlidesList", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesSlidesList");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidesListInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlidesList", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesSlidesList", "folder");
            initialize("getSlidesSlidesList", "folder", valueFolder);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesSlidesList", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesSlidesList");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesSlidesListInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesSlidesList", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesSlidesList", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesSlidesList", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesSlidesList", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesSlidesList", "storage");
            initialize("getSlidesSlidesList", "storage", valueStorage);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesSlidesList", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesSlidesList");
        }
    }
    
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeTest() throws ApiException, Exception {
        initialize("getSlidesTheme", null, null);
        Theme response = null;
        String valueName = (String)getTestValue("String", "getSlidesTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesTheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesTheme", "storage");
        response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesTheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesTheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesTheme", "name");
            initialize("getSlidesTheme", "name", valueName);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesTheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesTheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesTheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesTheme", "slideIndex");
            initialize("getSlidesTheme", "slideIndex", valueSlideIndex);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesTheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesTheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesTheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesTheme", "password");
            initialize("getSlidesTheme", "password", valuePassword);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesTheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesTheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesTheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesTheme", "folder");
            initialize("getSlidesTheme", "folder", valueFolder);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesTheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesTheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesTheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesTheme", "storage");
            initialize("getSlidesTheme", "storage", valueStorage);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesTheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesTheme");
        }
    }
    
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeColorSchemeTest() throws ApiException, Exception {
        initialize("getSlidesThemeColorScheme", null, null);
        ColorScheme response = null;
        String valueName = (String)getTestValue("String", "getSlidesThemeColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeColorScheme", "storage");
        response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeColorSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeColorScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesThemeColorScheme", "name");
            initialize("getSlidesThemeColorScheme", "name", valueName);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesThemeColorScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesThemeColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeColorSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeColorScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesThemeColorScheme", "slideIndex");
            initialize("getSlidesThemeColorScheme", "slideIndex", valueSlideIndex);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesThemeColorScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesThemeColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeColorSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeColorScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesThemeColorScheme", "password");
            initialize("getSlidesThemeColorScheme", "password", valuePassword);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesThemeColorScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesThemeColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeColorSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeColorScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesThemeColorScheme", "folder");
            initialize("getSlidesThemeColorScheme", "folder", valueFolder);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesThemeColorScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesThemeColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeColorSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeColorScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesThemeColorScheme", "storage");
            initialize("getSlidesThemeColorScheme", "storage", valueStorage);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesThemeColorScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesThemeColorScheme");
        }
    }
    
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFontSchemeTest() throws ApiException, Exception {
        initialize("getSlidesThemeFontScheme", null, null);
        FontScheme response = null;
        String valueName = (String)getTestValue("String", "getSlidesThemeFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFontScheme", "storage");
        response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFontSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFontScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesThemeFontScheme", "name");
            initialize("getSlidesThemeFontScheme", "name", valueName);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesThemeFontScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesThemeFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFontSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFontScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesThemeFontScheme", "slideIndex");
            initialize("getSlidesThemeFontScheme", "slideIndex", valueSlideIndex);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesThemeFontScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesThemeFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFontSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFontScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesThemeFontScheme", "password");
            initialize("getSlidesThemeFontScheme", "password", valuePassword);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesThemeFontScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesThemeFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFontSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFontScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesThemeFontScheme", "folder");
            initialize("getSlidesThemeFontScheme", "folder", valueFolder);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesThemeFontScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesThemeFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFontSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFontScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesThemeFontScheme", "storage");
            initialize("getSlidesThemeFontScheme", "storage", valueStorage);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesThemeFontScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesThemeFontScheme");
        }
    }
    
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFormatSchemeTest() throws ApiException, Exception {
        initialize("getSlidesThemeFormatScheme", null, null);
        FormatScheme response = null;
        String valueName = (String)getTestValue("String", "getSlidesThemeFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFormatScheme", "storage");
        response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFormatSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFormatScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesThemeFormatScheme", "name");
            initialize("getSlidesThemeFormatScheme", "name", valueName);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesThemeFormatScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesThemeFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFormatSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFormatScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlidesThemeFormatScheme", "slideIndex");
            initialize("getSlidesThemeFormatScheme", "slideIndex", valueSlideIndex);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlidesThemeFormatScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlidesThemeFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFormatSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFormatScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesThemeFormatScheme", "password");
            initialize("getSlidesThemeFormatScheme", "password", valuePassword);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesThemeFormatScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesThemeFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFormatSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFormatScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesThemeFormatScheme", "folder");
            initialize("getSlidesThemeFormatScheme", "folder", valueFolder);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesThemeFormatScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesThemeFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesThemeFormatSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesThemeFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlidesThemeFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlidesThemeFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesThemeFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesThemeFormatScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesThemeFormatScheme", "storage");
            initialize("getSlidesThemeFormatScheme", "storage", valueStorage);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesThemeFormatScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesThemeFormatScheme");
        }
    }
    
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesViewPropertiesTest() throws ApiException, Exception {
        initialize("getSlidesViewProperties", null, null);
        ViewProperties response = null;
        String valueName = (String)getTestValue("String", "getSlidesViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesViewProperties", "storage");
        response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesViewPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesViewProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlidesViewProperties", "name");
            initialize("getSlidesViewProperties", "name", valueName);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlidesViewProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlidesViewProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesViewPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesViewProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlidesViewProperties", "password");
            initialize("getSlidesViewProperties", "password", valuePassword);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlidesViewProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlidesViewProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesViewPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesViewProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlidesViewProperties", "folder");
            initialize("getSlidesViewProperties", "folder", valueFolder);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlidesViewProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlidesViewProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesViewPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlidesViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlidesViewProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlidesViewProperties", "storage");
            initialize("getSlidesViewProperties", "storage", valueStorage);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlidesViewProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlidesViewProperties");
        }
    }
    
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionTest() throws ApiException, Exception {
        initialize("getSubshapeParagraphPortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshapeParagraphPortion", "name");
            initialize("getSubshapeParagraphPortion", "name", valueName);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshapeParagraphPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshapeParagraphPortion", "slideIndex");
            initialize("getSubshapeParagraphPortion", "slideIndex", valueSlideIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshapeParagraphPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshapeParagraphPortion", "path");
            initialize("getSubshapeParagraphPortion", "path", valuePath);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshapeParagraphPortion", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSubshapeParagraphPortion", "shapeIndex");
            initialize("getSubshapeParagraphPortion", "shapeIndex", valueShapeIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSubshapeParagraphPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSubshapeParagraphPortion", "paragraphIndex");
            initialize("getSubshapeParagraphPortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getSubshapeParagraphPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getSubshapeParagraphPortion", "portionIndex");
            initialize("getSubshapeParagraphPortion", "portionIndex", valuePortionIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "getSubshapeParagraphPortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshapeParagraphPortion", "password");
            initialize("getSubshapeParagraphPortion", "password", valuePassword);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshapeParagraphPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshapeParagraphPortion", "folder");
            initialize("getSubshapeParagraphPortion", "folder", valueFolder);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshapeParagraphPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshapeParagraphPortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshapeParagraphPortion", "storage");
            initialize("getSubshapeParagraphPortion", "storage", valueStorage);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshapeParagraphPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshapeParagraphPortion");
        }
    }
    
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsTest() throws ApiException, Exception {
        initialize("getSubshapeParagraphPortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshapeParagraphPortions", "name");
            initialize("getSubshapeParagraphPortions", "name", valueName);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshapeParagraphPortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshapeParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshapeParagraphPortions", "slideIndex");
            initialize("getSubshapeParagraphPortions", "slideIndex", valueSlideIndex);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshapeParagraphPortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshapeParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshapeParagraphPortions", "path");
            initialize("getSubshapeParagraphPortions", "path", valuePath);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshapeParagraphPortions", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshapeParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSubshapeParagraphPortions", "shapeIndex");
            initialize("getSubshapeParagraphPortions", "shapeIndex", valueShapeIndex);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSubshapeParagraphPortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSubshapeParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSubshapeParagraphPortions", "paragraphIndex");
            initialize("getSubshapeParagraphPortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getSubshapeParagraphPortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getSubshapeParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshapeParagraphPortions", "password");
            initialize("getSubshapeParagraphPortions", "password", valuePassword);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshapeParagraphPortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshapeParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshapeParagraphPortions", "folder");
            initialize("getSubshapeParagraphPortions", "folder", valueFolder);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshapeParagraphPortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshapeParagraphPortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphPortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphPortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphPortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphPortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshapeParagraphPortions", "storage");
            initialize("getSubshapeParagraphPortions", "storage", valueStorage);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshapeParagraphPortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshapeParagraphPortions");
        }
    }
    
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileTest() throws ApiException, Exception {
        initialize("moveFile", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
    }

    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "moveFile", "srcPath");
            initialize("moveFile", "srcPath", valueSrcPath);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "moveFile", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "moveFile", "destPath");
            initialize("moveFile", "destPath", valueDestPath);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "moveFile", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "moveFile", "srcStorageName");
            initialize("moveFile", "srcStorageName", valueSrcStorageName);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "moveFile", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "moveFile", "destStorageName");
            initialize("moveFile", "destStorageName", valueDestStorageName);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "moveFile", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "moveFile", "versionId");
            initialize("moveFile", "versionId", valueVersionId);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "moveFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "moveFile");
        }
    }
    
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderTest() throws ApiException, Exception {
        initialize("moveFolder", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
    }

    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "moveFolder", "srcPath");
            initialize("moveFolder", "srcPath", valueSrcPath);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "moveFolder", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "moveFolder", "destPath");
            initialize("moveFolder", "destPath", valueDestPath);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "moveFolder", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "moveFolder", "srcStorageName");
            initialize("moveFolder", "srcStorageName", valueSrcStorageName);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "moveFolder", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "moveFolder", "destStorageName");
            initialize("moveFolder", "destStorageName", valueDestStorageName);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "moveFolder", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "moveFolder");
        }
    }
    
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsTest() throws ApiException, Exception {
        initialize("objectExists", null, null);
        ObjectExist response = null;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        response = api.objectExists(valuePath, valueStorageName, valueVersionId);
        assertNotNull(response);
    }

    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "objectExists", "path");
            initialize("objectExists", "path", valuePath);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "objectExists", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "objectExists");
        }
    }
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "objectExists", "storageName");
            initialize("objectExists", "storageName", valueStorageName);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "objectExists", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "objectExists");
        }
    }
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "objectExists", "versionId");
            initialize("objectExists", "versionId", valueVersionId);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "objectExists", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "objectExists");
        }
    }
    
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphTest() throws ApiException, Exception {
        initialize("postAddNewParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAddNewParagraph", "name");
            initialize("postAddNewParagraph", "name", valueName);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAddNewParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAddNewParagraph", "slideIndex");
            initialize("postAddNewParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAddNewParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postAddNewParagraph", "shapeIndex");
            initialize("postAddNewParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postAddNewParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "postAddNewParagraph", "dto");
            initialize("postAddNewParagraph", "dto", valueDto);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postAddNewParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postAddNewParagraph", "position");
            initialize("postAddNewParagraph", "position", valuePosition);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postAddNewParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAddNewParagraph", "password");
            initialize("postAddNewParagraph", "password", valuePassword);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAddNewParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAddNewParagraph", "folder");
            initialize("postAddNewParagraph", "folder", valueFolder);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAddNewParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAddNewParagraph", "storage");
            initialize("postAddNewParagraph", "storage", valueStorage);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAddNewParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAddNewParagraph");
        }
    }
    
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionTest() throws ApiException, Exception {
        initialize("postAddNewPortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAddNewPortion", "name");
            initialize("postAddNewPortion", "name", valueName);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAddNewPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAddNewPortion", "slideIndex");
            initialize("postAddNewPortion", "slideIndex", valueSlideIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAddNewPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postAddNewPortion", "shapeIndex");
            initialize("postAddNewPortion", "shapeIndex", valueShapeIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postAddNewPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "postAddNewPortion", "paragraphIndex");
            initialize("postAddNewPortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "postAddNewPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "postAddNewPortion", "dto");
            initialize("postAddNewPortion", "dto", valueDto);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postAddNewPortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postAddNewPortion", "position");
            initialize("postAddNewPortion", "position", valuePosition);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postAddNewPortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAddNewPortion", "password");
            initialize("postAddNewPortion", "password", valuePassword);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAddNewPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAddNewPortion", "folder");
            initialize("postAddNewPortion", "folder", valueFolder);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAddNewPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewPortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAddNewPortion", "storage");
            initialize("postAddNewPortion", "storage", valueStorage);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAddNewPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAddNewPortion");
        }
    }
    
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeTest() throws ApiException, Exception {
        initialize("postAddNewShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAddNewShape", "name");
            initialize("postAddNewShape", "name", valueName);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAddNewShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAddNewShape", "slideIndex");
            initialize("postAddNewShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAddNewShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "postAddNewShape", "dto");
            initialize("postAddNewShape", "dto", valueDto);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postAddNewShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "postAddNewShape", "shapeToClone");
            initialize("postAddNewShape", "shapeToClone", valueShapeToClone);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeToClone", "postAddNewShape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("shapeToClone", "postAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postAddNewShape", "position");
            initialize("postAddNewShape", "position", valuePosition);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postAddNewShape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAddNewShape", "password");
            initialize("postAddNewShape", "password", valuePassword);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAddNewShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAddNewShape", "folder");
            initialize("postAddNewShape", "folder", valueFolder);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAddNewShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAddNewShape", "storage");
            initialize("postAddNewShape", "storage", valueStorage);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAddNewShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAddNewShape");
        }
    }
    
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeTest() throws ApiException, Exception {
        initialize("postAddNewSubshape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAddNewSubshape", "name");
            initialize("postAddNewSubshape", "name", valueName);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAddNewSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAddNewSubshape", "slideIndex");
            initialize("postAddNewSubshape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAddNewSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "postAddNewSubshape", "path");
            initialize("postAddNewSubshape", "path", valuePath);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "postAddNewSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "postAddNewSubshape", "dto");
            initialize("postAddNewSubshape", "dto", valueDto);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postAddNewSubshape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "postAddNewSubshape", "shapeToClone");
            initialize("postAddNewSubshape", "shapeToClone", valueShapeToClone);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeToClone", "postAddNewSubshape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("shapeToClone", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postAddNewSubshape", "position");
            initialize("postAddNewSubshape", "position", valuePosition);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postAddNewSubshape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAddNewSubshape", "password");
            initialize("postAddNewSubshape", "password", valuePassword);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAddNewSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAddNewSubshape", "folder");
            initialize("postAddNewSubshape", "folder", valueFolder);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAddNewSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAddNewSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postAddNewSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postAddNewSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshape", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshape", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAddNewSubshape", "storage");
            initialize("postAddNewSubshape", "storage", valueStorage);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAddNewSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAddNewSubshape");
        }
    }
    
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphTest() throws ApiException, Exception {
        initialize("postAddNewSubshapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAddNewSubshapeParagraph", "name");
            initialize("postAddNewSubshapeParagraph", "name", valueName);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAddNewSubshapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAddNewSubshapeParagraph", "slideIndex");
            initialize("postAddNewSubshapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAddNewSubshapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "postAddNewSubshapeParagraph", "path");
            initialize("postAddNewSubshapeParagraph", "path", valuePath);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "postAddNewSubshapeParagraph", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postAddNewSubshapeParagraph", "shapeIndex");
            initialize("postAddNewSubshapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postAddNewSubshapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "postAddNewSubshapeParagraph", "dto");
            initialize("postAddNewSubshapeParagraph", "dto", valueDto);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postAddNewSubshapeParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postAddNewSubshapeParagraph", "position");
            initialize("postAddNewSubshapeParagraph", "position", valuePosition);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postAddNewSubshapeParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAddNewSubshapeParagraph", "password");
            initialize("postAddNewSubshapeParagraph", "password", valuePassword);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAddNewSubshapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAddNewSubshapeParagraph", "folder");
            initialize("postAddNewSubshapeParagraph", "folder", valueFolder);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAddNewSubshapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAddNewSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postAddNewSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAddNewSubshapeParagraph", "storage");
            initialize("postAddNewSubshapeParagraph", "storage", valueStorage);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAddNewSubshapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAddNewSubshapeParagraph");
        }
    }
    
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionTest() throws ApiException, Exception {
        initialize("postAddNewSubshapePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAddNewSubshapePortion", "name");
            initialize("postAddNewSubshapePortion", "name", valueName);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAddNewSubshapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAddNewSubshapePortion", "slideIndex");
            initialize("postAddNewSubshapePortion", "slideIndex", valueSlideIndex);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAddNewSubshapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "postAddNewSubshapePortion", "path");
            initialize("postAddNewSubshapePortion", "path", valuePath);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "postAddNewSubshapePortion", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postAddNewSubshapePortion", "shapeIndex");
            initialize("postAddNewSubshapePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postAddNewSubshapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "postAddNewSubshapePortion", "paragraphIndex");
            initialize("postAddNewSubshapePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "postAddNewSubshapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "postAddNewSubshapePortion", "dto");
            initialize("postAddNewSubshapePortion", "dto", valueDto);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postAddNewSubshapePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postAddNewSubshapePortion", "position");
            initialize("postAddNewSubshapePortion", "position", valuePosition);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postAddNewSubshapePortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAddNewSubshapePortion", "password");
            initialize("postAddNewSubshapePortion", "password", valuePassword);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAddNewSubshapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAddNewSubshapePortion", "folder");
            initialize("postAddNewSubshapePortion", "folder", valueFolder);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAddNewSubshapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAddNewSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNewSubshapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNewSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "postAddNewSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postAddNewSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postAddNewSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "postAddNewSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "postAddNewSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNewSubshapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAddNewSubshapePortion", "storage");
            initialize("postAddNewSubshapePortion", "storage", valueStorage);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAddNewSubshapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAddNewSubshapePortion");
        }
    }
    
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNotesSlideTest() throws ApiException, Exception {
        initialize("postAddNotesSlide", null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "postAddNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "postAddNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "postAddNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "postAddNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNotesSlide", "storage");
        response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "postAddNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "postAddNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "postAddNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAddNotesSlide", "name");
            initialize("postAddNotesSlide", "name", valueName);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAddNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAddNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "postAddNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "postAddNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "postAddNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAddNotesSlide", "slideIndex");
            initialize("postAddNotesSlide", "slideIndex", valueSlideIndex);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAddNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAddNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNotesSlideInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "postAddNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "postAddNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "postAddNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNotesSlide", "storage");
        try {
            valueDto = (NotesSlide)invalidizeTestValue("NotesSlide", valueDto, "postAddNotesSlide", "dto");
            initialize("postAddNotesSlide", "dto", valueDto);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postAddNotesSlide", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postAddNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "postAddNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "postAddNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "postAddNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAddNotesSlide", "password");
            initialize("postAddNotesSlide", "password", valuePassword);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAddNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAddNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "postAddNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "postAddNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "postAddNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAddNotesSlide", "folder");
            initialize("postAddNotesSlide", "folder", valueFolder);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAddNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAddNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAddNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAddNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAddNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "postAddNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "postAddNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "postAddNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "postAddNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAddNotesSlide", "storage");
            initialize("postAddNotesSlide", "storage", valueStorage);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAddNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAddNotesSlide");
        }
    }
    
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesTest() throws ApiException, Exception {
        initialize("postAlignShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postAlignShapes", "name");
            initialize("postAlignShapes", "name", valueName);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postAlignShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postAlignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postAlignShapes", "slideIndex");
            initialize("postAlignShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postAlignShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postAlignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidAlignmentTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valueAlignmentType = (ShapesAlignmentType)invalidizeTestValue("ShapesAlignmentType", valueAlignmentType, "postAlignShapes", "alignmentType");
            initialize("postAlignShapes", "alignmentType", valueAlignmentType);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "alignmentType", "postAlignShapes", valueAlignmentType);
        }
        if (needAssertResponse) {
            assertResponse("alignmentType", "postAlignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidAlignToSlideTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valueAlignToSlide = (Boolean)invalidizeTestValue("Boolean", valueAlignToSlide, "postAlignShapes", "alignToSlide");
            initialize("postAlignShapes", "alignToSlide", valueAlignToSlide);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "alignToSlide", "postAlignShapes", valueAlignToSlide);
        }
        if (needAssertResponse) {
            assertResponse("alignToSlide", "postAlignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "postAlignShapes", "shapes");
            initialize("postAlignShapes", "shapes", valueShapes);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "postAlignShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "postAlignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postAlignShapes", "password");
            initialize("postAlignShapes", "password", valuePassword);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postAlignShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postAlignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postAlignShapes", "folder");
            initialize("postAlignShapes", "folder", valueFolder);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postAlignShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postAlignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAlignShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postAlignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postAlignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "postAlignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "postAlignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "postAlignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "postAlignShapes", "password");
        String valueFolder = (String)getTestValue("String", "postAlignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "postAlignShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postAlignShapes", "storage");
            initialize("postAlignShapes", "storage", valueStorage);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postAlignShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postAlignShapes");
        }
    }
    
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryTest() throws ApiException, Exception {
        initialize("postChartCategory", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postChartCategory", "name");
            initialize("postChartCategory", "name", valueName);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postChartCategory", "slideIndex");
            initialize("postChartCategory", "slideIndex", valueSlideIndex);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postChartCategory", "shapeIndex");
            initialize("postChartCategory", "shapeIndex", valueShapeIndex);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryInvalidCategoryTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        try {
            valueCategory = (ChartCategory)invalidizeTestValue("ChartCategory", valueCategory, "postChartCategory", "category");
            initialize("postChartCategory", "category", valueCategory);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "category", "postChartCategory", valueCategory);
        }
        if (needAssertResponse) {
            assertResponse("category", "postChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postChartCategory", "password");
            initialize("postChartCategory", "password", valuePassword);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postChartCategory", "folder");
            initialize("postChartCategory", "folder", valueFolder);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "postChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "postChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "postChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "postChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postChartCategory", "storage");
            initialize("postChartCategory", "storage", valueStorage);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postChartCategory");
        }
    }
    
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointTest() throws ApiException, Exception {
        initialize("postChartDataPoint", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postChartDataPoint", "name");
            initialize("postChartDataPoint", "name", valueName);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postChartDataPoint", "slideIndex");
            initialize("postChartDataPoint", "slideIndex", valueSlideIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postChartDataPoint", "shapeIndex");
            initialize("postChartDataPoint", "shapeIndex", valueShapeIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "postChartDataPoint", "seriesIndex");
            initialize("postChartDataPoint", "seriesIndex", valueSeriesIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "postChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "postChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidDataPointTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valueDataPoint = (DataPoint)invalidizeTestValue("DataPoint", valueDataPoint, "postChartDataPoint", "dataPoint");
            initialize("postChartDataPoint", "dataPoint", valueDataPoint);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dataPoint", "postChartDataPoint", valueDataPoint);
        }
        if (needAssertResponse) {
            assertResponse("dataPoint", "postChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postChartDataPoint", "password");
            initialize("postChartDataPoint", "password", valuePassword);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postChartDataPoint", "folder");
            initialize("postChartDataPoint", "folder", valueFolder);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "postChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "postChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "postChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "postChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "postChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postChartDataPoint", "storage");
            initialize("postChartDataPoint", "storage", valueStorage);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postChartDataPoint");
        }
    }
    
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesTest() throws ApiException, Exception {
        initialize("postChartSeries", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postChartSeries", "name");
            initialize("postChartSeries", "name", valueName);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postChartSeries", "slideIndex");
            initialize("postChartSeries", "slideIndex", valueSlideIndex);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postChartSeries", "shapeIndex");
            initialize("postChartSeries", "shapeIndex", valueShapeIndex);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesInvalidSeriesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        try {
            valueSeries = (Series)invalidizeTestValue("Series", valueSeries, "postChartSeries", "series");
            initialize("postChartSeries", "series", valueSeries);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "series", "postChartSeries", valueSeries);
        }
        if (needAssertResponse) {
            assertResponse("series", "postChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postChartSeries", "password");
            initialize("postChartSeries", "password", valuePassword);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postChartSeries", "folder");
            initialize("postChartSeries", "folder", valueFolder);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "postChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "postChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "postChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "postChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postChartSeries", "storage");
            initialize("postChartSeries", "storage", valueStorage);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postChartSeries");
        }
    }
    
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationTest() throws ApiException, Exception {
        initialize("postCopyLayoutSlideFromSourcePresentation", null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postCopyLayoutSlideFromSourcePresentation", "name");
            initialize("postCopyLayoutSlideFromSourcePresentation", "name", valueName);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postCopyLayoutSlideFromSourcePresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidCloneFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valueCloneFrom = (String)invalidizeTestValue("String", valueCloneFrom, "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
            initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFrom", valueCloneFrom);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFrom", "postCopyLayoutSlideFromSourcePresentation", valueCloneFrom);
        }
        if (needAssertResponse) {
            assertResponse("cloneFrom", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidCloneFromPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valueCloneFromPosition = (Integer)invalidizeTestValue("Integer", valueCloneFromPosition, "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
            initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition", valueCloneFromPosition);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPosition", "postCopyLayoutSlideFromSourcePresentation", valueCloneFromPosition);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPosition", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidCloneFromPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valueCloneFromPassword = (String)invalidizeTestValue("String", valueCloneFromPassword, "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
            initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword", valueCloneFromPassword);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPassword", "postCopyLayoutSlideFromSourcePresentation", valueCloneFromPassword);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPassword", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidCloneFromStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valueCloneFromStorage = (String)invalidizeTestValue("String", valueCloneFromStorage, "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
            initialize("postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage", valueCloneFromStorage);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromStorage", "postCopyLayoutSlideFromSourcePresentation", valueCloneFromStorage);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromStorage", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postCopyLayoutSlideFromSourcePresentation", "password");
            initialize("postCopyLayoutSlideFromSourcePresentation", "password", valuePassword);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postCopyLayoutSlideFromSourcePresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postCopyLayoutSlideFromSourcePresentation", "folder");
            initialize("postCopyLayoutSlideFromSourcePresentation", "folder", valueFolder);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postCopyLayoutSlideFromSourcePresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyLayoutSlideFromSourcePresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyLayoutSlideFromSourcePresentation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postCopyLayoutSlideFromSourcePresentation", "storage");
            initialize("postCopyLayoutSlideFromSourcePresentation", "storage", valueStorage);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postCopyLayoutSlideFromSourcePresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postCopyLayoutSlideFromSourcePresentation");
        }
    }
    
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationTest() throws ApiException, Exception {
        initialize("postCopyMasterSlideFromSourcePresentation", null, null);
        MasterSlide response = null;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postCopyMasterSlideFromSourcePresentation", "name");
            initialize("postCopyMasterSlideFromSourcePresentation", "name", valueName);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postCopyMasterSlideFromSourcePresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidCloneFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueCloneFrom = (String)invalidizeTestValue("String", valueCloneFrom, "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
            initialize("postCopyMasterSlideFromSourcePresentation", "cloneFrom", valueCloneFrom);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFrom", "postCopyMasterSlideFromSourcePresentation", valueCloneFrom);
        }
        if (needAssertResponse) {
            assertResponse("cloneFrom", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidCloneFromPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueCloneFromPosition = (Integer)invalidizeTestValue("Integer", valueCloneFromPosition, "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
            initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPosition", valueCloneFromPosition);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPosition", "postCopyMasterSlideFromSourcePresentation", valueCloneFromPosition);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPosition", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidCloneFromPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueCloneFromPassword = (String)invalidizeTestValue("String", valueCloneFromPassword, "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
            initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromPassword", valueCloneFromPassword);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPassword", "postCopyMasterSlideFromSourcePresentation", valueCloneFromPassword);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPassword", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidCloneFromStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueCloneFromStorage = (String)invalidizeTestValue("String", valueCloneFromStorage, "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
            initialize("postCopyMasterSlideFromSourcePresentation", "cloneFromStorage", valueCloneFromStorage);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromStorage", "postCopyMasterSlideFromSourcePresentation", valueCloneFromStorage);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromStorage", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidApplyToAllTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueApplyToAll = (Boolean)invalidizeTestValue("Boolean", valueApplyToAll, "postCopyMasterSlideFromSourcePresentation", "applyToAll");
            initialize("postCopyMasterSlideFromSourcePresentation", "applyToAll", valueApplyToAll);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "applyToAll", "postCopyMasterSlideFromSourcePresentation", valueApplyToAll);
        }
        if (needAssertResponse) {
            assertResponse("applyToAll", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postCopyMasterSlideFromSourcePresentation", "password");
            initialize("postCopyMasterSlideFromSourcePresentation", "password", valuePassword);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postCopyMasterSlideFromSourcePresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postCopyMasterSlideFromSourcePresentation", "folder");
            initialize("postCopyMasterSlideFromSourcePresentation", "folder", valueFolder);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postCopyMasterSlideFromSourcePresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCopyMasterSlideFromSourcePresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "name");
        String valueCloneFrom = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "postCopyMasterSlideFromSourcePresentation", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "postCopyMasterSlideFromSourcePresentation", "applyToAll");
        String valuePassword = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "password");
        String valueFolder = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "postCopyMasterSlideFromSourcePresentation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postCopyMasterSlideFromSourcePresentation", "storage");
            initialize("postCopyMasterSlideFromSourcePresentation", "storage", valueStorage);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postCopyMasterSlideFromSourcePresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postCopyMasterSlideFromSourcePresentation");
        }
    }
    
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithDefaultFormatTest() throws ApiException, Exception {
        initialize("postExportImageWithDefaultFormat", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithDefaultFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "postExportImageWithDefaultFormat", "password");
        response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithDefaultFormatInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithDefaultFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "postExportImageWithDefaultFormat", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postExportImageWithDefaultFormat", "document");
            initialize("postExportImageWithDefaultFormat", "document", valueDocument);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postExportImageWithDefaultFormat", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postExportImageWithDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithDefaultFormatInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithDefaultFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "postExportImageWithDefaultFormat", "password");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "postExportImageWithDefaultFormat", "index");
            initialize("postExportImageWithDefaultFormat", "index", valueIndex);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "postExportImageWithDefaultFormat", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "postExportImageWithDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithDefaultFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "postExportImageWithDefaultFormat", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postExportImageWithDefaultFormat", "password");
            initialize("postExportImageWithDefaultFormat", "password", valuePassword);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postExportImageWithDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postExportImageWithDefaultFormat");
        }
    }
    
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithFormatTest() throws ApiException, Exception {
        initialize("postExportImageWithFormat", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImageWithFormat", "password");
        response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithFormatInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImageWithFormat", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postExportImageWithFormat", "document");
            initialize("postExportImageWithFormat", "document", valueDocument);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postExportImageWithFormat", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postExportImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithFormatInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImageWithFormat", "password");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "postExportImageWithFormat", "index");
            initialize("postExportImageWithFormat", "index", valueIndex);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "postExportImageWithFormat", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "postExportImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithFormatInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImageWithFormat", "password");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "postExportImageWithFormat", "format");
            initialize("postExportImageWithFormat", "format", valueFormat);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postExportImageWithFormat", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postExportImageWithFormat");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImageWithFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImageWithFormat", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "postExportImageWithFormat", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImageWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImageWithFormat", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postExportImageWithFormat", "password");
            initialize("postExportImageWithFormat", "password", valuePassword);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postExportImageWithFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postExportImageWithFormat");
        }
    }
    
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesFromRequestWithFormatTest() throws ApiException, Exception {
        initialize("postExportImagesFromRequestWithFormat", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImagesFromRequestWithFormat", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesFromRequestWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesFromRequestWithFormat", "password");
        response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesFromRequestWithFormatInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImagesFromRequestWithFormat", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesFromRequestWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesFromRequestWithFormat", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postExportImagesFromRequestWithFormat", "document");
            initialize("postExportImagesFromRequestWithFormat", "document", valueDocument);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postExportImagesFromRequestWithFormat", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postExportImagesFromRequestWithFormat");
        }
    }
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesFromRequestWithFormatInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImagesFromRequestWithFormat", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesFromRequestWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesFromRequestWithFormat", "password");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "postExportImagesFromRequestWithFormat", "format");
            initialize("postExportImagesFromRequestWithFormat", "format", valueFormat);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postExportImagesFromRequestWithFormat", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postExportImagesFromRequestWithFormat");
        }
    }
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesFromRequestWithFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportImagesFromRequestWithFormat", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesFromRequestWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesFromRequestWithFormat", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postExportImagesFromRequestWithFormat", "password");
            initialize("postExportImagesFromRequestWithFormat", "password", valuePassword);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postExportImagesFromRequestWithFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postExportImagesFromRequestWithFormat");
        }
    }
    
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithDefaultFormatTest() throws ApiException, Exception {
        initialize("postExportImagesWithDefaultFormat", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "storage");
        response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithDefaultFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postExportImagesWithDefaultFormat", "name");
            initialize("postExportImagesWithDefaultFormat", "name", valueName);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postExportImagesWithDefaultFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postExportImagesWithDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postExportImagesWithDefaultFormat", "password");
            initialize("postExportImagesWithDefaultFormat", "password", valuePassword);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postExportImagesWithDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postExportImagesWithDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithDefaultFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postExportImagesWithDefaultFormat", "folder");
            initialize("postExportImagesWithDefaultFormat", "folder", valueFolder);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postExportImagesWithDefaultFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postExportImagesWithDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithDefaultFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithDefaultFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postExportImagesWithDefaultFormat", "storage");
            initialize("postExportImagesWithDefaultFormat", "storage", valueStorage);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postExportImagesWithDefaultFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postExportImagesWithDefaultFormat");
        }
    }
    
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithFormatTest() throws ApiException, Exception {
        initialize("postExportImagesWithFormat", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "postExportImagesWithFormat", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithFormat", "storage");
        response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithFormat", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postExportImagesWithFormat", "name");
            initialize("postExportImagesWithFormat", "name", valueName);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postExportImagesWithFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postExportImagesWithFormat");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithFormatInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithFormat", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithFormat", "storage");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "postExportImagesWithFormat", "format");
            initialize("postExportImagesWithFormat", "format", valueFormat);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postExportImagesWithFormat", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postExportImagesWithFormat");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithFormat", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postExportImagesWithFormat", "password");
            initialize("postExportImagesWithFormat", "password", valuePassword);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postExportImagesWithFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postExportImagesWithFormat");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithFormat", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postExportImagesWithFormat", "folder");
            initialize("postExportImagesWithFormat", "folder", valueFolder);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postExportImagesWithFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postExportImagesWithFormat");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportImagesWithFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postExportImagesWithFormat", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "postExportImagesWithFormat", "format");
        String valuePassword = (String)getTestValue("String", "postExportImagesWithFormat", "password");
        String valueFolder = (String)getTestValue("String", "postExportImagesWithFormat", "folder");
        String valueStorage = (String)getTestValue("String", "postExportImagesWithFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postExportImagesWithFormat", "storage");
            initialize("postExportImagesWithFormat", "storage", valueStorage);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postExportImagesWithFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postExportImagesWithFormat");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeTest() throws ApiException, Exception {
        initialize("postExportShape", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postExportShape", "document");
            initialize("postExportShape", "document", valueDocument);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postExportShape", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postExportShape", "slideIndex");
            initialize("postExportShape", "slideIndex", valueSlideIndex);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postExportShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postExportShape", "shapeIndex");
            initialize("postExportShape", "shapeIndex", valueShapeIndex);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postExportShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "postExportShape", "format");
            initialize("postExportShape", "format", valueFormat);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postExportShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postExportShape", "password");
            initialize("postExportShape", "password", valuePassword);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postExportShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postExportShape", "storage");
            initialize("postExportShape", "storage", valueStorage);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postExportShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "postExportShape", "scaleX");
            initialize("postExportShape", "scaleX", valueScaleX);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "postExportShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "postExportShape", "scaleY");
            initialize("postExportShape", "scaleY", valueScaleY);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "postExportShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "postExportShape", "bounds");
            initialize("postExportShape", "bounds", valueBounds);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "postExportShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "postExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postExportShape", "format");
        String valuePassword = (String)getTestValue("String", "postExportShape", "password");
        String valueStorage = (String)getTestValue("String", "postExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "postExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "postExportShape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postExportShape", "fontsFolder");
            initialize("postExportShape", "fontsFolder", valueFontsFolder);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postExportShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postExportShape");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideTest() throws ApiException, Exception {
        initialize("postExportSlide", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postExportSlide", "document");
            initialize("postExportSlide", "document", valueDocument);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postExportSlide", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postExportSlide", "slideIndex");
            initialize("postExportSlide", "slideIndex", valueSlideIndex);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postExportSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "postExportSlide", "format");
            initialize("postExportSlide", "format", valueFormat);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postExportSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "postExportSlide", "width");
            initialize("postExportSlide", "width", valueWidth);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "postExportSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "postExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "postExportSlide", "height");
            initialize("postExportSlide", "height", valueHeight);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "postExportSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "postExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postExportSlide", "password");
            initialize("postExportSlide", "password", valuePassword);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postExportSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postExportSlide", "storage");
            initialize("postExportSlide", "storage", valueStorage);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postExportSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postExportSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postExportSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "postExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "postExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postExportSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postExportSlide", "fontsFolder");
            initialize("postExportSlide", "fontsFolder", valueFontsFolder);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postExportSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postExportSlide");
        }
    }
    
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideTest() throws ApiException, Exception {
        initialize("postGetNotesSlide", null, null);
        NotesSlide response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlide", "password");
        response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
        assertNotNull(response);
    }

    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlide", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postGetNotesSlide", "document");
            initialize("postGetNotesSlide", "document", valueDocument);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postGetNotesSlide", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postGetNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlide", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postGetNotesSlide", "slideIndex");
            initialize("postGetNotesSlide", "slideIndex", valueSlideIndex);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postGetNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postGetNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlide", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postGetNotesSlide", "password");
            initialize("postGetNotesSlide", "password", valuePassword);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postGetNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postGetNotesSlide");
        }
    }
    
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideExistsTest() throws ApiException, Exception {
        initialize("postGetNotesSlideExists", null, null);
        EntityExists response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideExists", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideExists", "password");
        response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
        assertNotNull(response);
    }

    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideExistsInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideExists", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideExists", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postGetNotesSlideExists", "document");
            initialize("postGetNotesSlideExists", "document", valueDocument);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postGetNotesSlideExists", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postGetNotesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideExistsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideExists", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideExists", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postGetNotesSlideExists", "slideIndex");
            initialize("postGetNotesSlideExists", "slideIndex", valueSlideIndex);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postGetNotesSlideExists", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postGetNotesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideExistsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideExists", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideExists", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postGetNotesSlideExists", "password");
            initialize("postGetNotesSlideExists", "password", valuePassword);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postGetNotesSlideExists", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postGetNotesSlideExists");
        }
    }
    
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatTest() throws ApiException, Exception {
        initialize("postGetNotesSlideWithFormat", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postGetNotesSlideWithFormat", "document");
            initialize("postGetNotesSlideWithFormat", "document", valueDocument);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postGetNotesSlideWithFormat", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postGetNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postGetNotesSlideWithFormat", "slideIndex");
            initialize("postGetNotesSlideWithFormat", "slideIndex", valueSlideIndex);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postGetNotesSlideWithFormat", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postGetNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        try {
            valueFormat = (NotesSlideExportFormat)invalidizeTestValue("NotesSlideExportFormat", valueFormat, "postGetNotesSlideWithFormat", "format");
            initialize("postGetNotesSlideWithFormat", "format", valueFormat);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postGetNotesSlideWithFormat", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postGetNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "postGetNotesSlideWithFormat", "width");
            initialize("postGetNotesSlideWithFormat", "width", valueWidth);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "postGetNotesSlideWithFormat", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "postGetNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "postGetNotesSlideWithFormat", "height");
            initialize("postGetNotesSlideWithFormat", "height", valueHeight);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "postGetNotesSlideWithFormat", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "postGetNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postGetNotesSlideWithFormat", "password");
            initialize("postGetNotesSlideWithFormat", "password", valuePassword);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postGetNotesSlideWithFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postGetNotesSlideWithFormat");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGetNotesSlideWithFormatInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postGetNotesSlideWithFormat", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "postGetNotesSlideWithFormat", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postGetNotesSlideWithFormat", "height");
        String valuePassword = (String)getTestValue("String", "postGetNotesSlideWithFormat", "password");
        String valueFontsFolder = (String)getTestValue("String", "postGetNotesSlideWithFormat", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postGetNotesSlideWithFormat", "fontsFolder");
            initialize("postGetNotesSlideWithFormat", "fontsFolder", valueFontsFolder);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postGetNotesSlideWithFormat", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postGetNotesSlideWithFormat");
        }
    }
    
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postImagesFromRequestWithDefaultFormatTest() throws ApiException, Exception {
        initialize("postImagesFromRequestWithDefaultFormat", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postImagesFromRequestWithDefaultFormat", "document");
        String valuePassword = (String)getTestValue("String", "postImagesFromRequestWithDefaultFormat", "password");
        response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postImagesFromRequestWithDefaultFormatInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postImagesFromRequestWithDefaultFormat", "document");
        String valuePassword = (String)getTestValue("String", "postImagesFromRequestWithDefaultFormat", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postImagesFromRequestWithDefaultFormat", "document");
            initialize("postImagesFromRequestWithDefaultFormat", "document", valueDocument);
            File response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postImagesFromRequestWithDefaultFormat", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postImagesFromRequestWithDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postImagesFromRequestWithDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postImagesFromRequestWithDefaultFormat", "document");
        String valuePassword = (String)getTestValue("String", "postImagesFromRequestWithDefaultFormat", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postImagesFromRequestWithDefaultFormat", "password");
            initialize("postImagesFromRequestWithDefaultFormat", "password", valuePassword);
            File response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postImagesFromRequestWithDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postImagesFromRequestWithDefaultFormat");
        }
    }
    
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphTest() throws ApiException, Exception {
        initialize("postNotesSlideAddNewParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postNotesSlideAddNewParagraph", "name");
            initialize("postNotesSlideAddNewParagraph", "name", valueName);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postNotesSlideAddNewParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postNotesSlideAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postNotesSlideAddNewParagraph", "slideIndex");
            initialize("postNotesSlideAddNewParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postNotesSlideAddNewParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postNotesSlideAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postNotesSlideAddNewParagraph", "shapeIndex");
            initialize("postNotesSlideAddNewParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postNotesSlideAddNewParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postNotesSlideAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "postNotesSlideAddNewParagraph", "dto");
            initialize("postNotesSlideAddNewParagraph", "dto", valueDto);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postNotesSlideAddNewParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postNotesSlideAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postNotesSlideAddNewParagraph", "position");
            initialize("postNotesSlideAddNewParagraph", "position", valuePosition);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postNotesSlideAddNewParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postNotesSlideAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postNotesSlideAddNewParagraph", "password");
            initialize("postNotesSlideAddNewParagraph", "password", valuePassword);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postNotesSlideAddNewParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postNotesSlideAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postNotesSlideAddNewParagraph", "folder");
            initialize("postNotesSlideAddNewParagraph", "folder", valueFolder);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postNotesSlideAddNewParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postNotesSlideAddNewParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "postNotesSlideAddNewParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewParagraph", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postNotesSlideAddNewParagraph", "storage");
            initialize("postNotesSlideAddNewParagraph", "storage", valueStorage);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postNotesSlideAddNewParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postNotesSlideAddNewParagraph");
        }
    }
    
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionTest() throws ApiException, Exception {
        initialize("postNotesSlideAddNewPortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postNotesSlideAddNewPortion", "name");
            initialize("postNotesSlideAddNewPortion", "name", valueName);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postNotesSlideAddNewPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postNotesSlideAddNewPortion", "slideIndex");
            initialize("postNotesSlideAddNewPortion", "slideIndex", valueSlideIndex);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postNotesSlideAddNewPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postNotesSlideAddNewPortion", "shapeIndex");
            initialize("postNotesSlideAddNewPortion", "shapeIndex", valueShapeIndex);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postNotesSlideAddNewPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "postNotesSlideAddNewPortion", "paragraphIndex");
            initialize("postNotesSlideAddNewPortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "postNotesSlideAddNewPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "postNotesSlideAddNewPortion", "dto");
            initialize("postNotesSlideAddNewPortion", "dto", valueDto);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postNotesSlideAddNewPortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postNotesSlideAddNewPortion", "position");
            initialize("postNotesSlideAddNewPortion", "position", valuePosition);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postNotesSlideAddNewPortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postNotesSlideAddNewPortion", "password");
            initialize("postNotesSlideAddNewPortion", "password", valuePassword);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postNotesSlideAddNewPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postNotesSlideAddNewPortion", "folder");
            initialize("postNotesSlideAddNewPortion", "folder", valueFolder);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postNotesSlideAddNewPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postNotesSlideAddNewPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "postNotesSlideAddNewPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewPortion", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewPortion", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewPortion", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewPortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postNotesSlideAddNewPortion", "storage");
            initialize("postNotesSlideAddNewPortion", "storage", valueStorage);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postNotesSlideAddNewPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postNotesSlideAddNewPortion");
        }
    }
    
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeTest() throws ApiException, Exception {
        initialize("postNotesSlideAddNewShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postNotesSlideAddNewShape", "name");
            initialize("postNotesSlideAddNewShape", "name", valueName);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postNotesSlideAddNewShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postNotesSlideAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postNotesSlideAddNewShape", "slideIndex");
            initialize("postNotesSlideAddNewShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postNotesSlideAddNewShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postNotesSlideAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "postNotesSlideAddNewShape", "dto");
            initialize("postNotesSlideAddNewShape", "dto", valueDto);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "postNotesSlideAddNewShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "postNotesSlideAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "postNotesSlideAddNewShape", "shapeToClone");
            initialize("postNotesSlideAddNewShape", "shapeToClone", valueShapeToClone);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeToClone", "postNotesSlideAddNewShape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("shapeToClone", "postNotesSlideAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postNotesSlideAddNewShape", "position");
            initialize("postNotesSlideAddNewShape", "position", valuePosition);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postNotesSlideAddNewShape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postNotesSlideAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postNotesSlideAddNewShape", "password");
            initialize("postNotesSlideAddNewShape", "password", valuePassword);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postNotesSlideAddNewShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postNotesSlideAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postNotesSlideAddNewShape", "folder");
            initialize("postNotesSlideAddNewShape", "folder", valueFolder);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postNotesSlideAddNewShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postNotesSlideAddNewShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideAddNewShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideAddNewShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "postNotesSlideAddNewShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "postNotesSlideAddNewShape", "position");
        String valuePassword = (String)getTestValue("String", "postNotesSlideAddNewShape", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideAddNewShape", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideAddNewShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postNotesSlideAddNewShape", "storage");
            initialize("postNotesSlideAddNewShape", "storage", valueStorage);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postNotesSlideAddNewShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postNotesSlideAddNewShape");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsTest() throws ApiException, Exception {
        initialize("postNotesSlideShapeSaveAs", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postNotesSlideShapeSaveAs", "name");
            initialize("postNotesSlideShapeSaveAs", "name", valueName);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postNotesSlideShapeSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postNotesSlideShapeSaveAs", "slideIndex");
            initialize("postNotesSlideShapeSaveAs", "slideIndex", valueSlideIndex);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postNotesSlideShapeSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postNotesSlideShapeSaveAs", "shapeIndex");
            initialize("postNotesSlideShapeSaveAs", "shapeIndex", valueShapeIndex);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postNotesSlideShapeSaveAs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "postNotesSlideShapeSaveAs", "format");
            initialize("postNotesSlideShapeSaveAs", "format", valueFormat);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postNotesSlideShapeSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "postNotesSlideShapeSaveAs", "options");
            initialize("postNotesSlideShapeSaveAs", "options", valueOptions);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "postNotesSlideShapeSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "postNotesSlideShapeSaveAs", "scaleX");
            initialize("postNotesSlideShapeSaveAs", "scaleX", valueScaleX);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "postNotesSlideShapeSaveAs", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "postNotesSlideShapeSaveAs", "scaleY");
            initialize("postNotesSlideShapeSaveAs", "scaleY", valueScaleY);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "postNotesSlideShapeSaveAs", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "postNotesSlideShapeSaveAs", "bounds");
            initialize("postNotesSlideShapeSaveAs", "bounds", valueBounds);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "postNotesSlideShapeSaveAs", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postNotesSlideShapeSaveAs", "password");
            initialize("postNotesSlideShapeSaveAs", "password", valuePassword);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postNotesSlideShapeSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postNotesSlideShapeSaveAs", "folder");
            initialize("postNotesSlideShapeSaveAs", "folder", valueFolder);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postNotesSlideShapeSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postNotesSlideShapeSaveAs", "storage");
            initialize("postNotesSlideShapeSaveAs", "storage", valueStorage);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postNotesSlideShapeSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotesSlideShapeSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postNotesSlideShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postNotesSlideShapeSaveAs", "fontsFolder");
            initialize("postNotesSlideShapeSaveAs", "fontsFolder", valueFontsFolder);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postNotesSlideShapeSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postNotesSlideShapeSaveAs");
        }
    }
    
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationMergeTest() throws ApiException, Exception {
        initialize("postPresentationMerge", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "postPresentationMerge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "postPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "postPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "postPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "postPresentationMerge", "storage");
        response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationMergeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postPresentationMerge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "postPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "postPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "postPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "postPresentationMerge", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postPresentationMerge", "name");
            initialize("postPresentationMerge", "name", valueName);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postPresentationMerge", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationMergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postPresentationMerge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "postPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "postPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "postPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "postPresentationMerge", "storage");
        try {
            valueRequest = (PresentationsMergeRequest)invalidizeTestValue("PresentationsMergeRequest", valueRequest, "postPresentationMerge", "request");
            initialize("postPresentationMerge", "request", valueRequest);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "postPresentationMerge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "postPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationMergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postPresentationMerge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "postPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "postPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "postPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "postPresentationMerge", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postPresentationMerge", "password");
            initialize("postPresentationMerge", "password", valuePassword);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postPresentationMerge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationMergeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postPresentationMerge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "postPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "postPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "postPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "postPresentationMerge", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postPresentationMerge", "folder");
            initialize("postPresentationMerge", "folder", valueFolder);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postPresentationMerge", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationMergeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postPresentationMerge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "postPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "postPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "postPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "postPresentationMerge", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postPresentationMerge", "storage");
            initialize("postPresentationMerge", "storage", valueStorage);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postPresentationMerge", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postPresentationMerge");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationReplaceTextTest() throws ApiException, Exception {
        initialize("postPresentationReplaceText", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationReplaceText", "document");
        String valueOldValue = (String)getTestValue("String", "postPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postPresentationReplaceText", "password");
        response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationReplaceTextInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationReplaceText", "document");
        String valueOldValue = (String)getTestValue("String", "postPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postPresentationReplaceText", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postPresentationReplaceText", "document");
            initialize("postPresentationReplaceText", "document", valueDocument);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postPresentationReplaceText", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationReplaceTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationReplaceText", "document");
        String valueOldValue = (String)getTestValue("String", "postPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postPresentationReplaceText", "password");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "postPresentationReplaceText", "oldValue");
            initialize("postPresentationReplaceText", "oldValue", valueOldValue);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "postPresentationReplaceText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "postPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationReplaceTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationReplaceText", "document");
        String valueOldValue = (String)getTestValue("String", "postPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postPresentationReplaceText", "password");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "postPresentationReplaceText", "newValue");
            initialize("postPresentationReplaceText", "newValue", valueNewValue);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "postPresentationReplaceText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "postPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationReplaceTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationReplaceText", "document");
        String valueOldValue = (String)getTestValue("String", "postPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postPresentationReplaceText", "password");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "postPresentationReplaceText", "ignoreCase");
            initialize("postPresentationReplaceText", "ignoreCase", valueIgnoreCase);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "postPresentationReplaceText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "postPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationReplaceTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationReplaceText", "document");
        String valueOldValue = (String)getTestValue("String", "postPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postPresentationReplaceText", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postPresentationReplaceText", "password");
            initialize("postPresentationReplaceText", "password", valuePassword);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postPresentationReplaceText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postPresentationReplaceText");
        }
    }
    
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitTest() throws ApiException, Exception {
        initialize("postPresentationSplit", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postPresentationSplit", "document");
            initialize("postPresentationSplit", "document", valueDocument);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postPresentationSplit", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "postPresentationSplit", "format");
            initialize("postPresentationSplit", "format", valueFormat);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postPresentationSplit", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "postPresentationSplit", "width");
            initialize("postPresentationSplit", "width", valueWidth);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "postPresentationSplit", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "postPresentationSplit", "height");
            initialize("postPresentationSplit", "height", valueHeight);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "postPresentationSplit", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "postPresentationSplit", "from");
            initialize("postPresentationSplit", "from", valueFrom);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "from", "postPresentationSplit", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("from", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "postPresentationSplit", "to");
            initialize("postPresentationSplit", "to", valueTo);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "to", "postPresentationSplit", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("to", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postPresentationSplit", "password");
            initialize("postPresentationSplit", "password", valuePassword);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postPresentationSplit", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postPresentationSplit", "storage");
            initialize("postPresentationSplit", "storage", valueStorage);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postPresentationSplit", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPresentationSplitInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postPresentationSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "postPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "postPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postPresentationSplit", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postPresentationSplit", "fontsFolder");
            initialize("postPresentationSplit", "fontsFolder", valueFontsFolder);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postPresentationSplit", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postPresentationSplit");
        }
    }
    
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionTest() throws ApiException, Exception {
        initialize("postSection", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "postSection", "name");
        String valueSectionName = (String)getTestValue("String", "postSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postSection", "password");
        String valueFolder = (String)getTestValue("String", "postSection", "folder");
        String valueStorage = (String)getTestValue("String", "postSection", "storage");
        response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSection", "name");
        String valueSectionName = (String)getTestValue("String", "postSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postSection", "password");
        String valueFolder = (String)getTestValue("String", "postSection", "folder");
        String valueStorage = (String)getTestValue("String", "postSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSection", "name");
            initialize("postSection", "name", valueName);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionInvalidSectionNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSection", "name");
        String valueSectionName = (String)getTestValue("String", "postSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postSection", "password");
        String valueFolder = (String)getTestValue("String", "postSection", "folder");
        String valueStorage = (String)getTestValue("String", "postSection", "storage");
        try {
            valueSectionName = (String)invalidizeTestValue("String", valueSectionName, "postSection", "sectionName");
            initialize("postSection", "sectionName", valueSectionName);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionName", "postSection", valueSectionName);
        }
        if (needAssertResponse) {
            assertResponse("sectionName", "postSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSection", "name");
        String valueSectionName = (String)getTestValue("String", "postSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postSection", "password");
        String valueFolder = (String)getTestValue("String", "postSection", "folder");
        String valueStorage = (String)getTestValue("String", "postSection", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSection", "slideIndex");
            initialize("postSection", "slideIndex", valueSlideIndex);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSection", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSection", "name");
        String valueSectionName = (String)getTestValue("String", "postSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postSection", "password");
        String valueFolder = (String)getTestValue("String", "postSection", "folder");
        String valueStorage = (String)getTestValue("String", "postSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSection", "password");
            initialize("postSection", "password", valuePassword);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSection", "name");
        String valueSectionName = (String)getTestValue("String", "postSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postSection", "password");
        String valueFolder = (String)getTestValue("String", "postSection", "folder");
        String valueStorage = (String)getTestValue("String", "postSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSection", "folder");
            initialize("postSection", "folder", valueFolder);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSection", "name");
        String valueSectionName = (String)getTestValue("String", "postSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "postSection", "password");
        String valueFolder = (String)getTestValue("String", "postSection", "folder");
        String valueStorage = (String)getTestValue("String", "postSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSection", "storage");
            initialize("postSection", "storage", valueStorage);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSection");
        }
    }
    
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionMoveTest() throws ApiException, Exception {
        initialize("postSectionMove", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "postSectionMove", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "postSectionMove", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSectionMove", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSectionMove", "password");
        String valueFolder = (String)getTestValue("String", "postSectionMove", "folder");
        String valueStorage = (String)getTestValue("String", "postSectionMove", "storage");
        response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionMoveInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSectionMove", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "postSectionMove", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSectionMove", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSectionMove", "password");
        String valueFolder = (String)getTestValue("String", "postSectionMove", "folder");
        String valueStorage = (String)getTestValue("String", "postSectionMove", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSectionMove", "name");
            initialize("postSectionMove", "name", valueName);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSectionMove", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSectionMove");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionMoveInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSectionMove", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "postSectionMove", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSectionMove", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSectionMove", "password");
        String valueFolder = (String)getTestValue("String", "postSectionMove", "folder");
        String valueStorage = (String)getTestValue("String", "postSectionMove", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "postSectionMove", "sectionIndex");
            initialize("postSectionMove", "sectionIndex", valueSectionIndex);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionIndex", "postSectionMove", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("sectionIndex", "postSectionMove");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionMoveInvalidNewPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSectionMove", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "postSectionMove", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSectionMove", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSectionMove", "password");
        String valueFolder = (String)getTestValue("String", "postSectionMove", "folder");
        String valueStorage = (String)getTestValue("String", "postSectionMove", "storage");
        try {
            valueNewPosition = (Integer)invalidizeTestValue("Integer", valueNewPosition, "postSectionMove", "newPosition");
            initialize("postSectionMove", "newPosition", valueNewPosition);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newPosition", "postSectionMove", valueNewPosition);
        }
        if (needAssertResponse) {
            assertResponse("newPosition", "postSectionMove");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionMoveInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSectionMove", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "postSectionMove", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSectionMove", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSectionMove", "password");
        String valueFolder = (String)getTestValue("String", "postSectionMove", "folder");
        String valueStorage = (String)getTestValue("String", "postSectionMove", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSectionMove", "password");
            initialize("postSectionMove", "password", valuePassword);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSectionMove", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSectionMove");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionMoveInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSectionMove", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "postSectionMove", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSectionMove", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSectionMove", "password");
        String valueFolder = (String)getTestValue("String", "postSectionMove", "folder");
        String valueStorage = (String)getTestValue("String", "postSectionMove", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSectionMove", "folder");
            initialize("postSectionMove", "folder", valueFolder);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSectionMove", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSectionMove");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSectionMoveInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSectionMove", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "postSectionMove", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSectionMove", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSectionMove", "password");
        String valueFolder = (String)getTestValue("String", "postSectionMove", "folder");
        String valueStorage = (String)getTestValue("String", "postSectionMove", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSectionMove", "storage");
            initialize("postSectionMove", "storage", valueStorage);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSectionMove", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSectionMove");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsTest() throws ApiException, Exception {
        initialize("postShapeSaveAs", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postShapeSaveAs", "name");
            initialize("postShapeSaveAs", "name", valueName);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postShapeSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postShapeSaveAs", "slideIndex");
            initialize("postShapeSaveAs", "slideIndex", valueSlideIndex);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postShapeSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postShapeSaveAs", "shapeIndex");
            initialize("postShapeSaveAs", "shapeIndex", valueShapeIndex);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postShapeSaveAs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "postShapeSaveAs", "format");
            initialize("postShapeSaveAs", "format", valueFormat);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postShapeSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "postShapeSaveAs", "options");
            initialize("postShapeSaveAs", "options", valueOptions);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "postShapeSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "postShapeSaveAs", "scaleX");
            initialize("postShapeSaveAs", "scaleX", valueScaleX);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "postShapeSaveAs", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "postShapeSaveAs", "scaleY");
            initialize("postShapeSaveAs", "scaleY", valueScaleY);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "postShapeSaveAs", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "postShapeSaveAs", "bounds");
            initialize("postShapeSaveAs", "bounds", valueBounds);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "postShapeSaveAs", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postShapeSaveAs", "password");
            initialize("postShapeSaveAs", "password", valuePassword);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postShapeSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postShapeSaveAs", "folder");
            initialize("postShapeSaveAs", "folder", valueFolder);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postShapeSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postShapeSaveAs", "storage");
            initialize("postShapeSaveAs", "storage", valueStorage);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postShapeSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postShapeSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postShapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postShapeSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postShapeSaveAs", "fontsFolder");
            initialize("postShapeSaveAs", "fontsFolder", valueFontsFolder);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postShapeSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postShapeSaveAs");
        }
    }
    
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationEffectTest() throws ApiException, Exception {
        initialize("postSlideAnimationEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "postSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationEffect", "storage");
        response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlideAnimationEffect", "name");
            initialize("postSlideAnimationEffect", "name", valueName);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlideAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSlideAnimationEffect", "slideIndex");
            initialize("postSlideAnimationEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSlideAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "postSlideAnimationEffect", "effect");
            initialize("postSlideAnimationEffect", "effect", valueEffect);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "postSlideAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "postSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlideAnimationEffect", "password");
            initialize("postSlideAnimationEffect", "password", valuePassword);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlideAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlideAnimationEffect", "folder");
            initialize("postSlideAnimationEffect", "folder", valueFolder);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlideAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlideAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlideAnimationEffect", "storage");
            initialize("postSlideAnimationEffect", "storage", valueStorage);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlideAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlideAnimationEffect");
        }
    }
    
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("postSlideAnimationInteractiveSequence", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "postSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "storage");
        response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "postSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlideAnimationInteractiveSequence", "name");
            initialize("postSlideAnimationInteractiveSequence", "name", valueName);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlideAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "postSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSlideAnimationInteractiveSequence", "slideIndex");
            initialize("postSlideAnimationInteractiveSequence", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSlideAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceInvalidSequenceTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "postSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "storage");
        try {
            valueSequence = (InteractiveSequence)invalidizeTestValue("InteractiveSequence", valueSequence, "postSlideAnimationInteractiveSequence", "sequence");
            initialize("postSlideAnimationInteractiveSequence", "sequence", valueSequence);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequence", "postSlideAnimationInteractiveSequence", valueSequence);
        }
        if (needAssertResponse) {
            assertResponse("sequence", "postSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "postSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlideAnimationInteractiveSequence", "password");
            initialize("postSlideAnimationInteractiveSequence", "password", valuePassword);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlideAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "postSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlideAnimationInteractiveSequence", "folder");
            initialize("postSlideAnimationInteractiveSequence", "folder", valueFolder);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlideAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlideAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "postSlideAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlideAnimationInteractiveSequence", "storage");
            initialize("postSlideAnimationInteractiveSequence", "storage", valueStorage);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlideAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlideAnimationInteractiveSequence");
        }
    }
    
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("postSlideAnimationInteractiveSequenceEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlideAnimationInteractiveSequenceEffect", "name");
            initialize("postSlideAnimationInteractiveSequenceEffect", "name", valueName);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlideAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("postSlideAnimationInteractiveSequenceEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSlideAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("postSlideAnimationInteractiveSequenceEffect", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "postSlideAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "postSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "postSlideAnimationInteractiveSequenceEffect", "effect");
            initialize("postSlideAnimationInteractiveSequenceEffect", "effect", valueEffect);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "postSlideAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "postSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlideAnimationInteractiveSequenceEffect", "password");
            initialize("postSlideAnimationInteractiveSequenceEffect", "password", valuePassword);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlideAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlideAnimationInteractiveSequenceEffect", "folder");
            initialize("postSlideAnimationInteractiveSequenceEffect", "folder", valueFolder);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlideAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "postSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "postSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlideAnimationInteractiveSequenceEffect", "storage");
            initialize("postSlideAnimationInteractiveSequenceEffect", "storage", valueStorage);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlideAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlideAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideReplaceTextTest() throws ApiException, Exception {
        initialize("postSlideReplaceText", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlideReplaceText", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlideReplaceText", "password");
        response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideReplaceTextInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlideReplaceText", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlideReplaceText", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postSlideReplaceText", "document");
            initialize("postSlideReplaceText", "document", valueDocument);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postSlideReplaceText", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postSlideReplaceText");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideReplaceTextInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlideReplaceText", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlideReplaceText", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSlideReplaceText", "slideIndex");
            initialize("postSlideReplaceText", "slideIndex", valueSlideIndex);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSlideReplaceText", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSlideReplaceText");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideReplaceTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlideReplaceText", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlideReplaceText", "password");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "postSlideReplaceText", "oldValue");
            initialize("postSlideReplaceText", "oldValue", valueOldValue);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "postSlideReplaceText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "postSlideReplaceText");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideReplaceTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlideReplaceText", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlideReplaceText", "password");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "postSlideReplaceText", "newValue");
            initialize("postSlideReplaceText", "newValue", valueNewValue);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "postSlideReplaceText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "postSlideReplaceText");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideReplaceTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlideReplaceText", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlideReplaceText", "password");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "postSlideReplaceText", "ignoreCase");
            initialize("postSlideReplaceText", "ignoreCase", valueIgnoreCase);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "postSlideReplaceText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "postSlideReplaceText");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideReplaceTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlideReplaceText", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlideReplaceText", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlideReplaceText", "password");
            initialize("postSlideReplaceText", "password", valuePassword);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlideReplaceText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlideReplaceText");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsTest() throws ApiException, Exception {
        initialize("postSlideSaveAs", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlideSaveAs", "name");
            initialize("postSlideSaveAs", "name", valueName);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlideSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSlideSaveAs", "slideIndex");
            initialize("postSlideSaveAs", "slideIndex", valueSlideIndex);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSlideSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "postSlideSaveAs", "format");
            initialize("postSlideSaveAs", "format", valueFormat);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postSlideSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "postSlideSaveAs", "options");
            initialize("postSlideSaveAs", "options", valueOptions);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "postSlideSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "postSlideSaveAs", "width");
            initialize("postSlideSaveAs", "width", valueWidth);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "postSlideSaveAs", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "postSlideSaveAs", "height");
            initialize("postSlideSaveAs", "height", valueHeight);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "postSlideSaveAs", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlideSaveAs", "password");
            initialize("postSlideSaveAs", "password", valuePassword);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlideSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlideSaveAs", "folder");
            initialize("postSlideSaveAs", "folder", valueFolder);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlideSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlideSaveAs", "storage");
            initialize("postSlideSaveAs", "storage", valueStorage);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlideSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlideSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlideSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "postSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlideSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postSlideSaveAs", "fontsFolder");
            initialize("postSlideSaveAs", "fontsFolder", valueFontsFolder);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postSlideSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postSlideSaveAs");
        }
    }
    
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesAddTest() throws ApiException, Exception {
        initialize("postSlidesAdd", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "postSlidesAdd", "name");
        String valueLayoutAlias = (String)getTestValue("String", "postSlidesAdd", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesAdd", "position");
        String valuePassword = (String)getTestValue("String", "postSlidesAdd", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesAdd", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesAdd", "storage");
        response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesAddInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesAdd", "name");
        String valueLayoutAlias = (String)getTestValue("String", "postSlidesAdd", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesAdd", "position");
        String valuePassword = (String)getTestValue("String", "postSlidesAdd", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesAdd", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesAdd", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesAdd", "name");
            initialize("postSlidesAdd", "name", valueName);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesAdd", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesAdd");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesAddInvalidLayoutAliasTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesAdd", "name");
        String valueLayoutAlias = (String)getTestValue("String", "postSlidesAdd", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesAdd", "position");
        String valuePassword = (String)getTestValue("String", "postSlidesAdd", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesAdd", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesAdd", "storage");
        try {
            valueLayoutAlias = (String)invalidizeTestValue("String", valueLayoutAlias, "postSlidesAdd", "layoutAlias");
            initialize("postSlidesAdd", "layoutAlias", valueLayoutAlias);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "layoutAlias", "postSlidesAdd", valueLayoutAlias);
        }
        if (needAssertResponse) {
            assertResponse("layoutAlias", "postSlidesAdd");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesAddInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesAdd", "name");
        String valueLayoutAlias = (String)getTestValue("String", "postSlidesAdd", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesAdd", "position");
        String valuePassword = (String)getTestValue("String", "postSlidesAdd", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesAdd", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesAdd", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postSlidesAdd", "position");
            initialize("postSlidesAdd", "position", valuePosition);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postSlidesAdd", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postSlidesAdd");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesAddInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesAdd", "name");
        String valueLayoutAlias = (String)getTestValue("String", "postSlidesAdd", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesAdd", "position");
        String valuePassword = (String)getTestValue("String", "postSlidesAdd", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesAdd", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesAdd", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesAdd", "password");
            initialize("postSlidesAdd", "password", valuePassword);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesAdd", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesAdd");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesAddInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesAdd", "name");
        String valueLayoutAlias = (String)getTestValue("String", "postSlidesAdd", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesAdd", "position");
        String valuePassword = (String)getTestValue("String", "postSlidesAdd", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesAdd", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesAdd", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesAdd", "folder");
            initialize("postSlidesAdd", "folder", valueFolder);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesAdd", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesAdd");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesAddInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesAdd", "name");
        String valueLayoutAlias = (String)getTestValue("String", "postSlidesAdd", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesAdd", "position");
        String valuePassword = (String)getTestValue("String", "postSlidesAdd", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesAdd", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesAdd", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesAdd", "storage");
            initialize("postSlidesAdd", "storage", valueStorage);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesAdd", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesAdd");
        }
    }
    
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesConvertTest() throws ApiException, Exception {
        initialize("postSlidesConvert", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesConvert", "format");
        String valuePassword = (String)getTestValue("String", "postSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "postSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesConvert", "fontsFolder");
        response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesConvertInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesConvert", "format");
        String valuePassword = (String)getTestValue("String", "postSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "postSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesConvert", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "postSlidesConvert", "document");
            initialize("postSlidesConvert", "document", valueDocument);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "postSlidesConvert", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "postSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesConvertInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesConvert", "format");
        String valuePassword = (String)getTestValue("String", "postSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "postSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesConvert", "fontsFolder");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "postSlidesConvert", "format");
            initialize("postSlidesConvert", "format", valueFormat);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postSlidesConvert", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesConvertInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesConvert", "format");
        String valuePassword = (String)getTestValue("String", "postSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "postSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesConvert", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesConvert", "password");
            initialize("postSlidesConvert", "password", valuePassword);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesConvert", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesConvertInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesConvert", "format");
        String valuePassword = (String)getTestValue("String", "postSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "postSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesConvert", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesConvert", "storage");
            initialize("postSlidesConvert", "storage", valueStorage);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesConvert", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesConvertInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "postSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesConvert", "format");
        String valuePassword = (String)getTestValue("String", "postSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "postSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesConvert", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postSlidesConvert", "fontsFolder");
            initialize("postSlidesConvert", "fontsFolder", valueFontsFolder);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postSlidesConvert", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postSlidesConvert");
        }
    }
    
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyTest() throws ApiException, Exception {
        initialize("postSlidesCopy", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesCopy", "name");
            initialize("postSlidesCopy", "name", valueName);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesCopy", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidSlideToCopyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valueSlideToCopy = (Integer)invalidizeTestValue("Integer", valueSlideToCopy, "postSlidesCopy", "slideToCopy");
            initialize("postSlidesCopy", "slideToCopy", valueSlideToCopy);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideToCopy", "postSlidesCopy", valueSlideToCopy);
        }
        if (needAssertResponse) {
            assertResponse("slideToCopy", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "postSlidesCopy", "position");
            initialize("postSlidesCopy", "position", valuePosition);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "postSlidesCopy", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidSourceTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valueSource = (String)invalidizeTestValue("String", valueSource, "postSlidesCopy", "source");
            initialize("postSlidesCopy", "source", valueSource);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "source", "postSlidesCopy", valueSource);
        }
        if (needAssertResponse) {
            assertResponse("source", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidSourcePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valueSourcePassword = (String)invalidizeTestValue("String", valueSourcePassword, "postSlidesCopy", "sourcePassword");
            initialize("postSlidesCopy", "sourcePassword", valueSourcePassword);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourcePassword", "postSlidesCopy", valueSourcePassword);
        }
        if (needAssertResponse) {
            assertResponse("sourcePassword", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidSourceStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valueSourceStorage = (String)invalidizeTestValue("String", valueSourceStorage, "postSlidesCopy", "sourceStorage");
            initialize("postSlidesCopy", "sourceStorage", valueSourceStorage);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourceStorage", "postSlidesCopy", valueSourceStorage);
        }
        if (needAssertResponse) {
            assertResponse("sourceStorage", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesCopy", "password");
            initialize("postSlidesCopy", "password", valuePassword);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesCopy", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesCopy", "folder");
            initialize("postSlidesCopy", "folder", valueFolder);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesCopy", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesCopy");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesCopyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesCopy", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "postSlidesCopy", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "postSlidesCopy", "position");
        String valueSource = (String)getTestValue("String", "postSlidesCopy", "source");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesCopy", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesCopy", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesCopy", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesCopy", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesCopy", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesCopy", "storage");
            initialize("postSlidesCopy", "storage", valueStorage);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesCopy", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesCopy");
        }
    }
    
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentTest() throws ApiException, Exception {
        initialize("postSlidesDocument", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "postSlidesDocument", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "postSlidesDocument", "data");
        String valueInputPassword = (String)getTestValue("String", "postSlidesDocument", "inputPassword");
        String valuePassword = (String)getTestValue("String", "postSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocument", "storage");
        response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocument", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "postSlidesDocument", "data");
        String valueInputPassword = (String)getTestValue("String", "postSlidesDocument", "inputPassword");
        String valuePassword = (String)getTestValue("String", "postSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocument", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesDocument", "name");
            initialize("postSlidesDocument", "name", valueName);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesDocument", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesDocument");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentInvalidDataTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocument", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "postSlidesDocument", "data");
        String valueInputPassword = (String)getTestValue("String", "postSlidesDocument", "inputPassword");
        String valuePassword = (String)getTestValue("String", "postSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocument", "storage");
        try {
            valueData = (byte[])invalidizeTestValue("byte[]", valueData, "postSlidesDocument", "data");
            initialize("postSlidesDocument", "data", valueData);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "data", "postSlidesDocument", valueData);
        }
        if (needAssertResponse) {
            assertResponse("data", "postSlidesDocument");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentInvalidInputPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocument", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "postSlidesDocument", "data");
        String valueInputPassword = (String)getTestValue("String", "postSlidesDocument", "inputPassword");
        String valuePassword = (String)getTestValue("String", "postSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocument", "storage");
        try {
            valueInputPassword = (String)invalidizeTestValue("String", valueInputPassword, "postSlidesDocument", "inputPassword");
            initialize("postSlidesDocument", "inputPassword", valueInputPassword);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "inputPassword", "postSlidesDocument", valueInputPassword);
        }
        if (needAssertResponse) {
            assertResponse("inputPassword", "postSlidesDocument");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocument", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "postSlidesDocument", "data");
        String valueInputPassword = (String)getTestValue("String", "postSlidesDocument", "inputPassword");
        String valuePassword = (String)getTestValue("String", "postSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocument", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesDocument", "password");
            initialize("postSlidesDocument", "password", valuePassword);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesDocument", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesDocument");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocument", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "postSlidesDocument", "data");
        String valueInputPassword = (String)getTestValue("String", "postSlidesDocument", "inputPassword");
        String valuePassword = (String)getTestValue("String", "postSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocument", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesDocument", "folder");
            initialize("postSlidesDocument", "folder", valueFolder);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesDocument", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesDocument");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocument", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "postSlidesDocument", "data");
        String valueInputPassword = (String)getTestValue("String", "postSlidesDocument", "inputPassword");
        String valuePassword = (String)getTestValue("String", "postSlidesDocument", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocument", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocument", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesDocument", "storage");
            initialize("postSlidesDocument", "storage", valueStorage);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesDocument", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesDocument");
        }
    }
    
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromHtmlTest() throws ApiException, Exception {
        initialize("postSlidesDocumentFromHtml", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "postSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromHtml", "storage");
        response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromHtmlInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "postSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromHtml", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesDocumentFromHtml", "name");
            initialize("postSlidesDocumentFromHtml", "name", valueName);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesDocumentFromHtml", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesDocumentFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromHtmlInvalidHtmlTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "postSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromHtml", "storage");
        try {
            valueHtml = (String)invalidizeTestValue("String", valueHtml, "postSlidesDocumentFromHtml", "html");
            initialize("postSlidesDocumentFromHtml", "html", valueHtml);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "html", "postSlidesDocumentFromHtml", valueHtml);
        }
        if (needAssertResponse) {
            assertResponse("html", "postSlidesDocumentFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromHtmlInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "postSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromHtml", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesDocumentFromHtml", "password");
            initialize("postSlidesDocumentFromHtml", "password", valuePassword);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesDocumentFromHtml", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesDocumentFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromHtmlInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "postSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromHtml", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesDocumentFromHtml", "folder");
            initialize("postSlidesDocumentFromHtml", "folder", valueFolder);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesDocumentFromHtml", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesDocumentFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromHtmlInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "postSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromHtml", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesDocumentFromHtml", "storage");
            initialize("postSlidesDocumentFromHtml", "storage", valueStorage);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesDocumentFromHtml", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesDocumentFromHtml");
        }
    }
    
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromPdfTest() throws ApiException, Exception {
        initialize("postSlidesDocumentFromPdf", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "postSlidesDocumentFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromPdf", "storage");
        response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromPdfInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "postSlidesDocumentFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromPdf", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesDocumentFromPdf", "name");
            initialize("postSlidesDocumentFromPdf", "name", valueName);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesDocumentFromPdf", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesDocumentFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromPdfInvalidPdfTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "postSlidesDocumentFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromPdf", "storage");
        try {
            valuePdf = (byte[])invalidizeTestValue("byte[]", valuePdf, "postSlidesDocumentFromPdf", "pdf");
            initialize("postSlidesDocumentFromPdf", "pdf", valuePdf);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pdf", "postSlidesDocumentFromPdf", valuePdf);
        }
        if (needAssertResponse) {
            assertResponse("pdf", "postSlidesDocumentFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromPdfInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "postSlidesDocumentFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromPdf", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesDocumentFromPdf", "password");
            initialize("postSlidesDocumentFromPdf", "password", valuePassword);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesDocumentFromPdf", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesDocumentFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromPdfInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "postSlidesDocumentFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromPdf", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesDocumentFromPdf", "folder");
            initialize("postSlidesDocumentFromPdf", "folder", valueFolder);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesDocumentFromPdf", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesDocumentFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromPdfInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "postSlidesDocumentFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromPdf", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesDocumentFromPdf", "storage");
            initialize("postSlidesDocumentFromPdf", "storage", valueStorage);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesDocumentFromPdf", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesDocumentFromPdf");
        }
    }
    
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceTest() throws ApiException, Exception {
        initialize("postSlidesDocumentFromSource", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesDocumentFromSource", "name");
            initialize("postSlidesDocumentFromSource", "name", valueName);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesDocumentFromSource", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesDocumentFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceInvalidSourcePathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        try {
            valueSourcePath = (String)invalidizeTestValue("String", valueSourcePath, "postSlidesDocumentFromSource", "sourcePath");
            initialize("postSlidesDocumentFromSource", "sourcePath", valueSourcePath);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourcePath", "postSlidesDocumentFromSource", valueSourcePath);
        }
        if (needAssertResponse) {
            assertResponse("sourcePath", "postSlidesDocumentFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceInvalidSourcePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        try {
            valueSourcePassword = (String)invalidizeTestValue("String", valueSourcePassword, "postSlidesDocumentFromSource", "sourcePassword");
            initialize("postSlidesDocumentFromSource", "sourcePassword", valueSourcePassword);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourcePassword", "postSlidesDocumentFromSource", valueSourcePassword);
        }
        if (needAssertResponse) {
            assertResponse("sourcePassword", "postSlidesDocumentFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceInvalidSourceStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        try {
            valueSourceStorage = (String)invalidizeTestValue("String", valueSourceStorage, "postSlidesDocumentFromSource", "sourceStorage");
            initialize("postSlidesDocumentFromSource", "sourceStorage", valueSourceStorage);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourceStorage", "postSlidesDocumentFromSource", valueSourceStorage);
        }
        if (needAssertResponse) {
            assertResponse("sourceStorage", "postSlidesDocumentFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesDocumentFromSource", "password");
            initialize("postSlidesDocumentFromSource", "password", valuePassword);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesDocumentFromSource", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesDocumentFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesDocumentFromSource", "folder");
            initialize("postSlidesDocumentFromSource", "folder", valueFolder);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesDocumentFromSource", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesDocumentFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromSourceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromSource", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromSource", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesDocumentFromSource", "storage");
            initialize("postSlidesDocumentFromSource", "storage", valueStorage);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesDocumentFromSource", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesDocumentFromSource");
        }
    }
    
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateTest() throws ApiException, Exception {
        initialize("postSlidesDocumentFromTemplate", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesDocumentFromTemplate", "name");
            initialize("postSlidesDocumentFromTemplate", "name", valueName);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesDocumentFromTemplate", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidTemplatePathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueTemplatePath = (String)invalidizeTestValue("String", valueTemplatePath, "postSlidesDocumentFromTemplate", "templatePath");
            initialize("postSlidesDocumentFromTemplate", "templatePath", valueTemplatePath);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "templatePath", "postSlidesDocumentFromTemplate", valueTemplatePath);
        }
        if (needAssertResponse) {
            assertResponse("templatePath", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidDataTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueData = (String)invalidizeTestValue("String", valueData, "postSlidesDocumentFromTemplate", "data");
            initialize("postSlidesDocumentFromTemplate", "data", valueData);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "data", "postSlidesDocumentFromTemplate", valueData);
        }
        if (needAssertResponse) {
            assertResponse("data", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidTemplatePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueTemplatePassword = (String)invalidizeTestValue("String", valueTemplatePassword, "postSlidesDocumentFromTemplate", "templatePassword");
            initialize("postSlidesDocumentFromTemplate", "templatePassword", valueTemplatePassword);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "templatePassword", "postSlidesDocumentFromTemplate", valueTemplatePassword);
        }
        if (needAssertResponse) {
            assertResponse("templatePassword", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidTemplateStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueTemplateStorage = (String)invalidizeTestValue("String", valueTemplateStorage, "postSlidesDocumentFromTemplate", "templateStorage");
            initialize("postSlidesDocumentFromTemplate", "templateStorage", valueTemplateStorage);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "templateStorage", "postSlidesDocumentFromTemplate", valueTemplateStorage);
        }
        if (needAssertResponse) {
            assertResponse("templateStorage", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidIsImageDataEmbeddedTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueIsImageDataEmbedded = (Boolean)invalidizeTestValue("Boolean", valueIsImageDataEmbedded, "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
            initialize("postSlidesDocumentFromTemplate", "isImageDataEmbedded", valueIsImageDataEmbedded);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "isImageDataEmbedded", "postSlidesDocumentFromTemplate", valueIsImageDataEmbedded);
        }
        if (needAssertResponse) {
            assertResponse("isImageDataEmbedded", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesDocumentFromTemplate", "password");
            initialize("postSlidesDocumentFromTemplate", "password", valuePassword);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesDocumentFromTemplate", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesDocumentFromTemplate", "folder");
            initialize("postSlidesDocumentFromTemplate", "folder", valueFolder);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesDocumentFromTemplate", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesDocumentFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesDocumentFromTemplateInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "postSlidesDocumentFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesDocumentFromTemplate", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesDocumentFromTemplate", "storage");
            initialize("postSlidesDocumentFromTemplate", "storage", valueStorage);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesDocumentFromTemplate", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesDocumentFromTemplate");
        }
    }
    
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesMergeTest() throws ApiException, Exception {
        initialize("postSlidesMerge", null, null);
        File response = null;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "postSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "postSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "postSlidesMerge", "password");
        response = api.mergeOnline(valueFiles, valueRequest, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesMergeInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "postSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "postSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "postSlidesMerge", "password");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "postSlidesMerge", "files");
            initialize("postSlidesMerge", "files", valueFiles);
            File response = api.mergeOnline(valueFiles, valueRequest, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "files", "postSlidesMerge", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("files", "postSlidesMerge");
        }
    }
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesMergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "postSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "postSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "postSlidesMerge", "password");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "postSlidesMerge", "request");
            initialize("postSlidesMerge", "request", valueRequest);
            File response = api.mergeOnline(valueFiles, valueRequest, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "postSlidesMerge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "postSlidesMerge");
        }
    }
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesMergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "postSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "postSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "postSlidesMerge", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesMerge", "password");
            initialize("postSlidesMerge", "password", valuePassword);
            File response = api.mergeOnline(valueFiles, valueRequest, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesMerge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesMerge");
        }
    }
    
    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPipelineTest() throws ApiException, Exception {
        initialize("postSlidesPipeline", null, null);
        File response = null;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "postSlidesPipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "postSlidesPipeline", "files");
        response = api.pipeline(valuePipeline, valueFiles);
        assertTrue(response.isFile());
    }

    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPipelineInvalidPipelineTest() throws ApiException {
        Boolean needAssertResponse = false;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "postSlidesPipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "postSlidesPipeline", "files");
        try {
            valuePipeline = (Pipeline)invalidizeTestValue("Pipeline", valuePipeline, "postSlidesPipeline", "pipeline");
            initialize("postSlidesPipeline", "pipeline", valuePipeline);
            File response = api.pipeline(valuePipeline, valueFiles);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pipeline", "postSlidesPipeline", valuePipeline);
        }
        if (needAssertResponse) {
            assertResponse("pipeline", "postSlidesPipeline");
        }
    }
    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPipelineInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "postSlidesPipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "postSlidesPipeline", "files");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "postSlidesPipeline", "files");
            initialize("postSlidesPipeline", "files", valueFiles);
            File response = api.pipeline(valuePipeline, valueFiles);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "files", "postSlidesPipeline", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("files", "postSlidesPipeline");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextTest() throws ApiException, Exception {
        initialize("postSlidesPresentationReplaceText", null, null);
        DocumentReplaceResult response = null;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesPresentationReplaceText", "name");
            initialize("postSlidesPresentationReplaceText", "name", valueName);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesPresentationReplaceText", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "postSlidesPresentationReplaceText", "oldValue");
            initialize("postSlidesPresentationReplaceText", "oldValue", valueOldValue);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "postSlidesPresentationReplaceText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "postSlidesPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "postSlidesPresentationReplaceText", "newValue");
            initialize("postSlidesPresentationReplaceText", "newValue", valueNewValue);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "postSlidesPresentationReplaceText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "postSlidesPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "postSlidesPresentationReplaceText", "ignoreCase");
            initialize("postSlidesPresentationReplaceText", "ignoreCase", valueIgnoreCase);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "postSlidesPresentationReplaceText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "postSlidesPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesPresentationReplaceText", "password");
            initialize("postSlidesPresentationReplaceText", "password", valuePassword);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesPresentationReplaceText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesPresentationReplaceText", "folder");
            initialize("postSlidesPresentationReplaceText", "folder", valueFolder);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesPresentationReplaceText", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesPresentationReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesPresentationReplaceTextInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesPresentationReplaceText", "name");
        String valueOldValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesPresentationReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesPresentationReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesPresentationReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesPresentationReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesPresentationReplaceText", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesPresentationReplaceText", "storage");
            initialize("postSlidesPresentationReplaceText", "storage", valueStorage);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesPresentationReplaceText", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesPresentationReplaceText");
        }
    }
    
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderTest() throws ApiException, Exception {
        initialize("postSlidesReorder", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "postSlidesReorder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesReorder", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSlidesReorder", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSlidesReorder", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorder", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorder", "storage");
        response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesReorder", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSlidesReorder", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSlidesReorder", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorder", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorder", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesReorder", "name");
            initialize("postSlidesReorder", "name", valueName);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesReorder", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesReorder");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesReorder", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSlidesReorder", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSlidesReorder", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorder", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorder", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSlidesReorder", "slideIndex");
            initialize("postSlidesReorder", "slideIndex", valueSlideIndex);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSlidesReorder", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSlidesReorder");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderInvalidNewPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesReorder", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSlidesReorder", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSlidesReorder", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorder", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorder", "storage");
        try {
            valueNewPosition = (Integer)invalidizeTestValue("Integer", valueNewPosition, "postSlidesReorder", "newPosition");
            initialize("postSlidesReorder", "newPosition", valueNewPosition);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newPosition", "postSlidesReorder", valueNewPosition);
        }
        if (needAssertResponse) {
            assertResponse("newPosition", "postSlidesReorder");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesReorder", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSlidesReorder", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSlidesReorder", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorder", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorder", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesReorder", "password");
            initialize("postSlidesReorder", "password", valuePassword);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesReorder", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesReorder");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesReorder", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSlidesReorder", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSlidesReorder", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorder", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorder", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesReorder", "folder");
            initialize("postSlidesReorder", "folder", valueFolder);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesReorder", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesReorder");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesReorder", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "postSlidesReorder", "newPosition");
        String valuePassword = (String)getTestValue("String", "postSlidesReorder", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorder", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorder", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesReorder", "storage");
            initialize("postSlidesReorder", "storage", valueStorage);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesReorder", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesReorder");
        }
    }
    
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderManyTest() throws ApiException, Exception {
        initialize("postSlidesReorderMany", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "postSlidesReorderMany", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "newPositions");
        String valuePassword = (String)getTestValue("String", "postSlidesReorderMany", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorderMany", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorderMany", "storage");
        response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderManyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorderMany", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "newPositions");
        String valuePassword = (String)getTestValue("String", "postSlidesReorderMany", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorderMany", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorderMany", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesReorderMany", "name");
            initialize("postSlidesReorderMany", "name", valueName);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesReorderMany", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesReorderMany");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderManyInvalidOldPositionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorderMany", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "newPositions");
        String valuePassword = (String)getTestValue("String", "postSlidesReorderMany", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorderMany", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorderMany", "storage");
        try {
            valueOldPositions = (List<Integer>)invalidizeTestValue("List<Integer>", valueOldPositions, "postSlidesReorderMany", "oldPositions");
            initialize("postSlidesReorderMany", "oldPositions", valueOldPositions);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldPositions", "postSlidesReorderMany", valueOldPositions);
        }
        if (needAssertResponse) {
            assertResponse("oldPositions", "postSlidesReorderMany");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderManyInvalidNewPositionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorderMany", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "newPositions");
        String valuePassword = (String)getTestValue("String", "postSlidesReorderMany", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorderMany", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorderMany", "storage");
        try {
            valueNewPositions = (List<Integer>)invalidizeTestValue("List<Integer>", valueNewPositions, "postSlidesReorderMany", "newPositions");
            initialize("postSlidesReorderMany", "newPositions", valueNewPositions);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newPositions", "postSlidesReorderMany", valueNewPositions);
        }
        if (needAssertResponse) {
            assertResponse("newPositions", "postSlidesReorderMany");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderManyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorderMany", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "newPositions");
        String valuePassword = (String)getTestValue("String", "postSlidesReorderMany", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorderMany", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorderMany", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesReorderMany", "password");
            initialize("postSlidesReorderMany", "password", valuePassword);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesReorderMany", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesReorderMany");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderManyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorderMany", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "newPositions");
        String valuePassword = (String)getTestValue("String", "postSlidesReorderMany", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorderMany", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorderMany", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesReorderMany", "folder");
            initialize("postSlidesReorderMany", "folder", valueFolder);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesReorderMany", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesReorderMany");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesReorderManyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesReorderMany", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "postSlidesReorderMany", "newPositions");
        String valuePassword = (String)getTestValue("String", "postSlidesReorderMany", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesReorderMany", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesReorderMany", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesReorderMany", "storage");
            initialize("postSlidesReorderMany", "storage", valueStorage);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesReorderMany", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesReorderMany");
        }
    }
    
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsTest() throws ApiException, Exception {
        initialize("postSlidesSaveAs", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesSaveAs", "name");
            initialize("postSlidesSaveAs", "name", valueName);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "postSlidesSaveAs", "format");
            initialize("postSlidesSaveAs", "format", valueFormat);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postSlidesSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "postSlidesSaveAs", "options");
            initialize("postSlidesSaveAs", "options", valueOptions);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "postSlidesSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "postSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesSaveAs", "password");
            initialize("postSlidesSaveAs", "password", valuePassword);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesSaveAs", "folder");
            initialize("postSlidesSaveAs", "folder", valueFolder);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesSaveAs", "storage");
            initialize("postSlidesSaveAs", "storage", valueStorage);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "postSlidesSaveAs", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "postSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postSlidesSaveAs", "fontsFolder");
            initialize("postSlidesSaveAs", "fontsFolder", valueFontsFolder);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postSlidesSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postSlidesSaveAs");
        }
    }
    
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSetDocumentPropertiesTest() throws ApiException, Exception {
        initialize("postSlidesSetDocumentProperties", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "postSlidesSetDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "postSlidesSetDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "postSlidesSetDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSetDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSetDocumentProperties", "storage");
        response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSetDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSetDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "postSlidesSetDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "postSlidesSetDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSetDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSetDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesSetDocumentProperties", "name");
            initialize("postSlidesSetDocumentProperties", "name", valueName);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesSetDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesSetDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSetDocumentPropertiesInvalidPropertiesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSetDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "postSlidesSetDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "postSlidesSetDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSetDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSetDocumentProperties", "storage");
        try {
            valueProperties = (DocumentProperties)invalidizeTestValue("DocumentProperties", valueProperties, "postSlidesSetDocumentProperties", "properties");
            initialize("postSlidesSetDocumentProperties", "properties", valueProperties);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "properties", "postSlidesSetDocumentProperties", valueProperties);
        }
        if (needAssertResponse) {
            assertResponse("properties", "postSlidesSetDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSetDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSetDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "postSlidesSetDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "postSlidesSetDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSetDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSetDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesSetDocumentProperties", "password");
            initialize("postSlidesSetDocumentProperties", "password", valuePassword);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesSetDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesSetDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSetDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSetDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "postSlidesSetDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "postSlidesSetDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSetDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSetDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesSetDocumentProperties", "folder");
            initialize("postSlidesSetDocumentProperties", "folder", valueFolder);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesSetDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesSetDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSetDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSetDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "postSlidesSetDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "postSlidesSetDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSetDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSetDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesSetDocumentProperties", "storage");
            initialize("postSlidesSetDocumentProperties", "storage", valueStorage);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesSetDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesSetDocumentProperties");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextTest() throws ApiException, Exception {
        initialize("postSlidesSlideReplaceText", null, null);
        SlideReplaceResult response = null;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesSlideReplaceText", "name");
            initialize("postSlidesSlideReplaceText", "name", valueName);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesSlideReplaceText", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesSlideReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSlidesSlideReplaceText", "slideIndex");
            initialize("postSlidesSlideReplaceText", "slideIndex", valueSlideIndex);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSlidesSlideReplaceText", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSlidesSlideReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "postSlidesSlideReplaceText", "oldValue");
            initialize("postSlidesSlideReplaceText", "oldValue", valueOldValue);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "postSlidesSlideReplaceText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "postSlidesSlideReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "postSlidesSlideReplaceText", "newValue");
            initialize("postSlidesSlideReplaceText", "newValue", valueNewValue);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "postSlidesSlideReplaceText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "postSlidesSlideReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "postSlidesSlideReplaceText", "ignoreCase");
            initialize("postSlidesSlideReplaceText", "ignoreCase", valueIgnoreCase);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "postSlidesSlideReplaceText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "postSlidesSlideReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesSlideReplaceText", "password");
            initialize("postSlidesSlideReplaceText", "password", valuePassword);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesSlideReplaceText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesSlideReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesSlideReplaceText", "folder");
            initialize("postSlidesSlideReplaceText", "folder", valueFolder);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesSlideReplaceText", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesSlideReplaceText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSlideReplaceTextInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSlideReplaceText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSlidesSlideReplaceText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "postSlidesSlideReplaceText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "postSlidesSlideReplaceText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "postSlidesSlideReplaceText", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSlideReplaceText", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSlideReplaceText", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesSlideReplaceText", "storage");
            initialize("postSlidesSlideReplaceText", "storage", valueStorage);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesSlideReplaceText", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesSlideReplaceText");
        }
    }
    
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitTest() throws ApiException, Exception {
        initialize("postSlidesSplit", null, null);
        SplitDocumentResult response = null;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSlidesSplit", "name");
            initialize("postSlidesSplit", "name", valueName);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSlidesSplit", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "postSlidesSplit", "options");
            initialize("postSlidesSplit", "options", valueOptions);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "postSlidesSplit", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "postSlidesSplit", "format");
            initialize("postSlidesSplit", "format", valueFormat);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postSlidesSplit", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "postSlidesSplit", "width");
            initialize("postSlidesSplit", "width", valueWidth);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "postSlidesSplit", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "postSlidesSplit", "height");
            initialize("postSlidesSplit", "height", valueHeight);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "postSlidesSplit", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "postSlidesSplit", "from");
            initialize("postSlidesSplit", "from", valueFrom);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "from", "postSlidesSplit", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("from", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "postSlidesSplit", "to");
            initialize("postSlidesSplit", "to", valueTo);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "to", "postSlidesSplit", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("to", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidDestFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueDestFolder = (String)invalidizeTestValue("String", valueDestFolder, "postSlidesSplit", "destFolder");
            initialize("postSlidesSplit", "destFolder", valueDestFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destFolder", "postSlidesSplit", valueDestFolder);
        }
        if (needAssertResponse) {
            assertResponse("destFolder", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSlidesSplit", "password");
            initialize("postSlidesSplit", "password", valuePassword);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSlidesSplit", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSlidesSplit", "folder");
            initialize("postSlidesSplit", "folder", valueFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSlidesSplit", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSlidesSplit", "storage");
            initialize("postSlidesSplit", "storage", valueStorage);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSlidesSplit", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSlidesSplit");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSlidesSplitInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSlidesSplit", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "postSlidesSplit", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "postSlidesSplit", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "postSlidesSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "postSlidesSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "postSlidesSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "postSlidesSplit", "to");
        String valueDestFolder = (String)getTestValue("String", "postSlidesSplit", "destFolder");
        String valuePassword = (String)getTestValue("String", "postSlidesSplit", "password");
        String valueFolder = (String)getTestValue("String", "postSlidesSplit", "folder");
        String valueStorage = (String)getTestValue("String", "postSlidesSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSlidesSplit", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postSlidesSplit", "fontsFolder");
            initialize("postSlidesSplit", "fontsFolder", valueFontsFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postSlidesSplit", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postSlidesSplit");
        }
    }
    
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsTest() throws ApiException, Exception {
        initialize("postSubshapeSaveAs", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "postSubshapeSaveAs", "name");
            initialize("postSubshapeSaveAs", "name", valueName);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "postSubshapeSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "postSubshapeSaveAs", "slideIndex");
            initialize("postSubshapeSaveAs", "slideIndex", valueSlideIndex);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "postSubshapeSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "postSubshapeSaveAs", "path");
            initialize("postSubshapeSaveAs", "path", valuePath);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "postSubshapeSaveAs", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "postSubshapeSaveAs", "shapeIndex");
            initialize("postSubshapeSaveAs", "shapeIndex", valueShapeIndex);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "postSubshapeSaveAs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "postSubshapeSaveAs", "format");
            initialize("postSubshapeSaveAs", "format", valueFormat);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "postSubshapeSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "postSubshapeSaveAs", "options");
            initialize("postSubshapeSaveAs", "options", valueOptions);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "postSubshapeSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "postSubshapeSaveAs", "scaleX");
            initialize("postSubshapeSaveAs", "scaleX", valueScaleX);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "postSubshapeSaveAs", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "postSubshapeSaveAs", "scaleY");
            initialize("postSubshapeSaveAs", "scaleY", valueScaleY);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "postSubshapeSaveAs", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "postSubshapeSaveAs", "bounds");
            initialize("postSubshapeSaveAs", "bounds", valueBounds);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "postSubshapeSaveAs", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "postSubshapeSaveAs", "password");
            initialize("postSubshapeSaveAs", "password", valuePassword);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "postSubshapeSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "postSubshapeSaveAs", "folder");
            initialize("postSubshapeSaveAs", "folder", valueFolder);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "postSubshapeSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "postSubshapeSaveAs", "storage");
            initialize("postSubshapeSaveAs", "storage", valueStorage);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "postSubshapeSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "postSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSubshapeSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "postSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "postSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "postSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "postSubshapeSaveAs", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "postSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "postSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "postSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "postSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "postSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "postSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "postSubshapeSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "postSubshapeSaveAs", "fontsFolder");
            initialize("postSubshapeSaveAs", "fontsFolder", valueFontsFolder);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "postSubshapeSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "postSubshapeSaveAs");
        }
    }
    
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryTest() throws ApiException, Exception {
        initialize("putChartCategory", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putChartCategory", "name");
            initialize("putChartCategory", "name", valueName);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putChartCategory", "slideIndex");
            initialize("putChartCategory", "slideIndex", valueSlideIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putChartCategory", "shapeIndex");
            initialize("putChartCategory", "shapeIndex", valueShapeIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidCategoryIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valueCategoryIndex = (Integer)invalidizeTestValue("Integer", valueCategoryIndex, "putChartCategory", "categoryIndex");
            initialize("putChartCategory", "categoryIndex", valueCategoryIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "categoryIndex", "putChartCategory", valueCategoryIndex);
        }
        if (needAssertResponse) {
            assertResponse("categoryIndex", "putChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidCategoryTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valueCategory = (ChartCategory)invalidizeTestValue("ChartCategory", valueCategory, "putChartCategory", "category");
            initialize("putChartCategory", "category", valueCategory);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "category", "putChartCategory", valueCategory);
        }
        if (needAssertResponse) {
            assertResponse("category", "putChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putChartCategory", "password");
            initialize("putChartCategory", "password", valuePassword);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putChartCategory", "folder");
            initialize("putChartCategory", "folder", valueFolder);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "putChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "putChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "putChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "putChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "putChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putChartCategory", "storage");
            initialize("putChartCategory", "storage", valueStorage);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putChartCategory");
        }
    }
    
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointTest() throws ApiException, Exception {
        initialize("putChartDataPoint", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putChartDataPoint", "name");
            initialize("putChartDataPoint", "name", valueName);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putChartDataPoint", "slideIndex");
            initialize("putChartDataPoint", "slideIndex", valueSlideIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putChartDataPoint", "shapeIndex");
            initialize("putChartDataPoint", "shapeIndex", valueShapeIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "putChartDataPoint", "seriesIndex");
            initialize("putChartDataPoint", "seriesIndex", valueSeriesIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "putChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidPointIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valuePointIndex = (Integer)invalidizeTestValue("Integer", valuePointIndex, "putChartDataPoint", "pointIndex");
            initialize("putChartDataPoint", "pointIndex", valuePointIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pointIndex", "putChartDataPoint", valuePointIndex);
        }
        if (needAssertResponse) {
            assertResponse("pointIndex", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidDataPointTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valueDataPoint = (DataPoint)invalidizeTestValue("DataPoint", valueDataPoint, "putChartDataPoint", "dataPoint");
            initialize("putChartDataPoint", "dataPoint", valueDataPoint);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dataPoint", "putChartDataPoint", valueDataPoint);
        }
        if (needAssertResponse) {
            assertResponse("dataPoint", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putChartDataPoint", "password");
            initialize("putChartDataPoint", "password", valuePassword);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putChartDataPoint", "folder");
            initialize("putChartDataPoint", "folder", valueFolder);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "putChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "putChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "putChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "putChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "putChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putChartDataPoint", "storage");
            initialize("putChartDataPoint", "storage", valueStorage);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putChartDataPoint");
        }
    }
    
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesTest() throws ApiException, Exception {
        initialize("putChartSeries", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putChartSeries", "name");
            initialize("putChartSeries", "name", valueName);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putChartSeries", "slideIndex");
            initialize("putChartSeries", "slideIndex", valueSlideIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putChartSeries", "shapeIndex");
            initialize("putChartSeries", "shapeIndex", valueShapeIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "putChartSeries", "seriesIndex");
            initialize("putChartSeries", "seriesIndex", valueSeriesIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "putChartSeries", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "putChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidSeriesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valueSeries = (Series)invalidizeTestValue("Series", valueSeries, "putChartSeries", "series");
            initialize("putChartSeries", "series", valueSeries);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "series", "putChartSeries", valueSeries);
        }
        if (needAssertResponse) {
            assertResponse("series", "putChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putChartSeries", "password");
            initialize("putChartSeries", "password", valuePassword);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putChartSeries", "folder");
            initialize("putChartSeries", "folder", valueFolder);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "putChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "putChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "putChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "putChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "putChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putChartSeries", "storage");
            initialize("putChartSeries", "storage", valueStorage);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putChartSeries");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeTest() throws ApiException, Exception {
        initialize("putExportShape", null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "putExportShape", "document");
            initialize("putExportShape", "document", valueDocument);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "putExportShape", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putExportShape", "slideIndex");
            initialize("putExportShape", "slideIndex", valueSlideIndex);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putExportShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putExportShape", "shapeIndex");
            initialize("putExportShape", "shapeIndex", valueShapeIndex);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putExportShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "putExportShape", "format");
            initialize("putExportShape", "format", valueFormat);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putExportShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putExportShape", "outPath");
            initialize("putExportShape", "outPath", valueOutPath);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putExportShape", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putExportShape", "password");
            initialize("putExportShape", "password", valuePassword);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putExportShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putExportShape", "storage");
            initialize("putExportShape", "storage", valueStorage);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putExportShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "putExportShape", "scaleX");
            initialize("putExportShape", "scaleX", valueScaleX);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "putExportShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "putExportShape", "scaleY");
            initialize("putExportShape", "scaleY", valueScaleY);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "putExportShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "putExportShape", "bounds");
            initialize("putExportShape", "bounds", valueBounds);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "putExportShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "putExportShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportShape", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putExportShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putExportShape", "format");
        String valueOutPath = (String)getTestValue("String", "putExportShape", "outPath");
        String valuePassword = (String)getTestValue("String", "putExportShape", "password");
        String valueStorage = (String)getTestValue("String", "putExportShape", "storage");
        Double valueScaleX = (Double)getTestValue("Double", "putExportShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putExportShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putExportShape", "bounds");
        String valueFontsFolder = (String)getTestValue("String", "putExportShape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putExportShape", "fontsFolder");
            initialize("putExportShape", "fontsFolder", valueFontsFolder);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valuePassword, valueStorage, valueScaleX, valueScaleY, valueBounds, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putExportShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putExportShape");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideTest() throws ApiException, Exception {
        initialize("putExportSlide", null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "putExportSlide", "document");
            initialize("putExportSlide", "document", valueDocument);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "putExportSlide", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putExportSlide", "slideIndex");
            initialize("putExportSlide", "slideIndex", valueSlideIndex);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putExportSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "putExportSlide", "format");
            initialize("putExportSlide", "format", valueFormat);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putExportSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putExportSlide", "outPath");
            initialize("putExportSlide", "outPath", valueOutPath);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putExportSlide", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "putExportSlide", "width");
            initialize("putExportSlide", "width", valueWidth);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "putExportSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "putExportSlide", "height");
            initialize("putExportSlide", "height", valueHeight);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "putExportSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putExportSlide", "password");
            initialize("putExportSlide", "password", valuePassword);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putExportSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putExportSlide", "storage");
            initialize("putExportSlide", "storage", valueStorage);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putExportSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putExportSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putExportSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putExportSlide", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putExportSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putExportSlide", "format");
        String valueOutPath = (String)getTestValue("String", "putExportSlide", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "putExportSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putExportSlide", "height");
        String valuePassword = (String)getTestValue("String", "putExportSlide", "password");
        String valueStorage = (String)getTestValue("String", "putExportSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putExportSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putExportSlide", "fontsFolder");
            initialize("putExportSlide", "fontsFolder", valueFontsFolder);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putExportSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putExportSlide");
        }
    }
    
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLayoutSlideTest() throws ApiException, Exception {
        initialize("putLayoutSlide", null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "putLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "putLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "putLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putLayoutSlide", "storage");
        response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "putLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "putLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putLayoutSlide", "name");
            initialize("putLayoutSlide", "name", valueName);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLayoutSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "putLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "putLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putLayoutSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putLayoutSlide", "slideIndex");
            initialize("putLayoutSlide", "slideIndex", valueSlideIndex);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putLayoutSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLayoutSlideInvalidSlideDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "putLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "putLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putLayoutSlide", "storage");
        try {
            valueSlideDto = (LayoutSlide)invalidizeTestValue("LayoutSlide", valueSlideDto, "putLayoutSlide", "slideDto");
            initialize("putLayoutSlide", "slideDto", valueSlideDto);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideDto", "putLayoutSlide", valueSlideDto);
        }
        if (needAssertResponse) {
            assertResponse("slideDto", "putLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "putLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "putLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putLayoutSlide", "password");
            initialize("putLayoutSlide", "password", valuePassword);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "putLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "putLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putLayoutSlide", "folder");
            initialize("putLayoutSlide", "folder", valueFolder);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "putLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "putLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putLayoutSlide", "storage");
            initialize("putLayoutSlide", "storage", valueStorage);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putLayoutSlide");
        }
    }
    
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("putNotesSlideHeaderFooter", null, null);
        NotesSlideHeaderFooter response = null;
        String valueName = (String)getTestValue("String", "putNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "putNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideHeaderFooter", "storage");
        response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "putNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putNotesSlideHeaderFooter", "name");
            initialize("putNotesSlideHeaderFooter", "name", valueName);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putNotesSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "putNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putNotesSlideHeaderFooter", "slideIndex");
            initialize("putNotesSlideHeaderFooter", "slideIndex", valueSlideIndex);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putNotesSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "putNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideHeaderFooter", "storage");
        try {
            valueDto = (NotesSlideHeaderFooter)invalidizeTestValue("NotesSlideHeaderFooter", valueDto, "putNotesSlideHeaderFooter", "dto");
            initialize("putNotesSlideHeaderFooter", "dto", valueDto);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putNotesSlideHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "putNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putNotesSlideHeaderFooter", "password");
            initialize("putNotesSlideHeaderFooter", "password", valuePassword);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putNotesSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "putNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putNotesSlideHeaderFooter", "folder");
            initialize("putNotesSlideHeaderFooter", "folder", valueFolder);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putNotesSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "putNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putNotesSlideHeaderFooter", "storage");
            initialize("putNotesSlideHeaderFooter", "storage", valueStorage);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putNotesSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putNotesSlideHeaderFooter");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsTest() throws ApiException, Exception {
        initialize("putNotesSlideShapeSaveAs", null, null);
        ;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putNotesSlideShapeSaveAs", "name");
            initialize("putNotesSlideShapeSaveAs", "name", valueName);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putNotesSlideShapeSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putNotesSlideShapeSaveAs", "slideIndex");
            initialize("putNotesSlideShapeSaveAs", "slideIndex", valueSlideIndex);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putNotesSlideShapeSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putNotesSlideShapeSaveAs", "shapeIndex");
            initialize("putNotesSlideShapeSaveAs", "shapeIndex", valueShapeIndex);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putNotesSlideShapeSaveAs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "putNotesSlideShapeSaveAs", "format");
            initialize("putNotesSlideShapeSaveAs", "format", valueFormat);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putNotesSlideShapeSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putNotesSlideShapeSaveAs", "outPath");
            initialize("putNotesSlideShapeSaveAs", "outPath", valueOutPath);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putNotesSlideShapeSaveAs", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "putNotesSlideShapeSaveAs", "options");
            initialize("putNotesSlideShapeSaveAs", "options", valueOptions);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "putNotesSlideShapeSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "putNotesSlideShapeSaveAs", "scaleX");
            initialize("putNotesSlideShapeSaveAs", "scaleX", valueScaleX);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "putNotesSlideShapeSaveAs", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "putNotesSlideShapeSaveAs", "scaleY");
            initialize("putNotesSlideShapeSaveAs", "scaleY", valueScaleY);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "putNotesSlideShapeSaveAs", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "putNotesSlideShapeSaveAs", "bounds");
            initialize("putNotesSlideShapeSaveAs", "bounds", valueBounds);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "putNotesSlideShapeSaveAs", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putNotesSlideShapeSaveAs", "password");
            initialize("putNotesSlideShapeSaveAs", "password", valuePassword);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putNotesSlideShapeSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putNotesSlideShapeSaveAs", "folder");
            initialize("putNotesSlideShapeSaveAs", "folder", valueFolder);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putNotesSlideShapeSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putNotesSlideShapeSaveAs", "storage");
            initialize("putNotesSlideShapeSaveAs", "storage", valueStorage);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putNotesSlideShapeSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putNotesSlideShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putNotesSlideShapeSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putNotesSlideShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putNotesSlideShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putNotesSlideShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putNotesSlideShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putNotesSlideShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putNotesSlideShapeSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putNotesSlideShapeSaveAs", "fontsFolder");
            initialize("putNotesSlideShapeSaveAs", "fontsFolder", valueFontsFolder);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putNotesSlideShapeSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putNotesSlideShapeSaveAs");
        }
    }
    
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationMergeTest() throws ApiException, Exception {
        initialize("putPresentationMerge", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "putPresentationMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "putPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "putPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "putPresentationMerge", "storage");
        response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationMergeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putPresentationMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "putPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "putPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "putPresentationMerge", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putPresentationMerge", "name");
            initialize("putPresentationMerge", "name", valueName);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putPresentationMerge", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationMergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putPresentationMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "putPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "putPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "putPresentationMerge", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "putPresentationMerge", "request");
            initialize("putPresentationMerge", "request", valueRequest);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "putPresentationMerge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "putPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationMergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putPresentationMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "putPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "putPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "putPresentationMerge", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putPresentationMerge", "password");
            initialize("putPresentationMerge", "password", valuePassword);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putPresentationMerge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationMergeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putPresentationMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "putPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "putPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "putPresentationMerge", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putPresentationMerge", "folder");
            initialize("putPresentationMerge", "folder", valueFolder);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putPresentationMerge", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putPresentationMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationMergeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putPresentationMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putPresentationMerge", "request");
        String valuePassword = (String)getTestValue("String", "putPresentationMerge", "password");
        String valueFolder = (String)getTestValue("String", "putPresentationMerge", "folder");
        String valueStorage = (String)getTestValue("String", "putPresentationMerge", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putPresentationMerge", "storage");
            initialize("putPresentationMerge", "storage", valueStorage);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putPresentationMerge", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putPresentationMerge");
        }
    }
    
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitTest() throws ApiException, Exception {
        initialize("putPresentationSplit", null, null);
        SplitDocumentResult response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "putPresentationSplit", "document");
            initialize("putPresentationSplit", "document", valueDocument);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "putPresentationSplit", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "putPresentationSplit", "format");
            initialize("putPresentationSplit", "format", valueFormat);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putPresentationSplit", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidDestFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueDestFolder = (String)invalidizeTestValue("String", valueDestFolder, "putPresentationSplit", "destFolder");
            initialize("putPresentationSplit", "destFolder", valueDestFolder);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destFolder", "putPresentationSplit", valueDestFolder);
        }
        if (needAssertResponse) {
            assertResponse("destFolder", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "putPresentationSplit", "width");
            initialize("putPresentationSplit", "width", valueWidth);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "putPresentationSplit", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "putPresentationSplit", "height");
            initialize("putPresentationSplit", "height", valueHeight);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "putPresentationSplit", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "putPresentationSplit", "from");
            initialize("putPresentationSplit", "from", valueFrom);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "from", "putPresentationSplit", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("from", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "putPresentationSplit", "to");
            initialize("putPresentationSplit", "to", valueTo);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "to", "putPresentationSplit", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("to", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putPresentationSplit", "password");
            initialize("putPresentationSplit", "password", valuePassword);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putPresentationSplit", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putPresentationSplit", "storage");
            initialize("putPresentationSplit", "storage", valueStorage);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putPresentationSplit", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putPresentationSplit");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putPresentationSplitInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putPresentationSplit", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putPresentationSplit", "format");
        String valueDestFolder = (String)getTestValue("String", "putPresentationSplit", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "putPresentationSplit", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putPresentationSplit", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "putPresentationSplit", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "putPresentationSplit", "to");
        String valuePassword = (String)getTestValue("String", "putPresentationSplit", "password");
        String valueStorage = (String)getTestValue("String", "putPresentationSplit", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putPresentationSplit", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putPresentationSplit", "fontsFolder");
            initialize("putPresentationSplit", "fontsFolder", valueFontsFolder);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putPresentationSplit", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putPresentationSplit");
        }
    }
    
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionTest() throws ApiException, Exception {
        initialize("putSection", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "putSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "putSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "putSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "putSection", "password");
        String valueFolder = (String)getTestValue("String", "putSection", "folder");
        String valueStorage = (String)getTestValue("String", "putSection", "storage");
        response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "putSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "putSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "putSection", "password");
        String valueFolder = (String)getTestValue("String", "putSection", "folder");
        String valueStorage = (String)getTestValue("String", "putSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSection", "name");
            initialize("putSection", "name", valueName);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "putSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "putSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "putSection", "password");
        String valueFolder = (String)getTestValue("String", "putSection", "folder");
        String valueStorage = (String)getTestValue("String", "putSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "putSection", "sectionIndex");
            initialize("putSection", "sectionIndex", valueSectionIndex);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionIndex", "putSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("sectionIndex", "putSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionInvalidSectionNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "putSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "putSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "putSection", "password");
        String valueFolder = (String)getTestValue("String", "putSection", "folder");
        String valueStorage = (String)getTestValue("String", "putSection", "storage");
        try {
            valueSectionName = (String)invalidizeTestValue("String", valueSectionName, "putSection", "sectionName");
            initialize("putSection", "sectionName", valueSectionName);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionName", "putSection", valueSectionName);
        }
        if (needAssertResponse) {
            assertResponse("sectionName", "putSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "putSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "putSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "putSection", "password");
        String valueFolder = (String)getTestValue("String", "putSection", "folder");
        String valueStorage = (String)getTestValue("String", "putSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSection", "password");
            initialize("putSection", "password", valuePassword);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "putSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "putSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "putSection", "password");
        String valueFolder = (String)getTestValue("String", "putSection", "folder");
        String valueStorage = (String)getTestValue("String", "putSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSection", "folder");
            initialize("putSection", "folder", valueFolder);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "putSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "putSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "putSection", "password");
        String valueFolder = (String)getTestValue("String", "putSection", "folder");
        String valueStorage = (String)getTestValue("String", "putSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSection", "storage");
            initialize("putSection", "storage", valueStorage);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSection");
        }
    }
    
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionsTest() throws ApiException, Exception {
        initialize("putSections", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "putSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "putSections", "sections");
        String valuePassword = (String)getTestValue("String", "putSections", "password");
        String valueFolder = (String)getTestValue("String", "putSections", "folder");
        String valueStorage = (String)getTestValue("String", "putSections", "storage");
        response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "putSections", "sections");
        String valuePassword = (String)getTestValue("String", "putSections", "password");
        String valueFolder = (String)getTestValue("String", "putSections", "folder");
        String valueStorage = (String)getTestValue("String", "putSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSections", "name");
            initialize("putSections", "name", valueName);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionsInvalidSectionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "putSections", "sections");
        String valuePassword = (String)getTestValue("String", "putSections", "password");
        String valueFolder = (String)getTestValue("String", "putSections", "folder");
        String valueStorage = (String)getTestValue("String", "putSections", "storage");
        try {
            valueSections = (Sections)invalidizeTestValue("Sections", valueSections, "putSections", "sections");
            initialize("putSections", "sections", valueSections);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sections", "putSections", valueSections);
        }
        if (needAssertResponse) {
            assertResponse("sections", "putSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "putSections", "sections");
        String valuePassword = (String)getTestValue("String", "putSections", "password");
        String valueFolder = (String)getTestValue("String", "putSections", "folder");
        String valueStorage = (String)getTestValue("String", "putSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSections", "password");
            initialize("putSections", "password", valuePassword);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "putSections", "sections");
        String valuePassword = (String)getTestValue("String", "putSections", "password");
        String valueFolder = (String)getTestValue("String", "putSections", "folder");
        String valueStorage = (String)getTestValue("String", "putSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSections", "folder");
            initialize("putSections", "folder", valueFolder);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "putSections", "sections");
        String valuePassword = (String)getTestValue("String", "putSections", "password");
        String valueFolder = (String)getTestValue("String", "putSections", "folder");
        String valueStorage = (String)getTestValue("String", "putSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSections", "storage");
            initialize("putSections", "storage", valueStorage);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSections");
        }
    }
    
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesTest() throws ApiException, Exception {
        initialize("putSetParagraphPortionProperties", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSetParagraphPortionProperties", "name");
            initialize("putSetParagraphPortionProperties", "name", valueName);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSetParagraphPortionProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSetParagraphPortionProperties", "slideIndex");
            initialize("putSetParagraphPortionProperties", "slideIndex", valueSlideIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSetParagraphPortionProperties", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putSetParagraphPortionProperties", "shapeIndex");
            initialize("putSetParagraphPortionProperties", "shapeIndex", valueShapeIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putSetParagraphPortionProperties", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "putSetParagraphPortionProperties", "paragraphIndex");
            initialize("putSetParagraphPortionProperties", "paragraphIndex", valueParagraphIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "putSetParagraphPortionProperties", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "putSetParagraphPortionProperties", "portionIndex");
            initialize("putSetParagraphPortionProperties", "portionIndex", valuePortionIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "putSetParagraphPortionProperties", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "putSetParagraphPortionProperties", "dto");
            initialize("putSetParagraphPortionProperties", "dto", valueDto);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSetParagraphPortionProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSetParagraphPortionProperties", "password");
            initialize("putSetParagraphPortionProperties", "password", valuePassword);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSetParagraphPortionProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSetParagraphPortionProperties", "folder");
            initialize("putSetParagraphPortionProperties", "folder", valueFolder);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSetParagraphPortionProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSetParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPortionPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphPortionProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSetParagraphPortionProperties", "storage");
            initialize("putSetParagraphPortionProperties", "storage", valueStorage);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSetParagraphPortionProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSetParagraphPortionProperties");
        }
    }
    
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesTest() throws ApiException, Exception {
        initialize("putSetParagraphProperties", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSetParagraphProperties", "name");
            initialize("putSetParagraphProperties", "name", valueName);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSetParagraphProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSetParagraphProperties");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSetParagraphProperties", "slideIndex");
            initialize("putSetParagraphProperties", "slideIndex", valueSlideIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSetParagraphProperties", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSetParagraphProperties");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putSetParagraphProperties", "shapeIndex");
            initialize("putSetParagraphProperties", "shapeIndex", valueShapeIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putSetParagraphProperties", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putSetParagraphProperties");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "putSetParagraphProperties", "paragraphIndex");
            initialize("putSetParagraphProperties", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "putSetParagraphProperties", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "putSetParagraphProperties");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "putSetParagraphProperties", "dto");
            initialize("putSetParagraphProperties", "dto", valueDto);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSetParagraphProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSetParagraphProperties");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSetParagraphProperties", "password");
            initialize("putSetParagraphProperties", "password", valuePassword);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSetParagraphProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSetParagraphProperties");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSetParagraphProperties", "folder");
            initialize("putSetParagraphProperties", "folder", valueFolder);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSetParagraphProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSetParagraphProperties");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetParagraphPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetParagraphProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSetParagraphProperties", "storage");
            initialize("putSetParagraphProperties", "storage", valueStorage);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSetParagraphProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSetParagraphProperties");
        }
    }
    
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesTest() throws ApiException, Exception {
        initialize("putSetSubshapeParagraphPortionProperties", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSetSubshapeParagraphPortionProperties", "name");
            initialize("putSetSubshapeParagraphPortionProperties", "name", valueName);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSetSubshapeParagraphPortionProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSetSubshapeParagraphPortionProperties", "slideIndex");
            initialize("putSetSubshapeParagraphPortionProperties", "slideIndex", valueSlideIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSetSubshapeParagraphPortionProperties", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "putSetSubshapeParagraphPortionProperties", "path");
            initialize("putSetSubshapeParagraphPortionProperties", "path", valuePath);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "putSetSubshapeParagraphPortionProperties", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putSetSubshapeParagraphPortionProperties", "shapeIndex");
            initialize("putSetSubshapeParagraphPortionProperties", "shapeIndex", valueShapeIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putSetSubshapeParagraphPortionProperties", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
            initialize("putSetSubshapeParagraphPortionProperties", "paragraphIndex", valueParagraphIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "putSetSubshapeParagraphPortionProperties", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "putSetSubshapeParagraphPortionProperties", "portionIndex");
            initialize("putSetSubshapeParagraphPortionProperties", "portionIndex", valuePortionIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "putSetSubshapeParagraphPortionProperties", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "putSetSubshapeParagraphPortionProperties", "dto");
            initialize("putSetSubshapeParagraphPortionProperties", "dto", valueDto);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSetSubshapeParagraphPortionProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSetSubshapeParagraphPortionProperties", "password");
            initialize("putSetSubshapeParagraphPortionProperties", "password", valuePassword);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSetSubshapeParagraphPortionProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSetSubshapeParagraphPortionProperties", "folder");
            initialize("putSetSubshapeParagraphPortionProperties", "folder", valueFolder);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSetSubshapeParagraphPortionProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSetSubshapeParagraphPortionProperties");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPortionPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphPortionProperties", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putSetSubshapeParagraphPortionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphPortionProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSetSubshapeParagraphPortionProperties", "storage");
            initialize("putSetSubshapeParagraphPortionProperties", "storage", valueStorage);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSetSubshapeParagraphPortionProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSetSubshapeParagraphPortionProperties");
        }
    }
    
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesTest() throws ApiException, Exception {
        initialize("putSetSubshapeParagraphProperties", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSetSubshapeParagraphProperties", "name");
            initialize("putSetSubshapeParagraphProperties", "name", valueName);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSetSubshapeParagraphProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSetSubshapeParagraphProperties", "slideIndex");
            initialize("putSetSubshapeParagraphProperties", "slideIndex", valueSlideIndex);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSetSubshapeParagraphProperties", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "putSetSubshapeParagraphProperties", "path");
            initialize("putSetSubshapeParagraphProperties", "path", valuePath);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "putSetSubshapeParagraphProperties", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putSetSubshapeParagraphProperties", "shapeIndex");
            initialize("putSetSubshapeParagraphProperties", "shapeIndex", valueShapeIndex);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putSetSubshapeParagraphProperties", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "putSetSubshapeParagraphProperties", "paragraphIndex");
            initialize("putSetSubshapeParagraphProperties", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "putSetSubshapeParagraphProperties", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "putSetSubshapeParagraphProperties", "dto");
            initialize("putSetSubshapeParagraphProperties", "dto", valueDto);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSetSubshapeParagraphProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSetSubshapeParagraphProperties", "password");
            initialize("putSetSubshapeParagraphProperties", "password", valuePassword);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSetSubshapeParagraphProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSetSubshapeParagraphProperties", "folder");
            initialize("putSetSubshapeParagraphProperties", "folder", valueFolder);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSetSubshapeParagraphProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSetSubshapeParagraphProperties");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSetSubshapeParagraphPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putSetSubshapeParagraphProperties", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putSetSubshapeParagraphProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSetSubshapeParagraphProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSetSubshapeParagraphProperties", "storage");
            initialize("putSetSubshapeParagraphProperties", "storage", valueStorage);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSetSubshapeParagraphProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSetSubshapeParagraphProperties");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsTest() throws ApiException, Exception {
        initialize("putShapeSaveAs", null, null);
        ;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putShapeSaveAs", "name");
            initialize("putShapeSaveAs", "name", valueName);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putShapeSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putShapeSaveAs", "slideIndex");
            initialize("putShapeSaveAs", "slideIndex", valueSlideIndex);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putShapeSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putShapeSaveAs", "shapeIndex");
            initialize("putShapeSaveAs", "shapeIndex", valueShapeIndex);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putShapeSaveAs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "putShapeSaveAs", "format");
            initialize("putShapeSaveAs", "format", valueFormat);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putShapeSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putShapeSaveAs", "outPath");
            initialize("putShapeSaveAs", "outPath", valueOutPath);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putShapeSaveAs", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "putShapeSaveAs", "options");
            initialize("putShapeSaveAs", "options", valueOptions);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "putShapeSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "putShapeSaveAs", "scaleX");
            initialize("putShapeSaveAs", "scaleX", valueScaleX);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "putShapeSaveAs", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "putShapeSaveAs", "scaleY");
            initialize("putShapeSaveAs", "scaleY", valueScaleY);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "putShapeSaveAs", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "putShapeSaveAs", "bounds");
            initialize("putShapeSaveAs", "bounds", valueBounds);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "putShapeSaveAs", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putShapeSaveAs", "password");
            initialize("putShapeSaveAs", "password", valuePassword);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putShapeSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putShapeSaveAs", "folder");
            initialize("putShapeSaveAs", "folder", valueFolder);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putShapeSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putShapeSaveAs", "storage");
            initialize("putShapeSaveAs", "storage", valueStorage);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putShapeSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putShapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putShapeSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putShapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putShapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putShapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putShapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putShapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putShapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putShapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putShapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putShapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putShapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putShapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putShapeSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putShapeSaveAs", "fontsFolder");
            initialize("putShapeSaveAs", "fontsFolder", valueFontsFolder);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putShapeSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putShapeSaveAs");
        }
    }
    
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationTest() throws ApiException, Exception {
        initialize("putSlideAnimation", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "putSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "putSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "putSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimation", "storage");
        response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "putSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "putSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlideAnimation", "name");
            initialize("putSlideAnimation", "name", valueName);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlideAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlideAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "putSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "putSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlideAnimation", "slideIndex");
            initialize("putSlideAnimation", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlideAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlideAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInvalidAnimationTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "putSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "putSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimation", "storage");
        try {
            valueAnimation = (SlideAnimation)invalidizeTestValue("SlideAnimation", valueAnimation, "putSlideAnimation", "animation");
            initialize("putSlideAnimation", "animation", valueAnimation);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "animation", "putSlideAnimation", valueAnimation);
        }
        if (needAssertResponse) {
            assertResponse("animation", "putSlideAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "putSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "putSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlideAnimation", "password");
            initialize("putSlideAnimation", "password", valuePassword);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlideAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlideAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "putSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "putSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlideAnimation", "folder");
            initialize("putSlideAnimation", "folder", valueFolder);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlideAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlideAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "putSlideAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "putSlideAnimation", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlideAnimation", "storage");
            initialize("putSlideAnimation", "storage", valueStorage);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlideAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlideAnimation");
        }
    }
    
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectTest() throws ApiException, Exception {
        initialize("putSlideAnimationEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlideAnimationEffect", "name");
            initialize("putSlideAnimationEffect", "name", valueName);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlideAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlideAnimationEffect", "slideIndex");
            initialize("putSlideAnimationEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlideAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "putSlideAnimationEffect", "effectIndex");
            initialize("putSlideAnimationEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "putSlideAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "putSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "putSlideAnimationEffect", "effect");
            initialize("putSlideAnimationEffect", "effect", valueEffect);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "putSlideAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "putSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlideAnimationEffect", "password");
            initialize("putSlideAnimationEffect", "password", valuePassword);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlideAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlideAnimationEffect", "folder");
            initialize("putSlideAnimationEffect", "folder", valueFolder);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlideAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlideAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlideAnimationEffect", "storage");
            initialize("putSlideAnimationEffect", "storage", valueStorage);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlideAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlideAnimationEffect");
        }
    }
    
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("putSlideAnimationInteractiveSequenceEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlideAnimationInteractiveSequenceEffect", "name");
            initialize("putSlideAnimationInteractiveSequenceEffect", "name", valueName);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlideAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("putSlideAnimationInteractiveSequenceEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlideAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("putSlideAnimationInteractiveSequenceEffect", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "putSlideAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("putSlideAnimationInteractiveSequenceEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "putSlideAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "putSlideAnimationInteractiveSequenceEffect", "effect");
            initialize("putSlideAnimationInteractiveSequenceEffect", "effect", valueEffect);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "putSlideAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlideAnimationInteractiveSequenceEffect", "password");
            initialize("putSlideAnimationInteractiveSequenceEffect", "password", valuePassword);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlideAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlideAnimationInteractiveSequenceEffect", "folder");
            initialize("putSlideAnimationInteractiveSequenceEffect", "folder", valueFolder);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlideAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "putSlideAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "putSlideAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlideAnimationInteractiveSequenceEffect", "storage");
            initialize("putSlideAnimationInteractiveSequenceEffect", "storage", valueStorage);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlideAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlideAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("putSlideHeaderFooter", null, null);
        HeaderFooter response = null;
        String valueName = (String)getTestValue("String", "putSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideHeaderFooter", "storage");
        response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlideHeaderFooter", "name");
            initialize("putSlideHeaderFooter", "name", valueName);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlideHeaderFooter", "slideIndex");
            initialize("putSlideHeaderFooter", "slideIndex", valueSlideIndex);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideHeaderFooter", "storage");
        try {
            valueDto = (HeaderFooter)invalidizeTestValue("HeaderFooter", valueDto, "putSlideHeaderFooter", "dto");
            initialize("putSlideHeaderFooter", "dto", valueDto);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSlideHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlideHeaderFooter", "password");
            initialize("putSlideHeaderFooter", "password", valuePassword);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlideHeaderFooter", "folder");
            initialize("putSlideHeaderFooter", "folder", valueFolder);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlideHeaderFooter", "storage");
            initialize("putSlideHeaderFooter", "storage", valueStorage);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlideHeaderFooter");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsTest() throws ApiException, Exception {
        initialize("putSlideSaveAs", null, null);
        ;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlideSaveAs", "name");
            initialize("putSlideSaveAs", "name", valueName);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlideSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlideSaveAs", "slideIndex");
            initialize("putSlideSaveAs", "slideIndex", valueSlideIndex);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlideSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "putSlideSaveAs", "format");
            initialize("putSlideSaveAs", "format", valueFormat);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putSlideSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putSlideSaveAs", "outPath");
            initialize("putSlideSaveAs", "outPath", valueOutPath);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putSlideSaveAs", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "putSlideSaveAs", "options");
            initialize("putSlideSaveAs", "options", valueOptions);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "putSlideSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "putSlideSaveAs", "width");
            initialize("putSlideSaveAs", "width", valueWidth);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "putSlideSaveAs", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "putSlideSaveAs", "height");
            initialize("putSlideSaveAs", "height", valueHeight);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "putSlideSaveAs", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlideSaveAs", "password");
            initialize("putSlideSaveAs", "password", valuePassword);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlideSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlideSaveAs", "folder");
            initialize("putSlideSaveAs", "folder", valueFolder);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlideSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlideSaveAs", "storage");
            initialize("putSlideSaveAs", "storage", valueStorage);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlideSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlideSaveAs");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSaveAs", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "putSlideSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlideSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlideSaveAs", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlideSaveAs", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlideSaveAs", "height");
        String valuePassword = (String)getTestValue("String", "putSlideSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlideSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putSlideSaveAs", "fontsFolder");
            initialize("putSlideSaveAs", "fontsFolder", valueFontsFolder);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putSlideSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putSlideSaveAs");
        }
    }
    
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoTest() throws ApiException, Exception {
        initialize("putSlideShapeInfo", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlideShapeInfo", "name");
            initialize("putSlideShapeInfo", "name", valueName);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlideShapeInfo", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlideShapeInfo");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlideShapeInfo", "slideIndex");
            initialize("putSlideShapeInfo", "slideIndex", valueSlideIndex);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlideShapeInfo", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlideShapeInfo");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putSlideShapeInfo", "shapeIndex");
            initialize("putSlideShapeInfo", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putSlideShapeInfo", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putSlideShapeInfo");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "putSlideShapeInfo", "dto");
            initialize("putSlideShapeInfo", "dto", valueDto);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSlideShapeInfo", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSlideShapeInfo");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlideShapeInfo", "password");
            initialize("putSlideShapeInfo", "password", valuePassword);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlideShapeInfo", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlideShapeInfo");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlideShapeInfo", "folder");
            initialize("putSlideShapeInfo", "folder", valueFolder);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlideShapeInfo", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlideShapeInfo");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideShapeInfoInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideShapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideShapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideShapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideShapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideShapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideShapeInfo", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlideShapeInfo", "storage");
            initialize("putSlideShapeInfo", "storage", valueStorage);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlideShapeInfo", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlideShapeInfo");
        }
    }
    
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoTest() throws ApiException, Exception {
        initialize("putSlideSubshapeInfo", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlideSubshapeInfo", "name");
            initialize("putSlideSubshapeInfo", "name", valueName);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlideSubshapeInfo", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlideSubshapeInfo");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlideSubshapeInfo", "slideIndex");
            initialize("putSlideSubshapeInfo", "slideIndex", valueSlideIndex);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlideSubshapeInfo", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlideSubshapeInfo");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "putSlideSubshapeInfo", "path");
            initialize("putSlideSubshapeInfo", "path", valuePath);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "putSlideSubshapeInfo", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "putSlideSubshapeInfo");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putSlideSubshapeInfo", "shapeIndex");
            initialize("putSlideSubshapeInfo", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putSlideSubshapeInfo", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putSlideSubshapeInfo");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "putSlideSubshapeInfo", "dto");
            initialize("putSlideSubshapeInfo", "dto", valueDto);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSlideSubshapeInfo", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSlideSubshapeInfo");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlideSubshapeInfo", "password");
            initialize("putSlideSubshapeInfo", "password", valuePassword);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlideSubshapeInfo", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlideSubshapeInfo");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlideSubshapeInfo", "folder");
            initialize("putSlideSubshapeInfo", "folder", valueFolder);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlideSubshapeInfo", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlideSubshapeInfo");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlideSubshapeInfoInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlideSubshapeInfo", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSlideSubshapeInfo", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSlideSubshapeInfo", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putSlideSubshapeInfo", "dto");
        String valuePassword = (String)getTestValue("String", "putSlideSubshapeInfo", "password");
        String valueFolder = (String)getTestValue("String", "putSlideSubshapeInfo", "folder");
        String valueStorage = (String)getTestValue("String", "putSlideSubshapeInfo", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlideSubshapeInfo", "storage");
            initialize("putSlideSubshapeInfo", "storage", valueStorage);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlideSubshapeInfo", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlideSubshapeInfo");
        }
    }
    
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesConvertTest() throws ApiException, Exception {
        initialize("putSlidesConvert", null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesConvert", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesConvert", "outPath");
        String valuePassword = (String)getTestValue("String", "putSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesConvert", "fontsFolder");
        api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder);
    }

    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesConvertInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesConvert", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesConvert", "outPath");
        String valuePassword = (String)getTestValue("String", "putSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesConvert", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "putSlidesConvert", "document");
            initialize("putSlidesConvert", "document", valueDocument);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "putSlidesConvert", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "putSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesConvertInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesConvert", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesConvert", "outPath");
        String valuePassword = (String)getTestValue("String", "putSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesConvert", "fontsFolder");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "putSlidesConvert", "format");
            initialize("putSlidesConvert", "format", valueFormat);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putSlidesConvert", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesConvertInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesConvert", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesConvert", "outPath");
        String valuePassword = (String)getTestValue("String", "putSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesConvert", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putSlidesConvert", "outPath");
            initialize("putSlidesConvert", "outPath", valueOutPath);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putSlidesConvert", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesConvertInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesConvert", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesConvert", "outPath");
        String valuePassword = (String)getTestValue("String", "putSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesConvert", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesConvert", "password");
            initialize("putSlidesConvert", "password", valuePassword);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesConvert", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesConvertInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesConvert", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesConvert", "outPath");
        String valuePassword = (String)getTestValue("String", "putSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesConvert", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesConvert", "storage");
            initialize("putSlidesConvert", "storage", valueStorage);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesConvert", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesConvert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesConvertInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "putSlidesConvert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesConvert", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesConvert", "outPath");
        String valuePassword = (String)getTestValue("String", "putSlidesConvert", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesConvert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesConvert", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putSlidesConvert", "fontsFolder");
            initialize("putSlidesConvert", "fontsFolder", valueFontsFolder);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putSlidesConvert", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putSlidesConvert");
        }
    }
    
    /**
     * Update presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesDocumentFromHtmlTest() throws ApiException, Exception {
        initialize("putSlidesDocumentFromHtml", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "putSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "putSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "putSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesDocumentFromHtml", "storage");
        response = api.putSlidesDocumentFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesDocumentFromHtmlInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "putSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "putSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesDocumentFromHtml", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesDocumentFromHtml", "name");
            initialize("putSlidesDocumentFromHtml", "name", valueName);
            Document response = api.putSlidesDocumentFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesDocumentFromHtml", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesDocumentFromHtml");
        }
    }
    /**
     * Update presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesDocumentFromHtmlInvalidHtmlTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "putSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "putSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesDocumentFromHtml", "storage");
        try {
            valueHtml = (String)invalidizeTestValue("String", valueHtml, "putSlidesDocumentFromHtml", "html");
            initialize("putSlidesDocumentFromHtml", "html", valueHtml);
            Document response = api.putSlidesDocumentFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "html", "putSlidesDocumentFromHtml", valueHtml);
        }
        if (needAssertResponse) {
            assertResponse("html", "putSlidesDocumentFromHtml");
        }
    }
    /**
     * Update presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesDocumentFromHtmlInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "putSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "putSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesDocumentFromHtml", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesDocumentFromHtml", "password");
            initialize("putSlidesDocumentFromHtml", "password", valuePassword);
            Document response = api.putSlidesDocumentFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesDocumentFromHtml", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesDocumentFromHtml");
        }
    }
    /**
     * Update presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesDocumentFromHtmlInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "putSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "putSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesDocumentFromHtml", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesDocumentFromHtml", "folder");
            initialize("putSlidesDocumentFromHtml", "folder", valueFolder);
            Document response = api.putSlidesDocumentFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesDocumentFromHtml", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesDocumentFromHtml");
        }
    }
    /**
     * Update presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesDocumentFromHtmlInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesDocumentFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "putSlidesDocumentFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "putSlidesDocumentFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesDocumentFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesDocumentFromHtml", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesDocumentFromHtml", "storage");
            initialize("putSlidesDocumentFromHtml", "storage", valueStorage);
            Document response = api.putSlidesDocumentFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesDocumentFromHtml", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesDocumentFromHtml");
        }
    }
    
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesHeaderFooterTest() throws ApiException, Exception {
        initialize("putSlidesHeaderFooter", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "putSlidesHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlidesHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesHeaderFooter", "storage");
        response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlidesHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesHeaderFooter", "name");
            initialize("putSlidesHeaderFooter", "name", valueName);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlidesHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesHeaderFooter", "storage");
        try {
            valueDto = (HeaderFooter)invalidizeTestValue("HeaderFooter", valueDto, "putSlidesHeaderFooter", "dto");
            initialize("putSlidesHeaderFooter", "dto", valueDto);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSlidesHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSlidesHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlidesHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesHeaderFooter", "password");
            initialize("putSlidesHeaderFooter", "password", valuePassword);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlidesHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesHeaderFooter", "folder");
            initialize("putSlidesHeaderFooter", "folder", valueFolder);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "putSlidesHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesHeaderFooter", "storage");
            initialize("putSlidesHeaderFooter", "storage", valueStorage);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesHeaderFooter");
        }
    }
    
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesMergeTest() throws ApiException, Exception {
        initialize("putSlidesMerge", null, null);
        ;
        String valueOutPath = (String)getTestValue("String", "putSlidesMerge", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "putSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "putSlidesMerge", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesMerge", "storage");
        api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valuePassword, valueStorage);
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesMergeInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "putSlidesMerge", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "putSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "putSlidesMerge", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesMerge", "storage");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putSlidesMerge", "outPath");
            initialize("putSlidesMerge", "outPath", valueOutPath);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valuePassword, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putSlidesMerge", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putSlidesMerge");
        }
    }
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesMergeInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "putSlidesMerge", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "putSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "putSlidesMerge", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesMerge", "storage");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "putSlidesMerge", "files");
            initialize("putSlidesMerge", "files", valueFiles);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valuePassword, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "files", "putSlidesMerge", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("files", "putSlidesMerge");
        }
    }
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesMergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "putSlidesMerge", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "putSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "putSlidesMerge", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesMerge", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "putSlidesMerge", "request");
            initialize("putSlidesMerge", "request", valueRequest);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valuePassword, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "putSlidesMerge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "putSlidesMerge");
        }
    }
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesMergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "putSlidesMerge", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "putSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "putSlidesMerge", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesMerge", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesMerge", "password");
            initialize("putSlidesMerge", "password", valuePassword);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valuePassword, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesMerge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesMerge");
        }
    }
    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesMergeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "putSlidesMerge", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "putSlidesMerge", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "putSlidesMerge", "request");
        String valuePassword = (String)getTestValue("String", "putSlidesMerge", "password");
        String valueStorage = (String)getTestValue("String", "putSlidesMerge", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesMerge", "storage");
            initialize("putSlidesMerge", "storage", valueStorage);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valuePassword, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesMerge", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesMerge");
        }
    }
    
    /**
     * Update presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesProtectionPropertiesTest() throws ApiException, Exception {
        initialize("putSlidesProtectionProperties", null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "putSlidesProtectionProperties", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "putSlidesProtectionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesProtectionProperties", "storage");
        response = api.setProtectionProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesProtectionPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesProtectionProperties", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "putSlidesProtectionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesProtectionProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesProtectionProperties", "name");
            initialize("putSlidesProtectionProperties", "name", valueName);
            ProtectionProperties response = api.setProtectionProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesProtectionProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesProtectionProperties");
        }
    }
    /**
     * Update presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesProtectionPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesProtectionProperties", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "putSlidesProtectionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesProtectionProperties", "storage");
        try {
            valueDto = (ProtectionProperties)invalidizeTestValue("ProtectionProperties", valueDto, "putSlidesProtectionProperties", "dto");
            initialize("putSlidesProtectionProperties", "dto", valueDto);
            ProtectionProperties response = api.setProtectionProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSlidesProtectionProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSlidesProtectionProperties");
        }
    }
    /**
     * Update presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesProtectionPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesProtectionProperties", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "putSlidesProtectionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesProtectionProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesProtectionProperties", "password");
            initialize("putSlidesProtectionProperties", "password", valuePassword);
            ProtectionProperties response = api.setProtectionProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesProtectionProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesProtectionProperties");
        }
    }
    /**
     * Update presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesProtectionPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesProtectionProperties", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "putSlidesProtectionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesProtectionProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesProtectionProperties", "folder");
            initialize("putSlidesProtectionProperties", "folder", valueFolder);
            ProtectionProperties response = api.setProtectionProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesProtectionProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesProtectionProperties");
        }
    }
    /**
     * Update presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesProtectionPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesProtectionProperties", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "putSlidesProtectionProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesProtectionProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesProtectionProperties", "storage");
            initialize("putSlidesProtectionProperties", "storage", valueStorage);
            ProtectionProperties response = api.setProtectionProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesProtectionProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesProtectionProperties");
        }
    }
    
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsTest() throws ApiException, Exception {
        initialize("putSlidesSaveAs", null, null);
        ;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesSaveAs", "name");
            initialize("putSlidesSaveAs", "name", valueName);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "putSlidesSaveAs", "format");
            initialize("putSlidesSaveAs", "format", valueFormat);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putSlidesSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putSlidesSaveAs", "outPath");
            initialize("putSlidesSaveAs", "outPath", valueOutPath);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putSlidesSaveAs", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "putSlidesSaveAs", "options");
            initialize("putSlidesSaveAs", "options", valueOptions);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "putSlidesSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "putSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesSaveAs", "password");
            initialize("putSlidesSaveAs", "password", valuePassword);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesSaveAs", "folder");
            initialize("putSlidesSaveAs", "folder", valueFolder);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesSaveAs", "storage");
            initialize("putSlidesSaveAs", "storage", valueStorage);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesSaveAs");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSaveAs", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "putSlidesSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSlidesSaveAs", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "putSlidesSaveAs", "options");
        String valuePassword = (String)getTestValue("String", "putSlidesSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSlidesSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putSlidesSaveAs", "fontsFolder");
            initialize("putSlidesSaveAs", "fontsFolder", valueFontsFolder);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putSlidesSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putSlidesSaveAs");
        }
    }
    
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSetDocumentPropertyTest() throws ApiException, Exception {
        initialize("putSlidesSetDocumentProperty", null, null);
        DocumentProperty response = null;
        String valueName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "putSlidesSetDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "putSlidesSetDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSetDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSetDocumentProperty", "storage");
        response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSetDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "putSlidesSetDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "putSlidesSetDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSetDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSetDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesSetDocumentProperty", "name");
            initialize("putSlidesSetDocumentProperty", "name", valueName);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesSetDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesSetDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSetDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "putSlidesSetDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "putSlidesSetDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSetDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSetDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "putSlidesSetDocumentProperty", "propertyName");
            initialize("putSlidesSetDocumentProperty", "propertyName", valuePropertyName);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "propertyName", "putSlidesSetDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("propertyName", "putSlidesSetDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSetDocumentPropertyInvalidPropertyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "putSlidesSetDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "putSlidesSetDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSetDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSetDocumentProperty", "storage");
        try {
            valueProperty = (DocumentProperty)invalidizeTestValue("DocumentProperty", valueProperty, "putSlidesSetDocumentProperty", "property");
            initialize("putSlidesSetDocumentProperty", "property", valueProperty);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "property", "putSlidesSetDocumentProperty", valueProperty);
        }
        if (needAssertResponse) {
            assertResponse("property", "putSlidesSetDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSetDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "putSlidesSetDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "putSlidesSetDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSetDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSetDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesSetDocumentProperty", "password");
            initialize("putSlidesSetDocumentProperty", "password", valuePassword);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesSetDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesSetDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSetDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "putSlidesSetDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "putSlidesSetDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSetDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSetDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesSetDocumentProperty", "folder");
            initialize("putSlidesSetDocumentProperty", "folder", valueFolder);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesSetDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesSetDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSetDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "putSlidesSetDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "putSlidesSetDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "putSlidesSetDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSetDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSetDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesSetDocumentProperty", "storage");
            initialize("putSlidesSetDocumentProperty", "storage", valueStorage);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesSetDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesSetDocumentProperty");
        }
    }
    
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideTest() throws ApiException, Exception {
        initialize("putSlidesSlide", null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "putSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "putSlidesSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlide", "storage");
        response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "putSlidesSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesSlide", "name");
            initialize("putSlidesSlide", "name", valueName);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "putSlidesSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlidesSlide", "slideIndex");
            initialize("putSlidesSlide", "slideIndex", valueSlideIndex);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlidesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlidesSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideInvalidSlideDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "putSlidesSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlide", "storage");
        try {
            valueSlideDto = (Slide)invalidizeTestValue("Slide", valueSlideDto, "putSlidesSlide", "slideDto");
            initialize("putSlidesSlide", "slideDto", valueSlideDto);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideDto", "putSlidesSlide", valueSlideDto);
        }
        if (needAssertResponse) {
            assertResponse("slideDto", "putSlidesSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "putSlidesSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesSlide", "password");
            initialize("putSlidesSlide", "password", valuePassword);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "putSlidesSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesSlide", "folder");
            initialize("putSlidesSlide", "folder", valueFolder);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "putSlidesSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesSlide", "storage");
            initialize("putSlidesSlide", "storage", valueStorage);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesSlide");
        }
    }
    
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundTest() throws ApiException, Exception {
        initialize("putSlidesSlideBackground", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "putSlidesSlideBackground", "background");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackground", "storage");
        response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "putSlidesSlideBackground", "background");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesSlideBackground", "name");
            initialize("putSlidesSlideBackground", "name", valueName);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesSlideBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesSlideBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "putSlidesSlideBackground", "background");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlidesSlideBackground", "slideIndex");
            initialize("putSlidesSlideBackground", "slideIndex", valueSlideIndex);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlidesSlideBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlidesSlideBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundInvalidBackgroundTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "putSlidesSlideBackground", "background");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackground", "storage");
        try {
            valueBackground = (SlideBackground)invalidizeTestValue("SlideBackground", valueBackground, "putSlidesSlideBackground", "background");
            initialize("putSlidesSlideBackground", "background", valueBackground);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "background", "putSlidesSlideBackground", valueBackground);
        }
        if (needAssertResponse) {
            assertResponse("background", "putSlidesSlideBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "putSlidesSlideBackground", "background");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesSlideBackground", "password");
            initialize("putSlidesSlideBackground", "password", valuePassword);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesSlideBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesSlideBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "putSlidesSlideBackground", "background");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesSlideBackground", "folder");
            initialize("putSlidesSlideBackground", "folder", valueFolder);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesSlideBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesSlideBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "putSlidesSlideBackground", "background");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackground", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackground", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesSlideBackground", "storage");
            initialize("putSlidesSlideBackground", "storage", valueStorage);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesSlideBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesSlideBackground");
        }
    }
    
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundColorTest() throws ApiException, Exception {
        initialize("putSlidesSlideBackgroundColor", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "storage");
        response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundColorInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesSlideBackgroundColor", "name");
            initialize("putSlidesSlideBackgroundColor", "name", valueName);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesSlideBackgroundColor", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesSlideBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundColorInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSlidesSlideBackgroundColor", "slideIndex");
            initialize("putSlidesSlideBackgroundColor", "slideIndex", valueSlideIndex);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSlidesSlideBackgroundColor", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSlidesSlideBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundColorInvalidColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "storage");
        try {
            valueColor = (String)invalidizeTestValue("String", valueColor, "putSlidesSlideBackgroundColor", "color");
            initialize("putSlidesSlideBackgroundColor", "color", valueColor);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "color", "putSlidesSlideBackgroundColor", valueColor);
        }
        if (needAssertResponse) {
            assertResponse("color", "putSlidesSlideBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundColorInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesSlideBackgroundColor", "password");
            initialize("putSlidesSlideBackgroundColor", "password", valuePassword);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesSlideBackgroundColor", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesSlideBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundColorInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesSlideBackgroundColor", "folder");
            initialize("putSlidesSlideBackgroundColor", "folder", valueFolder);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesSlideBackgroundColor", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesSlideBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideBackgroundColorInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSlidesSlideBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideBackgroundColor", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesSlideBackgroundColor", "storage");
            initialize("putSlidesSlideBackgroundColor", "storage", valueStorage);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesSlideBackgroundColor", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesSlideBackgroundColor");
        }
    }
    
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlidePropertiesTest() throws ApiException, Exception {
        initialize("putSlidesSlideProperties", null, null);
        SlideProperties response = null;
        String valueName = (String)getTestValue("String", "putSlidesSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "putSlidesSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideProperties", "storage");
        response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlidePropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "putSlidesSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesSlideProperties", "name");
            initialize("putSlidesSlideProperties", "name", valueName);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesSlideProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlidePropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "putSlidesSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideProperties", "storage");
        try {
            valueDto = (SlideProperties)invalidizeTestValue("SlideProperties", valueDto, "putSlidesSlideProperties", "dto");
            initialize("putSlidesSlideProperties", "dto", valueDto);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSlidesSlideProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSlidesSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlidePropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "putSlidesSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesSlideProperties", "password");
            initialize("putSlidesSlideProperties", "password", valuePassword);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesSlideProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlidePropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "putSlidesSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesSlideProperties", "folder");
            initialize("putSlidesSlideProperties", "folder", valueFolder);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesSlideProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlidePropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "putSlidesSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesSlideProperties", "storage");
            initialize("putSlidesSlideProperties", "storage", valueStorage);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesSlideProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesSlideProperties");
        }
    }
    
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeTest() throws ApiException, Exception {
        initialize("putSlidesSlideSize", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesSlideSize", "name");
            initialize("putSlidesSlideSize", "name", valueName);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesSlideSize", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesSlideSize");
        }
    }
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "putSlidesSlideSize", "width");
            initialize("putSlidesSlideSize", "width", valueWidth);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "putSlidesSlideSize", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "putSlidesSlideSize");
        }
    }
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "putSlidesSlideSize", "height");
            initialize("putSlidesSlideSize", "height", valueHeight);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "putSlidesSlideSize", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "putSlidesSlideSize");
        }
    }
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidSizeTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valueSizeType = (SizeType)invalidizeTestValue("SizeType", valueSizeType, "putSlidesSlideSize", "sizeType");
            initialize("putSlidesSlideSize", "sizeType", valueSizeType);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sizeType", "putSlidesSlideSize", valueSizeType);
        }
        if (needAssertResponse) {
            assertResponse("sizeType", "putSlidesSlideSize");
        }
    }
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidScaleTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valueScaleType = (ScaleType)invalidizeTestValue("ScaleType", valueScaleType, "putSlidesSlideSize", "scaleType");
            initialize("putSlidesSlideSize", "scaleType", valueScaleType);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleType", "putSlidesSlideSize", valueScaleType);
        }
        if (needAssertResponse) {
            assertResponse("scaleType", "putSlidesSlideSize");
        }
    }
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesSlideSize", "password");
            initialize("putSlidesSlideSize", "password", valuePassword);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesSlideSize", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesSlideSize");
        }
    }
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesSlideSize", "folder");
            initialize("putSlidesSlideSize", "folder", valueFolder);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesSlideSize", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesSlideSize");
        }
    }
    /**
     * Set slide size for a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesSlideSizeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesSlideSize", "name");
        Integer valueWidth = (Integer)getTestValue("Integer", "putSlidesSlideSize", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "putSlidesSlideSize", "height");
        SizeType valueSizeType = (SizeType)getTestValue("SizeType", "putSlidesSlideSize", "sizeType");
        ScaleType valueScaleType = (ScaleType)getTestValue("ScaleType", "putSlidesSlideSize", "scaleType");
        String valuePassword = (String)getTestValue("String", "putSlidesSlideSize", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesSlideSize", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesSlideSize", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesSlideSize", "storage");
            initialize("putSlidesSlideSize", "storage", valueStorage);
            Document response = api.putSlidesSlideSize(valueName, valueWidth, valueHeight, valueSizeType, valueScaleType, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesSlideSize", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesSlideSize");
        }
    }
    
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesViewPropertiesTest() throws ApiException, Exception {
        initialize("putSlidesViewProperties", null, null);
        ViewProperties response = null;
        String valueName = (String)getTestValue("String", "putSlidesViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "putSlidesViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesViewProperties", "storage");
        response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesViewPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "putSlidesViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesViewProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSlidesViewProperties", "name");
            initialize("putSlidesViewProperties", "name", valueName);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSlidesViewProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSlidesViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesViewPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "putSlidesViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesViewProperties", "storage");
        try {
            valueDto = (ViewProperties)invalidizeTestValue("ViewProperties", valueDto, "putSlidesViewProperties", "dto");
            initialize("putSlidesViewProperties", "dto", valueDto);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putSlidesViewProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putSlidesViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesViewPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "putSlidesViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesViewProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSlidesViewProperties", "password");
            initialize("putSlidesViewProperties", "password", valuePassword);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSlidesViewProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSlidesViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesViewPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "putSlidesViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesViewProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSlidesViewProperties", "folder");
            initialize("putSlidesViewProperties", "folder", valueFolder);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSlidesViewProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSlidesViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSlidesViewPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSlidesViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "putSlidesViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "putSlidesViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "putSlidesViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "putSlidesViewProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSlidesViewProperties", "storage");
            initialize("putSlidesViewProperties", "storage", valueStorage);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSlidesViewProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSlidesViewProperties");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsTest() throws ApiException, Exception {
        initialize("putSubshapeSaveAs", null, null);
        ;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putSubshapeSaveAs", "name");
            initialize("putSubshapeSaveAs", "name", valueName);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putSubshapeSaveAs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putSubshapeSaveAs", "slideIndex");
            initialize("putSubshapeSaveAs", "slideIndex", valueSlideIndex);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putSubshapeSaveAs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "putSubshapeSaveAs", "path");
            initialize("putSubshapeSaveAs", "path", valuePath);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "putSubshapeSaveAs", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putSubshapeSaveAs", "shapeIndex");
            initialize("putSubshapeSaveAs", "shapeIndex", valueShapeIndex);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putSubshapeSaveAs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "putSubshapeSaveAs", "format");
            initialize("putSubshapeSaveAs", "format", valueFormat);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "putSubshapeSaveAs", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "putSubshapeSaveAs", "outPath");
            initialize("putSubshapeSaveAs", "outPath", valueOutPath);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "putSubshapeSaveAs", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "putSubshapeSaveAs", "options");
            initialize("putSubshapeSaveAs", "options", valueOptions);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "putSubshapeSaveAs", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "putSubshapeSaveAs", "scaleX");
            initialize("putSubshapeSaveAs", "scaleX", valueScaleX);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "putSubshapeSaveAs", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "putSubshapeSaveAs", "scaleY");
            initialize("putSubshapeSaveAs", "scaleY", valueScaleY);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "putSubshapeSaveAs", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "putSubshapeSaveAs", "bounds");
            initialize("putSubshapeSaveAs", "bounds", valueBounds);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "putSubshapeSaveAs", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putSubshapeSaveAs", "password");
            initialize("putSubshapeSaveAs", "password", valuePassword);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putSubshapeSaveAs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putSubshapeSaveAs", "folder");
            initialize("putSubshapeSaveAs", "folder", valueFolder);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putSubshapeSaveAs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putSubshapeSaveAs", "storage");
            initialize("putSubshapeSaveAs", "storage", valueStorage);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putSubshapeSaveAs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putSubshapeSaveAs");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putSubshapeSaveAsInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putSubshapeSaveAs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "slideIndex");
        String valuePath = (String)getTestValue("String", "putSubshapeSaveAs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putSubshapeSaveAs", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "putSubshapeSaveAs", "format");
        String valueOutPath = (String)getTestValue("String", "putSubshapeSaveAs", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "putSubshapeSaveAs", "options");
        Double valueScaleX = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "putSubshapeSaveAs", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "putSubshapeSaveAs", "bounds");
        String valuePassword = (String)getTestValue("String", "putSubshapeSaveAs", "password");
        String valueFolder = (String)getTestValue("String", "putSubshapeSaveAs", "folder");
        String valueStorage = (String)getTestValue("String", "putSubshapeSaveAs", "storage");
        String valueFontsFolder = (String)getTestValue("String", "putSubshapeSaveAs", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "putSubshapeSaveAs", "fontsFolder");
            initialize("putSubshapeSaveAs", "fontsFolder", valueFontsFolder);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "putSubshapeSaveAs", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "putSubshapeSaveAs");
        }
    }
    
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideTest() throws ApiException, Exception {
        initialize("putUpdateNotesSlide", null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "putUpdateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlide", "storage");
        response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "putUpdateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putUpdateNotesSlide", "name");
            initialize("putUpdateNotesSlide", "name", valueName);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putUpdateNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putUpdateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "putUpdateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putUpdateNotesSlide", "slideIndex");
            initialize("putUpdateNotesSlide", "slideIndex", valueSlideIndex);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putUpdateNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putUpdateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "putUpdateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlide", "storage");
        try {
            valueDto = (NotesSlide)invalidizeTestValue("NotesSlide", valueDto, "putUpdateNotesSlide", "dto");
            initialize("putUpdateNotesSlide", "dto", valueDto);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putUpdateNotesSlide", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putUpdateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "putUpdateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putUpdateNotesSlide", "password");
            initialize("putUpdateNotesSlide", "password", valuePassword);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putUpdateNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putUpdateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "putUpdateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putUpdateNotesSlide", "folder");
            initialize("putUpdateNotesSlide", "folder", valueFolder);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putUpdateNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putUpdateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "putUpdateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putUpdateNotesSlide", "storage");
            initialize("putUpdateNotesSlide", "storage", valueStorage);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putUpdateNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putUpdateNotesSlide");
        }
    }
    
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeTest() throws ApiException, Exception {
        initialize("putUpdateNotesSlideShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putUpdateNotesSlideShape", "name");
            initialize("putUpdateNotesSlideShape", "name", valueName);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putUpdateNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putUpdateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putUpdateNotesSlideShape", "slideIndex");
            initialize("putUpdateNotesSlideShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putUpdateNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putUpdateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putUpdateNotesSlideShape", "shapeIndex");
            initialize("putUpdateNotesSlideShape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putUpdateNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putUpdateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "putUpdateNotesSlideShape", "dto");
            initialize("putUpdateNotesSlideShape", "dto", valueDto);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putUpdateNotesSlideShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putUpdateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putUpdateNotesSlideShape", "password");
            initialize("putUpdateNotesSlideShape", "password", valuePassword);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putUpdateNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putUpdateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putUpdateNotesSlideShape", "folder");
            initialize("putUpdateNotesSlideShape", "folder", valueFolder);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putUpdateNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putUpdateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "putUpdateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putUpdateNotesSlideShape", "storage");
            initialize("putUpdateNotesSlideShape", "storage", valueStorage);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putUpdateNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putUpdateNotesSlideShape");
        }
    }
    
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphTest() throws ApiException, Exception {
        initialize("putUpdateNotesSlideShapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putUpdateNotesSlideShapeParagraph", "name");
            initialize("putUpdateNotesSlideShapeParagraph", "name", valueName);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putUpdateNotesSlideShapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putUpdateNotesSlideShapeParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putUpdateNotesSlideShapeParagraph", "slideIndex");
            initialize("putUpdateNotesSlideShapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putUpdateNotesSlideShapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putUpdateNotesSlideShapeParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putUpdateNotesSlideShapeParagraph", "shapeIndex");
            initialize("putUpdateNotesSlideShapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putUpdateNotesSlideShapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putUpdateNotesSlideShapeParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
            initialize("putUpdateNotesSlideShapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "putUpdateNotesSlideShapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "putUpdateNotesSlideShapeParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "putUpdateNotesSlideShapeParagraph", "dto");
            initialize("putUpdateNotesSlideShapeParagraph", "dto", valueDto);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putUpdateNotesSlideShapeParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putUpdateNotesSlideShapeParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putUpdateNotesSlideShapeParagraph", "password");
            initialize("putUpdateNotesSlideShapeParagraph", "password", valuePassword);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putUpdateNotesSlideShapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putUpdateNotesSlideShapeParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putUpdateNotesSlideShapeParagraph", "folder");
            initialize("putUpdateNotesSlideShapeParagraph", "folder", valueFolder);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putUpdateNotesSlideShapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putUpdateNotesSlideShapeParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "putUpdateNotesSlideShapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putUpdateNotesSlideShapeParagraph", "storage");
            initialize("putUpdateNotesSlideShapeParagraph", "storage", valueStorage);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putUpdateNotesSlideShapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putUpdateNotesSlideShapeParagraph");
        }
    }
    
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionTest() throws ApiException, Exception {
        initialize("putUpdateNotesSlideShapePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "putUpdateNotesSlideShapePortion", "name");
            initialize("putUpdateNotesSlideShapePortion", "name", valueName);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "putUpdateNotesSlideShapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "putUpdateNotesSlideShapePortion", "slideIndex");
            initialize("putUpdateNotesSlideShapePortion", "slideIndex", valueSlideIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "putUpdateNotesSlideShapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "putUpdateNotesSlideShapePortion", "shapeIndex");
            initialize("putUpdateNotesSlideShapePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "putUpdateNotesSlideShapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "putUpdateNotesSlideShapePortion", "paragraphIndex");
            initialize("putUpdateNotesSlideShapePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "putUpdateNotesSlideShapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "putUpdateNotesSlideShapePortion", "portionIndex");
            initialize("putUpdateNotesSlideShapePortion", "portionIndex", valuePortionIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "putUpdateNotesSlideShapePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "putUpdateNotesSlideShapePortion", "dto");
            initialize("putUpdateNotesSlideShapePortion", "dto", valueDto);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "putUpdateNotesSlideShapePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "putUpdateNotesSlideShapePortion", "password");
            initialize("putUpdateNotesSlideShapePortion", "password", valuePassword);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "putUpdateNotesSlideShapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "putUpdateNotesSlideShapePortion", "folder");
            initialize("putUpdateNotesSlideShapePortion", "folder", valueFolder);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "putUpdateNotesSlideShapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "putUpdateNotesSlideShapePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putUpdateNotesSlideShapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "putUpdateNotesSlideShapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "putUpdateNotesSlideShapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "password");
        String valueFolder = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "putUpdateNotesSlideShapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "putUpdateNotesSlideShapePortion", "storage");
            initialize("putUpdateNotesSlideShapePortion", "storage", valueStorage);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "putUpdateNotesSlideShapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "putUpdateNotesSlideShapePortion");
        }
    }
    
    /**
     * Check if storage exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storageExistsTest() throws ApiException, Exception {
        initialize("storageExists", null, null);
        StorageExist response = null;
        String valueStorageName = (String)getTestValue("String", "storageExists", "storageName");
        response = api.storageExists(valueStorageName);
        assertNotNull(response);
    }

    /**
     * Check if storage exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storageExistsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueStorageName = (String)getTestValue("String", "storageExists", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "storageExists", "storageName");
            initialize("storageExists", "storageName", valueStorageName);
            StorageExist response = api.storageExists(valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "storageExists", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "storageExists");
        }
    }
    
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException, Exception {
        initialize("uploadFile", null, null);
        FilesUploadResult response = null;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        response = api.uploadFile(valuePath, valueFile, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "uploadFile", "path");
            initialize("uploadFile", "path", valuePath);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "uploadFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "uploadFile");
        }
    }
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidFileTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valueFile = (byte[])invalidizeTestValue("byte[]", valueFile, "uploadFile", "file");
            initialize("uploadFile", "file", valueFile);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "file", "uploadFile", valueFile);
        }
        if (needAssertResponse) {
            assertResponse("file", "uploadFile");
        }
    }
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "uploadFile", "storageName");
            initialize("uploadFile", "storageName", valueStorageName);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "uploadFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "uploadFile");
        }
    }
    
}
