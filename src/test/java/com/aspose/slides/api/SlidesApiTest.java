/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

package com.aspose.slides.api;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.aspose.slides.ApiException;
import com.aspose.slides.FileInfo;
import com.aspose.slides.ApiTest;
import com.aspose.slides.model.*;

import com.aspose.slides.model.ApiInfo;
import com.aspose.slides.model.Chart;
import com.aspose.slides.model.ChartCategory;
import com.aspose.slides.model.ColorScheme;
import com.aspose.slides.model.DataPoint;
import com.aspose.slides.model.DiscUsage;
import com.aspose.slides.model.Document;
import com.aspose.slides.model.DocumentProperties;
import com.aspose.slides.model.DocumentProperty;
import com.aspose.slides.model.DocumentReplaceResult;
import com.aspose.slides.model.Effect;
import com.aspose.slides.model.EntityExists;
import com.aspose.slides.model.ExportOptions;
import java.io.File;
import com.aspose.slides.model.FileVersions;
import com.aspose.slides.model.FilesList;
import com.aspose.slides.model.FilesUploadResult;
import com.aspose.slides.model.FontScheme;
import com.aspose.slides.model.FormatScheme;
import com.aspose.slides.model.HeaderFooter;
import com.aspose.slides.model.IShapeExportOptions;
import com.aspose.slides.model.Images;
import com.aspose.slides.model.InteractiveSequence;
import com.aspose.slides.model.LayoutSlide;
import com.aspose.slides.model.LayoutSlides;
import com.aspose.slides.model.MasterSlide;
import com.aspose.slides.model.MasterSlides;
import com.aspose.slides.model.NotesSlide;
import com.aspose.slides.model.NotesSlideHeaderFooter;
import com.aspose.slides.model.ObjectExist;
import com.aspose.slides.model.OrderedMergeRequest;
import com.aspose.slides.model.Paragraph;
import com.aspose.slides.model.Paragraphs;
import com.aspose.slides.model.PictureFrame;
import com.aspose.slides.model.Pipeline;
import com.aspose.slides.model.Placeholder;
import com.aspose.slides.model.Placeholders;
import com.aspose.slides.model.Portion;
import com.aspose.slides.model.Portions;
import com.aspose.slides.model.PresentationsMergeRequest;
import com.aspose.slides.model.ProtectionProperties;
import com.aspose.slides.model.Sections;
import com.aspose.slides.model.Series;
import com.aspose.slides.model.Shape;
import com.aspose.slides.model.ShapeBase;
import com.aspose.slides.model.Shapes;
import com.aspose.slides.model.Slide;
import com.aspose.slides.model.SlideAnimation;
import com.aspose.slides.model.SlideBackground;
import com.aspose.slides.model.SlideComment;
import com.aspose.slides.model.SlideComments;
import com.aspose.slides.model.SlideProperties;
import com.aspose.slides.model.SlideReplaceResult;
import com.aspose.slides.model.Slides;
import com.aspose.slides.model.SplitDocumentResult;
import com.aspose.slides.model.StorageExist;
import com.aspose.slides.model.TextItems;
import com.aspose.slides.model.Theme;
import com.aspose.slides.model.ViewProperties;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.startsWith;
import static org.hamcrest.CoreMatchers.anyOf;
import static org.hamcrest.CoreMatchers.equalTo;

/**
 * API tests for SlidesApi
 */
public class SlidesApiTest extends ApiTest {
    
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesTest() throws ApiException, Exception {
        initialize("alignShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "alignShapes", "name");
            initialize("alignShapes", "name", valueName);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "alignShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "alignShapes", "slideIndex");
            initialize("alignShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "alignShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidAlignmentTypeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valueAlignmentType = (ShapesAlignmentType)invalidizeTestValue("ShapesAlignmentType", valueAlignmentType, "alignShapes", "alignmentType");
            initialize("alignShapes", "alignmentType", valueAlignmentType);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "alignmentType", "alignShapes", valueAlignmentType);
        }
        if (needAssertResponse) {
            assertResponse("alignmentType", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidAlignToSlideTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valueAlignToSlide = (Boolean)invalidizeTestValue("Boolean", valueAlignToSlide, "alignShapes", "alignToSlide");
            initialize("alignShapes", "alignToSlide", valueAlignToSlide);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "alignToSlide", "alignShapes", valueAlignToSlide);
        }
        if (needAssertResponse) {
            assertResponse("alignToSlide", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "alignShapes", "shapes");
            initialize("alignShapes", "shapes", valueShapes);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "alignShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "alignShapes", "password");
            initialize("alignShapes", "password", valuePassword);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "alignShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "alignShapes", "folder");
            initialize("alignShapes", "folder", valueFolder);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "alignShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "alignShapes");
        }
    }
    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void alignShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "alignShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "alignShapes", "slideIndex");
        ShapesAlignmentType valueAlignmentType = (ShapesAlignmentType)getTestValue("ShapesAlignmentType", "alignShapes", "alignmentType");
        Boolean valueAlignToSlide = (Boolean)getTestValue("Boolean", "alignShapes", "alignToSlide");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "alignShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "alignShapes", "password");
        String valueFolder = (String)getTestValue("String", "alignShapes", "folder");
        String valueStorage = (String)getTestValue("String", "alignShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "alignShapes", "storage");
            initialize("alignShapes", "storage", valueStorage);
            Shapes response = api.alignShapes(valueName, valueSlideIndex, valueAlignmentType, valueAlignToSlide, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "alignShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "alignShapes");
        }
    }
    
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertTest() throws ApiException, Exception {
        initialize("convert", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides);
        assertTrue(response.isFile());
    }

    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "convert", "document");
            initialize("convert", "document", valueDocument);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "convert", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "convert", "format");
            initialize("convert", "format", valueFormat);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "convert", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "convert", "password");
            initialize("convert", "password", valuePassword);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "convert", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "convert", "storage");
            initialize("convert", "storage", valueStorage);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "convert", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "convert", "fontsFolder");
            initialize("convert", "fontsFolder", valueFontsFolder);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "convert", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "convert");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convert", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convert", "format");
        String valuePassword = (String)getTestValue("String", "convert", "password");
        String valueStorage = (String)getTestValue("String", "convert", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convert", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convert", "slides");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "convert", "slides");
            initialize("convert", "slides", valueSlides);
            File response = api.convert(valueDocument, valueFormat, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slides", "convert", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("slides", "convert");
        }
    }
    
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveTest() throws ApiException, Exception {
        initialize("convertAndSave", null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
    }

    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "convertAndSave", "document");
            initialize("convertAndSave", "document", valueDocument);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "convertAndSave", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "convertAndSave", "format");
            initialize("convertAndSave", "format", valueFormat);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "convertAndSave", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "convertAndSave", "outPath");
            initialize("convertAndSave", "outPath", valueOutPath);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "convertAndSave", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "convertAndSave", "password");
            initialize("convertAndSave", "password", valuePassword);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "convertAndSave", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "convertAndSave", "storage");
            initialize("convertAndSave", "storage", valueStorage);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "convertAndSave", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "convertAndSave", "fontsFolder");
            initialize("convertAndSave", "fontsFolder", valueFontsFolder);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "convertAndSave", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "convertAndSave");
        }
    }
    /**
     * Convert presentation from request content to format specified.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void convertAndSaveInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "convertAndSave", "document");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "convertAndSave", "format");
        String valueOutPath = (String)getTestValue("String", "convertAndSave", "outPath");
        String valuePassword = (String)getTestValue("String", "convertAndSave", "password");
        String valueStorage = (String)getTestValue("String", "convertAndSave", "storage");
        String valueFontsFolder = (String)getTestValue("String", "convertAndSave", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "convertAndSave", "slides");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "convertAndSave", "slides");
            initialize("convertAndSave", "slides", valueSlides);
            api.convertAndSave(valueDocument, valueFormat, valueOutPath, valuePassword, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slides", "convertAndSave", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("slides", "convertAndSave");
        }
    }
    
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileTest() throws ApiException, Exception {
        initialize("copyFile", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
    }

    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "copyFile", "srcPath");
            initialize("copyFile", "srcPath", valueSrcPath);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "copyFile", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "copyFile", "destPath");
            initialize("copyFile", "destPath", valueDestPath);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "copyFile", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "copyFile", "srcStorageName");
            initialize("copyFile", "srcStorageName", valueSrcStorageName);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "copyFile", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "copyFile", "destStorageName");
            initialize("copyFile", "destStorageName", valueDestStorageName);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "copyFile", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "copyFile");
        }
    }
    /**
     * Copy file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "copyFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "copyFile", "versionId");
            initialize("copyFile", "versionId", valueVersionId);
            api.copyFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "copyFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "copyFile");
        }
    }
    
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderTest() throws ApiException, Exception {
        initialize("copyFolder", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
    }

    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "copyFolder", "srcPath");
            initialize("copyFolder", "srcPath", valueSrcPath);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "copyFolder", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "copyFolder", "destPath");
            initialize("copyFolder", "destPath", valueDestPath);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "copyFolder", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "copyFolder", "srcStorageName");
            initialize("copyFolder", "srcStorageName", valueSrcStorageName);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "copyFolder", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "copyFolder");
        }
    }
    /**
     * Copy folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyFolderInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "copyFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "copyFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "copyFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "copyFolder", "destStorageName");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "copyFolder", "destStorageName");
            initialize("copyFolder", "destStorageName", valueDestStorageName);
            api.copyFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "copyFolder", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "copyFolder");
        }
    }
    
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideTest() throws ApiException, Exception {
        initialize("copyLayoutSlide", null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "copyLayoutSlide", "name");
            initialize("copyLayoutSlide", "name", valueName);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "copyLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFrom = (String)invalidizeTestValue("String", valueCloneFrom, "copyLayoutSlide", "cloneFrom");
            initialize("copyLayoutSlide", "cloneFrom", valueCloneFrom);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFrom", "copyLayoutSlide", valueCloneFrom);
        }
        if (needAssertResponse) {
            assertResponse("cloneFrom", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFromPosition = (Integer)invalidizeTestValue("Integer", valueCloneFromPosition, "copyLayoutSlide", "cloneFromPosition");
            initialize("copyLayoutSlide", "cloneFromPosition", valueCloneFromPosition);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPosition", "copyLayoutSlide", valueCloneFromPosition);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPosition", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFromPassword = (String)invalidizeTestValue("String", valueCloneFromPassword, "copyLayoutSlide", "cloneFromPassword");
            initialize("copyLayoutSlide", "cloneFromPassword", valueCloneFromPassword);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPassword", "copyLayoutSlide", valueCloneFromPassword);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPassword", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidCloneFromStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueCloneFromStorage = (String)invalidizeTestValue("String", valueCloneFromStorage, "copyLayoutSlide", "cloneFromStorage");
            initialize("copyLayoutSlide", "cloneFromStorage", valueCloneFromStorage);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromStorage", "copyLayoutSlide", valueCloneFromStorage);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromStorage", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "copyLayoutSlide", "password");
            initialize("copyLayoutSlide", "password", valuePassword);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "copyLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "copyLayoutSlide", "folder");
            initialize("copyLayoutSlide", "folder", valueFolder);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "copyLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "copyLayoutSlide");
        }
    }
    /**
     * Copy layoutSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyLayoutSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyLayoutSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyLayoutSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyLayoutSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyLayoutSlide", "cloneFromStorage");
        String valuePassword = (String)getTestValue("String", "copyLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "copyLayoutSlide", "storage");
            initialize("copyLayoutSlide", "storage", valueStorage);
            LayoutSlide response = api.copyLayoutSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "copyLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "copyLayoutSlide");
        }
    }
    
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideTest() throws ApiException, Exception {
        initialize("copyMasterSlide", null, null);
        MasterSlide response = null;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "copyMasterSlide", "name");
            initialize("copyMasterSlide", "name", valueName);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "copyMasterSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFrom = (String)invalidizeTestValue("String", valueCloneFrom, "copyMasterSlide", "cloneFrom");
            initialize("copyMasterSlide", "cloneFrom", valueCloneFrom);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFrom", "copyMasterSlide", valueCloneFrom);
        }
        if (needAssertResponse) {
            assertResponse("cloneFrom", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFromPosition = (Integer)invalidizeTestValue("Integer", valueCloneFromPosition, "copyMasterSlide", "cloneFromPosition");
            initialize("copyMasterSlide", "cloneFromPosition", valueCloneFromPosition);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPosition", "copyMasterSlide", valueCloneFromPosition);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPosition", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFromPassword = (String)invalidizeTestValue("String", valueCloneFromPassword, "copyMasterSlide", "cloneFromPassword");
            initialize("copyMasterSlide", "cloneFromPassword", valueCloneFromPassword);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromPassword", "copyMasterSlide", valueCloneFromPassword);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromPassword", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidCloneFromStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueCloneFromStorage = (String)invalidizeTestValue("String", valueCloneFromStorage, "copyMasterSlide", "cloneFromStorage");
            initialize("copyMasterSlide", "cloneFromStorage", valueCloneFromStorage);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "cloneFromStorage", "copyMasterSlide", valueCloneFromStorage);
        }
        if (needAssertResponse) {
            assertResponse("cloneFromStorage", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidApplyToAllTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueApplyToAll = (Boolean)invalidizeTestValue("Boolean", valueApplyToAll, "copyMasterSlide", "applyToAll");
            initialize("copyMasterSlide", "applyToAll", valueApplyToAll);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "applyToAll", "copyMasterSlide", valueApplyToAll);
        }
        if (needAssertResponse) {
            assertResponse("applyToAll", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "copyMasterSlide", "password");
            initialize("copyMasterSlide", "password", valuePassword);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "copyMasterSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "copyMasterSlide", "folder");
            initialize("copyMasterSlide", "folder", valueFolder);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "copyMasterSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "copyMasterSlide");
        }
    }
    /**
     * Copy masterSlide from source presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyMasterSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copyMasterSlide", "name");
        String valueCloneFrom = (String)getTestValue("String", "copyMasterSlide", "cloneFrom");
        Integer valueCloneFromPosition = (Integer)getTestValue("Integer", "copyMasterSlide", "cloneFromPosition");
        String valueCloneFromPassword = (String)getTestValue("String", "copyMasterSlide", "cloneFromPassword");
        String valueCloneFromStorage = (String)getTestValue("String", "copyMasterSlide", "cloneFromStorage");
        Boolean valueApplyToAll = (Boolean)getTestValue("Boolean", "copyMasterSlide", "applyToAll");
        String valuePassword = (String)getTestValue("String", "copyMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "copyMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "copyMasterSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "copyMasterSlide", "storage");
            initialize("copyMasterSlide", "storage", valueStorage);
            MasterSlide response = api.copyMasterSlide(valueName, valueCloneFrom, valueCloneFromPosition, valueCloneFromPassword, valueCloneFromStorage, valueApplyToAll, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "copyMasterSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "copyMasterSlide");
        }
    }
    
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideTest() throws ApiException, Exception {
        initialize("copySlide", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "copySlide", "name");
            initialize("copySlide", "name", valueName);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "copySlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSlideToCopyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSlideToCopy = (Integer)invalidizeTestValue("Integer", valueSlideToCopy, "copySlide", "slideToCopy");
            initialize("copySlide", "slideToCopy", valueSlideToCopy);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideToCopy", "copySlide", valueSlideToCopy);
        }
        if (needAssertResponse) {
            assertResponse("slideToCopy", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "copySlide", "position");
            initialize("copySlide", "position", valuePosition);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "copySlide", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSourceTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSource = (String)invalidizeTestValue("String", valueSource, "copySlide", "source");
            initialize("copySlide", "source", valueSource);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "source", "copySlide", valueSource);
        }
        if (needAssertResponse) {
            assertResponse("source", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSourcePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSourcePassword = (String)invalidizeTestValue("String", valueSourcePassword, "copySlide", "sourcePassword");
            initialize("copySlide", "sourcePassword", valueSourcePassword);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourcePassword", "copySlide", valueSourcePassword);
        }
        if (needAssertResponse) {
            assertResponse("sourcePassword", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidSourceStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueSourceStorage = (String)invalidizeTestValue("String", valueSourceStorage, "copySlide", "sourceStorage");
            initialize("copySlide", "sourceStorage", valueSourceStorage);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourceStorage", "copySlide", valueSourceStorage);
        }
        if (needAssertResponse) {
            assertResponse("sourceStorage", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "copySlide", "password");
            initialize("copySlide", "password", valuePassword);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "copySlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "copySlide", "folder");
            initialize("copySlide", "folder", valueFolder);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "copySlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "copySlide");
        }
    }
    /**
     * Copy a slide from the current or another presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copySlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "copySlide", "name");
        Integer valueSlideToCopy = (Integer)getTestValue("Integer", "copySlide", "slideToCopy");
        Integer valuePosition = (Integer)getTestValue("Integer", "copySlide", "position");
        String valueSource = (String)getTestValue("String", "copySlide", "source");
        String valueSourcePassword = (String)getTestValue("String", "copySlide", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "copySlide", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "copySlide", "password");
        String valueFolder = (String)getTestValue("String", "copySlide", "folder");
        String valueStorage = (String)getTestValue("String", "copySlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "copySlide", "storage");
            initialize("copySlide", "storage", valueStorage);
            Slides response = api.copySlide(valueName, valueSlideToCopy, valuePosition, valueSource, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "copySlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "copySlide");
        }
    }
    
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectTest() throws ApiException, Exception {
        initialize("createAnimationEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createAnimationEffect", "name");
            initialize("createAnimationEffect", "name", valueName);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createAnimationEffect", "slideIndex");
            initialize("createAnimationEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "createAnimationEffect", "effect");
            initialize("createAnimationEffect", "effect", valueEffect);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "createAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createAnimationEffect", "password");
            initialize("createAnimationEffect", "password", valuePassword);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createAnimationEffect", "folder");
            initialize("createAnimationEffect", "folder", valueFolder);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createAnimationEffect");
        }
    }
    /**
     * Add an effect to slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationEffect", "slideIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createAnimationEffect", "storage");
            initialize("createAnimationEffect", "storage", valueStorage);
            SlideAnimation response = api.createAnimationEffect(valueName, valueSlideIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createAnimationEffect");
        }
    }
    
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("createAnimationInteractiveSequence", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createAnimationInteractiveSequence", "name");
            initialize("createAnimationInteractiveSequence", "name", valueName);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createAnimationInteractiveSequence", "slideIndex");
            initialize("createAnimationInteractiveSequence", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidSequenceTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueSequence = (InteractiveSequence)invalidizeTestValue("InteractiveSequence", valueSequence, "createAnimationInteractiveSequence", "sequence");
            initialize("createAnimationInteractiveSequence", "sequence", valueSequence);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequence", "createAnimationInteractiveSequence", valueSequence);
        }
        if (needAssertResponse) {
            assertResponse("sequence", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createAnimationInteractiveSequence", "password");
            initialize("createAnimationInteractiveSequence", "password", valuePassword);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createAnimationInteractiveSequence", "folder");
            initialize("createAnimationInteractiveSequence", "folder", valueFolder);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createAnimationInteractiveSequence");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequence", "slideIndex");
        InteractiveSequence valueSequence = (InteractiveSequence)getTestValue("InteractiveSequence", "createAnimationInteractiveSequence", "sequence");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createAnimationInteractiveSequence", "storage");
            initialize("createAnimationInteractiveSequence", "storage", valueStorage);
            SlideAnimation response = api.createAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequence, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createAnimationInteractiveSequence");
        }
    }
    
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("createAnimationInteractiveSequenceEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createAnimationInteractiveSequenceEffect", "name");
            initialize("createAnimationInteractiveSequenceEffect", "name", valueName);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("createAnimationInteractiveSequenceEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "createAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "createAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "createAnimationInteractiveSequenceEffect", "effect");
            initialize("createAnimationInteractiveSequenceEffect", "effect", valueEffect);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "createAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createAnimationInteractiveSequenceEffect", "password");
            initialize("createAnimationInteractiveSequenceEffect", "password", valuePassword);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createAnimationInteractiveSequenceEffect", "folder");
            initialize("createAnimationInteractiveSequenceEffect", "folder", valueFolder);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Add an animation effect to a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "createAnimationInteractiveSequenceEffect", "sequenceIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "createAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "createAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createAnimationInteractiveSequenceEffect", "storage");
            initialize("createAnimationInteractiveSequenceEffect", "storage", valueStorage);
            SlideAnimation response = api.createAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryTest() throws ApiException, Exception {
        initialize("createChartCategory", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createChartCategory", "name");
            initialize("createChartCategory", "name", valueName);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createChartCategory", "slideIndex");
            initialize("createChartCategory", "slideIndex", valueSlideIndex);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createChartCategory", "shapeIndex");
            initialize("createChartCategory", "shapeIndex", valueShapeIndex);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidCategoryTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueCategory = (ChartCategory)invalidizeTestValue("ChartCategory", valueCategory, "createChartCategory", "category");
            initialize("createChartCategory", "category", valueCategory);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "category", "createChartCategory", valueCategory);
        }
        if (needAssertResponse) {
            assertResponse("category", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createChartCategory", "password");
            initialize("createChartCategory", "password", valuePassword);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createChartCategory", "folder");
            initialize("createChartCategory", "folder", valueFolder);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createChartCategory");
        }
    }
    /**
     * Add a new category to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartCategory", "shapeIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "createChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "createChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "createChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "createChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createChartCategory", "storage");
            initialize("createChartCategory", "storage", valueStorage);
            Chart response = api.createChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createChartCategory");
        }
    }
    
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointTest() throws ApiException, Exception {
        initialize("createChartDataPoint", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createChartDataPoint", "name");
            initialize("createChartDataPoint", "name", valueName);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createChartDataPoint", "slideIndex");
            initialize("createChartDataPoint", "slideIndex", valueSlideIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createChartDataPoint", "shapeIndex");
            initialize("createChartDataPoint", "shapeIndex", valueShapeIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "createChartDataPoint", "seriesIndex");
            initialize("createChartDataPoint", "seriesIndex", valueSeriesIndex);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "createChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidDataPointTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueDataPoint = (DataPoint)invalidizeTestValue("DataPoint", valueDataPoint, "createChartDataPoint", "dataPoint");
            initialize("createChartDataPoint", "dataPoint", valueDataPoint);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dataPoint", "createChartDataPoint", valueDataPoint);
        }
        if (needAssertResponse) {
            assertResponse("dataPoint", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createChartDataPoint", "password");
            initialize("createChartDataPoint", "password", valuePassword);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createChartDataPoint", "folder");
            initialize("createChartDataPoint", "folder", valueFolder);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createChartDataPoint");
        }
    }
    /**
     * Add a new data point to a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "createChartDataPoint", "seriesIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "createChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "createChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "createChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "createChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createChartDataPoint", "storage");
            initialize("createChartDataPoint", "storage", valueStorage);
            Chart response = api.createChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createChartDataPoint");
        }
    }
    
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesTest() throws ApiException, Exception {
        initialize("createChartSeries", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createChartSeries", "name");
            initialize("createChartSeries", "name", valueName);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createChartSeries", "slideIndex");
            initialize("createChartSeries", "slideIndex", valueSlideIndex);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createChartSeries", "shapeIndex");
            initialize("createChartSeries", "shapeIndex", valueShapeIndex);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidSeriesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueSeries = (Series)invalidizeTestValue("Series", valueSeries, "createChartSeries", "series");
            initialize("createChartSeries", "series", valueSeries);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "series", "createChartSeries", valueSeries);
        }
        if (needAssertResponse) {
            assertResponse("series", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createChartSeries", "password");
            initialize("createChartSeries", "password", valuePassword);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createChartSeries", "folder");
            initialize("createChartSeries", "folder", valueFolder);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createChartSeries");
        }
    }
    /**
     * Add a new series to a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createChartSeries", "shapeIndex");
        Series valueSeries = (Series)getTestValue("Series", "createChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "createChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "createChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "createChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createChartSeries", "storage");
            initialize("createChartSeries", "storage", valueStorage);
            Chart response = api.createChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createChartSeries");
        }
    }
    
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException, Exception {
        initialize("createComment", null, null);
        SlideComments response = null;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createComment", "dto");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        response = api.createComment(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createComment", "dto");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createComment", "name");
            initialize("createComment", "name", valueName);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createComment", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createComment", "dto");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createComment", "slideIndex");
            initialize("createComment", "slideIndex", valueSlideIndex);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createComment", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createComment", "dto");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueDto = (SlideComment)invalidizeTestValue("SlideComment", valueDto, "createComment", "dto");
            initialize("createComment", "dto", valueDto);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createComment", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createComment", "dto");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createComment", "password");
            initialize("createComment", "password", valuePassword);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createComment", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createComment", "dto");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createComment", "folder");
            initialize("createComment", "folder", valueFolder);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createComment", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createComment");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createComment", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createComment", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createComment", "dto");
        String valuePassword = (String)getTestValue("String", "createComment", "password");
        String valueFolder = (String)getTestValue("String", "createComment", "folder");
        String valueStorage = (String)getTestValue("String", "createComment", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createComment", "storage");
            initialize("createComment", "storage", valueStorage);
            SlideComments response = api.createComment(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createComment", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createComment");
        }
    }
    
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineTest() throws ApiException, Exception {
        initialize("createCommentOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createCommentOnline", "dto");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createCommentOnline", "dto");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "createCommentOnline", "document");
            initialize("createCommentOnline", "document", valueDocument);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "createCommentOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "createCommentOnline");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createCommentOnline", "dto");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createCommentOnline", "slideIndex");
            initialize("createCommentOnline", "slideIndex", valueSlideIndex);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createCommentOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createCommentOnline");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createCommentOnline", "dto");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valueDto = (SlideComment)invalidizeTestValue("SlideComment", valueDto, "createCommentOnline", "dto");
            initialize("createCommentOnline", "dto", valueDto);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createCommentOnline", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createCommentOnline");
        }
    }
    /**
     * Adds the comment on the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCommentOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createCommentOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createCommentOnline", "slideIndex");
        SlideComment valueDto = (SlideComment)getTestValue("SlideComment", "createCommentOnline", "dto");
        String valuePassword = (String)getTestValue("String", "createCommentOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createCommentOnline", "password");
            initialize("createCommentOnline", "password", valuePassword);
            File response = api.createCommentOnline(valueDocument, valueSlideIndex, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createCommentOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createCommentOnline");
        }
    }
    
    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException, Exception {
        initialize("createFolder", null, null);
        ;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        api.createFolder(valuePath, valueStorageName);
    }

    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "createFolder", "path");
            initialize("createFolder", "path", valuePath);
            api.createFolder(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "createFolder", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "createFolder");
        }
    }
    /**
     * Create the folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFolderInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "createFolder", "path");
        String valueStorageName = (String)getTestValue("String", "createFolder", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "createFolder", "storageName");
            initialize("createFolder", "storageName", valueStorageName);
            api.createFolder(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "createFolder", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "createFolder");
        }
    }
    
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkTest() throws ApiException, Exception {
        initialize("createImageWatermark", null, null);
        ;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createImageWatermark", "name");
            initialize("createImageWatermark", "name", valueName);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createImageWatermark", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidImageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueImage = (byte[])invalidizeTestValue("byte[]", valueImage, "createImageWatermark", "image");
            initialize("createImageWatermark", "image", valueImage);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "image", "createImageWatermark", valueImage);
        }
        if (needAssertResponse) {
            assertResponse("image", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidPictureFrameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valuePictureFrame = (PictureFrame)invalidizeTestValue("PictureFrame", valuePictureFrame, "createImageWatermark", "pictureFrame");
            initialize("createImageWatermark", "pictureFrame", valuePictureFrame);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pictureFrame", "createImageWatermark", valuePictureFrame);
        }
        if (needAssertResponse) {
            assertResponse("pictureFrame", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createImageWatermark", "password");
            initialize("createImageWatermark", "password", valuePassword);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createImageWatermark", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createImageWatermark", "folder");
            initialize("createImageWatermark", "folder", valueFolder);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createImageWatermark", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createImageWatermark");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createImageWatermark", "name");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermark", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermark", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createImageWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createImageWatermark", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createImageWatermark", "storage");
            initialize("createImageWatermark", "storage", valueStorage);
            api.createImageWatermark(valueName, valueImage, valuePictureFrame, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createImageWatermark", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createImageWatermark");
        }
    }
    
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineTest() throws ApiException, Exception {
        initialize("createImageWatermarkOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "createImageWatermarkOnline", "document");
            initialize("createImageWatermarkOnline", "document", valueDocument);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "createImageWatermarkOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "createImageWatermarkOnline");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidImageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valueImage = (byte[])invalidizeTestValue("byte[]", valueImage, "createImageWatermarkOnline", "image");
            initialize("createImageWatermarkOnline", "image", valueImage);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "image", "createImageWatermarkOnline", valueImage);
        }
        if (needAssertResponse) {
            assertResponse("image", "createImageWatermarkOnline");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidPictureFrameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valuePictureFrame = (PictureFrame)invalidizeTestValue("PictureFrame", valuePictureFrame, "createImageWatermarkOnline", "pictureFrame");
            initialize("createImageWatermarkOnline", "pictureFrame", valuePictureFrame);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pictureFrame", "createImageWatermarkOnline", valuePictureFrame);
        }
        if (needAssertResponse) {
            assertResponse("pictureFrame", "createImageWatermarkOnline");
        }
    }
    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createImageWatermarkOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "document");
        byte[] valueImage = (byte[])getTestValue("byte[]", "createImageWatermarkOnline", "image");
        PictureFrame valuePictureFrame = (PictureFrame)getTestValue("PictureFrame", "createImageWatermarkOnline", "pictureFrame");
        String valuePassword = (String)getTestValue("String", "createImageWatermarkOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createImageWatermarkOnline", "password");
            initialize("createImageWatermarkOnline", "password", valuePassword);
            File response = api.createImageWatermarkOnline(valueDocument, valueImage, valuePictureFrame, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createImageWatermarkOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createImageWatermarkOnline");
        }
    }
    
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideTest() throws ApiException, Exception {
        initialize("createNotesSlide", null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createNotesSlide", "name");
            initialize("createNotesSlide", "name", valueName);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createNotesSlide", "slideIndex");
            initialize("createNotesSlide", "slideIndex", valueSlideIndex);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueDto = (NotesSlide)invalidizeTestValue("NotesSlide", valueDto, "createNotesSlide", "dto");
            initialize("createNotesSlide", "dto", valueDto);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createNotesSlide", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createNotesSlide", "password");
            initialize("createNotesSlide", "password", valuePassword);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createNotesSlide", "folder");
            initialize("createNotesSlide", "folder", valueFolder);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createNotesSlide");
        }
    }
    /**
     * Add new notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "createNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "createNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createNotesSlide", "storage");
            initialize("createNotesSlide", "storage", valueStorage);
            NotesSlide response = api.createNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createNotesSlide");
        }
    }
    
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphTest() throws ApiException, Exception {
        initialize("createNotesSlideParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createNotesSlideParagraph", "name");
            initialize("createNotesSlideParagraph", "name", valueName);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createNotesSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createNotesSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createNotesSlideParagraph", "slideIndex");
            initialize("createNotesSlideParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createNotesSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createNotesSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createNotesSlideParagraph", "shapeIndex");
            initialize("createNotesSlideParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createNotesSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createNotesSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "createNotesSlideParagraph", "dto");
            initialize("createNotesSlideParagraph", "dto", valueDto);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createNotesSlideParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createNotesSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createNotesSlideParagraph", "position");
            initialize("createNotesSlideParagraph", "position", valuePosition);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createNotesSlideParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createNotesSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createNotesSlideParagraph", "password");
            initialize("createNotesSlideParagraph", "password", valuePassword);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createNotesSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createNotesSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createNotesSlideParagraph", "folder");
            initialize("createNotesSlideParagraph", "folder", valueFolder);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createNotesSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createNotesSlideParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createNotesSlideParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createNotesSlideParagraph", "storage");
            initialize("createNotesSlideParagraph", "storage", valueStorage);
            Paragraph response = api.createNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createNotesSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createNotesSlideParagraph");
        }
    }
    
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionTest() throws ApiException, Exception {
        initialize("createNotesSlidePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createNotesSlidePortion", "name");
            initialize("createNotesSlidePortion", "name", valueName);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createNotesSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createNotesSlidePortion", "slideIndex");
            initialize("createNotesSlidePortion", "slideIndex", valueSlideIndex);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createNotesSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createNotesSlidePortion", "shapeIndex");
            initialize("createNotesSlidePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createNotesSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "createNotesSlidePortion", "paragraphIndex");
            initialize("createNotesSlidePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "createNotesSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "createNotesSlidePortion", "dto");
            initialize("createNotesSlidePortion", "dto", valueDto);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createNotesSlidePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createNotesSlidePortion", "position");
            initialize("createNotesSlidePortion", "position", valuePosition);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createNotesSlidePortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createNotesSlidePortion", "password");
            initialize("createNotesSlidePortion", "password", valuePassword);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createNotesSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createNotesSlidePortion", "folder");
            initialize("createNotesSlidePortion", "folder", valueFolder);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createNotesSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createNotesSlidePortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createNotesSlidePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createNotesSlidePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlidePortion", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlidePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createNotesSlidePortion", "storage");
            initialize("createNotesSlidePortion", "storage", valueStorage);
            Portion response = api.createNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createNotesSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createNotesSlidePortion");
        }
    }
    
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeTest() throws ApiException, Exception {
        initialize("createNotesSlideShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createNotesSlideShape", "name");
            initialize("createNotesSlideShape", "name", valueName);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createNotesSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createNotesSlideShape", "slideIndex");
            initialize("createNotesSlideShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createNotesSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "createNotesSlideShape", "dto");
            initialize("createNotesSlideShape", "dto", valueDto);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createNotesSlideShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createNotesSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "createNotesSlideShape", "shapeToClone");
            initialize("createNotesSlideShape", "shapeToClone", valueShapeToClone);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeToClone", "createNotesSlideShape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("shapeToClone", "createNotesSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createNotesSlideShape", "position");
            initialize("createNotesSlideShape", "position", valuePosition);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createNotesSlideShape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createNotesSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createNotesSlideShape", "password");
            initialize("createNotesSlideShape", "password", valuePassword);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createNotesSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createNotesSlideShape", "folder");
            initialize("createNotesSlideShape", "folder", valueFolder);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createNotesSlideShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createNotesSlideShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createNotesSlideShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createNotesSlideShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createNotesSlideShape", "position");
        String valuePassword = (String)getTestValue("String", "createNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "createNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "createNotesSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createNotesSlideShape", "storage");
            initialize("createNotesSlideShape", "storage", valueStorage);
            ShapeBase response = api.createNotesSlideShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createNotesSlideShape");
        }
    }
    
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphTest() throws ApiException, Exception {
        initialize("createParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createParagraph", "name");
            initialize("createParagraph", "name", valueName);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createParagraph", "slideIndex");
            initialize("createParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createParagraph", "shapeIndex");
            initialize("createParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "createParagraph", "dto");
            initialize("createParagraph", "dto", valueDto);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createParagraph", "position");
            initialize("createParagraph", "position", valuePosition);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createParagraph", "password");
            initialize("createParagraph", "password", valuePassword);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createParagraph", "folder");
            initialize("createParagraph", "folder", valueFolder);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createParagraph");
        }
    }
    /**
     * Creates new paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createParagraph", "storage");
            initialize("createParagraph", "storage", valueStorage);
            Paragraph response = api.createParagraph(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createParagraph");
        }
    }
    
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionTest() throws ApiException, Exception {
        initialize("createPortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPortion", "name");
            initialize("createPortion", "name", valueName);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createPortion", "slideIndex");
            initialize("createPortion", "slideIndex", valueSlideIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createPortion", "shapeIndex");
            initialize("createPortion", "shapeIndex", valueShapeIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "createPortion", "paragraphIndex");
            initialize("createPortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "createPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "createPortion", "dto");
            initialize("createPortion", "dto", valueDto);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createPortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createPortion", "position");
            initialize("createPortion", "position", valuePosition);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createPortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPortion", "password");
            initialize("createPortion", "password", valuePassword);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPortion", "folder");
            initialize("createPortion", "folder", valueFolder);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createPortion");
        }
    }
    /**
     * Creates new portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createPortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createPortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createPortion", "position");
        String valuePassword = (String)getTestValue("String", "createPortion", "password");
        String valueFolder = (String)getTestValue("String", "createPortion", "folder");
        String valueStorage = (String)getTestValue("String", "createPortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPortion", "storage");
            initialize("createPortion", "storage", valueStorage);
            Portion response = api.createPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createPortion");
        }
    }
    
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationTest() throws ApiException, Exception {
        initialize("createPresentation", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPresentation", "name");
            initialize("createPresentation", "name", valueName);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createPresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidDataTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueData = (byte[])invalidizeTestValue("byte[]", valueData, "createPresentation", "data");
            initialize("createPresentation", "data", valueData);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "data", "createPresentation", valueData);
        }
        if (needAssertResponse) {
            assertResponse("data", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidInputPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueInputPassword = (String)invalidizeTestValue("String", valueInputPassword, "createPresentation", "inputPassword");
            initialize("createPresentation", "inputPassword", valueInputPassword);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "inputPassword", "createPresentation", valueInputPassword);
        }
        if (needAssertResponse) {
            assertResponse("inputPassword", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPresentation", "password");
            initialize("createPresentation", "password", valuePassword);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createPresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPresentation", "folder");
            initialize("createPresentation", "folder", valueFolder);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createPresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createPresentation");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentation", "name");
        byte[] valueData = (byte[])getTestValue("byte[]", "createPresentation", "data");
        String valueInputPassword = (String)getTestValue("String", "createPresentation", "inputPassword");
        String valuePassword = (String)getTestValue("String", "createPresentation", "password");
        String valueFolder = (String)getTestValue("String", "createPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPresentation", "storage");
            initialize("createPresentation", "storage", valueStorage);
            Document response = api.createPresentation(valueName, valueData, valueInputPassword, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createPresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createPresentation");
        }
    }
    
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceTest() throws ApiException, Exception {
        initialize("createPresentationFromSource", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPresentationFromSource", "name");
            initialize("createPresentationFromSource", "name", valueName);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createPresentationFromSource", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidSourcePathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueSourcePath = (String)invalidizeTestValue("String", valueSourcePath, "createPresentationFromSource", "sourcePath");
            initialize("createPresentationFromSource", "sourcePath", valueSourcePath);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourcePath", "createPresentationFromSource", valueSourcePath);
        }
        if (needAssertResponse) {
            assertResponse("sourcePath", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidSourcePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueSourcePassword = (String)invalidizeTestValue("String", valueSourcePassword, "createPresentationFromSource", "sourcePassword");
            initialize("createPresentationFromSource", "sourcePassword", valueSourcePassword);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourcePassword", "createPresentationFromSource", valueSourcePassword);
        }
        if (needAssertResponse) {
            assertResponse("sourcePassword", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidSourceStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueSourceStorage = (String)invalidizeTestValue("String", valueSourceStorage, "createPresentationFromSource", "sourceStorage");
            initialize("createPresentationFromSource", "sourceStorage", valueSourceStorage);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sourceStorage", "createPresentationFromSource", valueSourceStorage);
        }
        if (needAssertResponse) {
            assertResponse("sourceStorage", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPresentationFromSource", "password");
            initialize("createPresentationFromSource", "password", valuePassword);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createPresentationFromSource", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPresentationFromSource", "folder");
            initialize("createPresentationFromSource", "folder", valueFolder);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createPresentationFromSource", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createPresentationFromSource");
        }
    }
    /**
     * Create a presentation from an existing source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromSourceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromSource", "name");
        String valueSourcePath = (String)getTestValue("String", "createPresentationFromSource", "sourcePath");
        String valueSourcePassword = (String)getTestValue("String", "createPresentationFromSource", "sourcePassword");
        String valueSourceStorage = (String)getTestValue("String", "createPresentationFromSource", "sourceStorage");
        String valuePassword = (String)getTestValue("String", "createPresentationFromSource", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromSource", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromSource", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPresentationFromSource", "storage");
            initialize("createPresentationFromSource", "storage", valueStorage);
            Document response = api.createPresentationFromSource(valueName, valueSourcePath, valueSourcePassword, valueSourceStorage, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createPresentationFromSource", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createPresentationFromSource");
        }
    }
    
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateTest() throws ApiException, Exception {
        initialize("createPresentationFromTemplate", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createPresentationFromTemplate", "name");
            initialize("createPresentationFromTemplate", "name", valueName);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createPresentationFromTemplate", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidTemplatePathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueTemplatePath = (String)invalidizeTestValue("String", valueTemplatePath, "createPresentationFromTemplate", "templatePath");
            initialize("createPresentationFromTemplate", "templatePath", valueTemplatePath);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "templatePath", "createPresentationFromTemplate", valueTemplatePath);
        }
        if (needAssertResponse) {
            assertResponse("templatePath", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidDataTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueData = (String)invalidizeTestValue("String", valueData, "createPresentationFromTemplate", "data");
            initialize("createPresentationFromTemplate", "data", valueData);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "data", "createPresentationFromTemplate", valueData);
        }
        if (needAssertResponse) {
            assertResponse("data", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidTemplatePasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueTemplatePassword = (String)invalidizeTestValue("String", valueTemplatePassword, "createPresentationFromTemplate", "templatePassword");
            initialize("createPresentationFromTemplate", "templatePassword", valueTemplatePassword);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "templatePassword", "createPresentationFromTemplate", valueTemplatePassword);
        }
        if (needAssertResponse) {
            assertResponse("templatePassword", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidTemplateStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueTemplateStorage = (String)invalidizeTestValue("String", valueTemplateStorage, "createPresentationFromTemplate", "templateStorage");
            initialize("createPresentationFromTemplate", "templateStorage", valueTemplateStorage);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "templateStorage", "createPresentationFromTemplate", valueTemplateStorage);
        }
        if (needAssertResponse) {
            assertResponse("templateStorage", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidIsImageDataEmbeddedTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueIsImageDataEmbedded = (Boolean)invalidizeTestValue("Boolean", valueIsImageDataEmbedded, "createPresentationFromTemplate", "isImageDataEmbedded");
            initialize("createPresentationFromTemplate", "isImageDataEmbedded", valueIsImageDataEmbedded);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "isImageDataEmbedded", "createPresentationFromTemplate", valueIsImageDataEmbedded);
        }
        if (needAssertResponse) {
            assertResponse("isImageDataEmbedded", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createPresentationFromTemplate", "password");
            initialize("createPresentationFromTemplate", "password", valuePassword);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createPresentationFromTemplate", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createPresentationFromTemplate", "folder");
            initialize("createPresentationFromTemplate", "folder", valueFolder);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createPresentationFromTemplate", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createPresentationFromTemplate");
        }
    }
    /**
     * Create a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPresentationFromTemplateInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createPresentationFromTemplate", "name");
        String valueTemplatePath = (String)getTestValue("String", "createPresentationFromTemplate", "templatePath");
        String valueData = (String)getTestValue("String", "createPresentationFromTemplate", "data");
        String valueTemplatePassword = (String)getTestValue("String", "createPresentationFromTemplate", "templatePassword");
        String valueTemplateStorage = (String)getTestValue("String", "createPresentationFromTemplate", "templateStorage");
        Boolean valueIsImageDataEmbedded = (Boolean)getTestValue("Boolean", "createPresentationFromTemplate", "isImageDataEmbedded");
        String valuePassword = (String)getTestValue("String", "createPresentationFromTemplate", "password");
        String valueFolder = (String)getTestValue("String", "createPresentationFromTemplate", "folder");
        String valueStorage = (String)getTestValue("String", "createPresentationFromTemplate", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createPresentationFromTemplate", "storage");
            initialize("createPresentationFromTemplate", "storage", valueStorage);
            Document response = api.createPresentationFromTemplate(valueName, valueTemplatePath, valueData, valueTemplatePassword, valueTemplateStorage, valueIsImageDataEmbedded, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createPresentationFromTemplate", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createPresentationFromTemplate");
        }
    }
    
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionTest() throws ApiException, Exception {
        initialize("createSection", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSection", "name");
            initialize("createSection", "name", valueName);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidSectionNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueSectionName = (String)invalidizeTestValue("String", valueSectionName, "createSection", "sectionName");
            initialize("createSection", "sectionName", valueSectionName);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionName", "createSection", valueSectionName);
        }
        if (needAssertResponse) {
            assertResponse("sectionName", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSection", "slideIndex");
            initialize("createSection", "slideIndex", valueSlideIndex);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createSection", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSection", "password");
            initialize("createSection", "password", valuePassword);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSection", "folder");
            initialize("createSection", "folder", valueFolder);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createSection");
        }
    }
    /**
     * Create a section starting at a specified slide index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSection", "name");
        String valueSectionName = (String)getTestValue("String", "createSection", "sectionName");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSection", "slideIndex");
        String valuePassword = (String)getTestValue("String", "createSection", "password");
        String valueFolder = (String)getTestValue("String", "createSection", "folder");
        String valueStorage = (String)getTestValue("String", "createSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSection", "storage");
            initialize("createSection", "storage", valueStorage);
            Sections response = api.createSection(valueName, valueSectionName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createSection");
        }
    }
    
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeTest() throws ApiException, Exception {
        initialize("createShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createShape", "name");
            initialize("createShape", "name", valueName);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createShape", "slideIndex");
            initialize("createShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "createShape", "dto");
            initialize("createShape", "dto", valueDto);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "createShape", "shapeToClone");
            initialize("createShape", "shapeToClone", valueShapeToClone);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeToClone", "createShape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("shapeToClone", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createShape", "position");
            initialize("createShape", "position", valuePosition);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createShape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createShape", "password");
            initialize("createShape", "password", valuePassword);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createShape", "folder");
            initialize("createShape", "folder", valueFolder);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createShape");
        }
    }
    /**
     * Create new shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createShape", "slideIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createShape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createShape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createShape", "position");
        String valuePassword = (String)getTestValue("String", "createShape", "password");
        String valueFolder = (String)getTestValue("String", "createShape", "folder");
        String valueStorage = (String)getTestValue("String", "createShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createShape", "storage");
            initialize("createShape", "storage", valueStorage);
            ShapeBase response = api.createShape(valueName, valueSlideIndex, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createShape");
        }
    }
    
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideTest() throws ApiException, Exception {
        initialize("createSlide", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSlide", "name");
            initialize("createSlide", "name", valueName);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidLayoutAliasTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueLayoutAlias = (String)invalidizeTestValue("String", valueLayoutAlias, "createSlide", "layoutAlias");
            initialize("createSlide", "layoutAlias", valueLayoutAlias);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "layoutAlias", "createSlide", valueLayoutAlias);
        }
        if (needAssertResponse) {
            assertResponse("layoutAlias", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSlide", "position");
            initialize("createSlide", "position", valuePosition);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createSlide", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSlide", "password");
            initialize("createSlide", "password", valuePassword);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSlide", "folder");
            initialize("createSlide", "folder", valueFolder);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createSlide");
        }
    }
    /**
     * Create a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSlide", "name");
        String valueLayoutAlias = (String)getTestValue("String", "createSlide", "layoutAlias");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSlide", "position");
        String valuePassword = (String)getTestValue("String", "createSlide", "password");
        String valueFolder = (String)getTestValue("String", "createSlide", "folder");
        String valueStorage = (String)getTestValue("String", "createSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSlide", "storage");
            initialize("createSlide", "storage", valueStorage);
            Slides response = api.createSlide(valueName, valueLayoutAlias, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createSlide");
        }
    }
    
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeTest() throws ApiException, Exception {
        initialize("createSubshape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSubshape", "name");
            initialize("createSubshape", "name", valueName);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSubshape", "slideIndex");
            initialize("createSubshape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "createSubshape", "path");
            initialize("createSubshape", "path", valuePath);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "createSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "createSubshape", "dto");
            initialize("createSubshape", "dto", valueDto);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createSubshape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidShapeToCloneTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valueShapeToClone = (Integer)invalidizeTestValue("Integer", valueShapeToClone, "createSubshape", "shapeToClone");
            initialize("createSubshape", "shapeToClone", valueShapeToClone);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeToClone", "createSubshape", valueShapeToClone);
        }
        if (needAssertResponse) {
            assertResponse("shapeToClone", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSubshape", "position");
            initialize("createSubshape", "position", valuePosition);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createSubshape", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSubshape", "password");
            initialize("createSubshape", "password", valuePassword);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSubshape", "folder");
            initialize("createSubshape", "folder", valueFolder);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createSubshape");
        }
    }
    /**
     * Create new shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshape", "path");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "createSubshape", "dto");
        Integer valueShapeToClone = (Integer)getTestValue("Integer", "createSubshape", "shapeToClone");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshape", "position");
        String valuePassword = (String)getTestValue("String", "createSubshape", "password");
        String valueFolder = (String)getTestValue("String", "createSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSubshape", "storage");
            initialize("createSubshape", "storage", valueStorage);
            ShapeBase response = api.createSubshape(valueName, valueSlideIndex, valuePath, valueDto, valueShapeToClone, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createSubshape");
        }
    }
    
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphTest() throws ApiException, Exception {
        initialize("createSubshapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSubshapeParagraph", "name");
            initialize("createSubshapeParagraph", "name", valueName);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createSubshapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSubshapeParagraph", "slideIndex");
            initialize("createSubshapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createSubshapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "createSubshapeParagraph", "path");
            initialize("createSubshapeParagraph", "path", valuePath);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "createSubshapeParagraph", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createSubshapeParagraph", "shapeIndex");
            initialize("createSubshapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createSubshapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "createSubshapeParagraph", "dto");
            initialize("createSubshapeParagraph", "dto", valueDto);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createSubshapeParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSubshapeParagraph", "position");
            initialize("createSubshapeParagraph", "position", valuePosition);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createSubshapeParagraph", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSubshapeParagraph", "password");
            initialize("createSubshapeParagraph", "password", valuePassword);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createSubshapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSubshapeParagraph", "folder");
            initialize("createSubshapeParagraph", "folder", valueFolder);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createSubshapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createSubshapeParagraph");
        }
    }
    /**
     * Creates new paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapeParagraph", "shapeIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "createSubshapeParagraph", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapeParagraph", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSubshapeParagraph", "storage");
            initialize("createSubshapeParagraph", "storage", valueStorage);
            Paragraph response = api.createSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createSubshapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createSubshapeParagraph");
        }
    }
    
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionTest() throws ApiException, Exception {
        initialize("createSubshapePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createSubshapePortion", "name");
            initialize("createSubshapePortion", "name", valueName);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createSubshapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "createSubshapePortion", "slideIndex");
            initialize("createSubshapePortion", "slideIndex", valueSlideIndex);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "createSubshapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "createSubshapePortion", "path");
            initialize("createSubshapePortion", "path", valuePath);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "createSubshapePortion", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "createSubshapePortion", "shapeIndex");
            initialize("createSubshapePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "createSubshapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "createSubshapePortion", "paragraphIndex");
            initialize("createSubshapePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "createSubshapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "createSubshapePortion", "dto");
            initialize("createSubshapePortion", "dto", valueDto);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "createSubshapePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valuePosition = (Integer)invalidizeTestValue("Integer", valuePosition, "createSubshapePortion", "position");
            initialize("createSubshapePortion", "position", valuePosition);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "position", "createSubshapePortion", valuePosition);
        }
        if (needAssertResponse) {
            assertResponse("position", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createSubshapePortion", "password");
            initialize("createSubshapePortion", "password", valuePassword);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createSubshapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createSubshapePortion", "folder");
            initialize("createSubshapePortion", "folder", valueFolder);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createSubshapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createSubshapePortion");
        }
    }
    /**
     * Creates new portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubshapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "createSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "createSubshapePortion", "paragraphIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "createSubshapePortion", "dto");
        Integer valuePosition = (Integer)getTestValue("Integer", "createSubshapePortion", "position");
        String valuePassword = (String)getTestValue("String", "createSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "createSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "createSubshapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createSubshapePortion", "storage");
            initialize("createSubshapePortion", "storage", valueStorage);
            Portion response = api.createSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createSubshapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createSubshapePortion");
        }
    }
    
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkTest() throws ApiException, Exception {
        initialize("createWatermark", null, null);
        ;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "createWatermark", "name");
            initialize("createWatermark", "name", valueName);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "createWatermark", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueShape = (Shape)invalidizeTestValue("Shape", valueShape, "createWatermark", "shape");
            initialize("createWatermark", "shape", valueShape);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shape", "createWatermark", valueShape);
        }
        if (needAssertResponse) {
            assertResponse("shape", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFontHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFontHeight = (Double)invalidizeTestValue("Double", valueFontHeight, "createWatermark", "fontHeight");
            initialize("createWatermark", "fontHeight", valueFontHeight);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontHeight", "createWatermark", valueFontHeight);
        }
        if (needAssertResponse) {
            assertResponse("fontHeight", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidTextTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueText = (String)invalidizeTestValue("String", valueText, "createWatermark", "text");
            initialize("createWatermark", "text", valueText);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "text", "createWatermark", valueText);
        }
        if (needAssertResponse) {
            assertResponse("text", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "createWatermark", "fontName");
            initialize("createWatermark", "fontName", valueFontName);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontName", "createWatermark", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("fontName", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFontColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFontColor = (String)invalidizeTestValue("String", valueFontColor, "createWatermark", "fontColor");
            initialize("createWatermark", "fontColor", valueFontColor);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontColor", "createWatermark", valueFontColor);
        }
        if (needAssertResponse) {
            assertResponse("fontColor", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createWatermark", "password");
            initialize("createWatermark", "password", valuePassword);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createWatermark", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "createWatermark", "folder");
            initialize("createWatermark", "folder", valueFolder);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "createWatermark", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "createWatermark");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "createWatermark", "name");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermark", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermark", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermark", "text");
        String valueFontName = (String)getTestValue("String", "createWatermark", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermark", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermark", "password");
        String valueFolder = (String)getTestValue("String", "createWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "createWatermark", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "createWatermark", "storage");
            initialize("createWatermark", "storage", valueStorage);
            api.createWatermark(valueName, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "createWatermark", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "createWatermark");
        }
    }
    
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineTest() throws ApiException, Exception {
        initialize("createWatermarkOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "createWatermarkOnline", "document");
            initialize("createWatermarkOnline", "document", valueDocument);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "createWatermarkOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidShapeTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueShape = (Shape)invalidizeTestValue("Shape", valueShape, "createWatermarkOnline", "shape");
            initialize("createWatermarkOnline", "shape", valueShape);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shape", "createWatermarkOnline", valueShape);
        }
        if (needAssertResponse) {
            assertResponse("shape", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidFontHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueFontHeight = (Double)invalidizeTestValue("Double", valueFontHeight, "createWatermarkOnline", "fontHeight");
            initialize("createWatermarkOnline", "fontHeight", valueFontHeight);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontHeight", "createWatermarkOnline", valueFontHeight);
        }
        if (needAssertResponse) {
            assertResponse("fontHeight", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidTextTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueText = (String)invalidizeTestValue("String", valueText, "createWatermarkOnline", "text");
            initialize("createWatermarkOnline", "text", valueText);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "text", "createWatermarkOnline", valueText);
        }
        if (needAssertResponse) {
            assertResponse("text", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidFontNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueFontName = (String)invalidizeTestValue("String", valueFontName, "createWatermarkOnline", "fontName");
            initialize("createWatermarkOnline", "fontName", valueFontName);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontName", "createWatermarkOnline", valueFontName);
        }
        if (needAssertResponse) {
            assertResponse("fontName", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidFontColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valueFontColor = (String)invalidizeTestValue("String", valueFontColor, "createWatermarkOnline", "fontColor");
            initialize("createWatermarkOnline", "fontColor", valueFontColor);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontColor", "createWatermarkOnline", valueFontColor);
        }
        if (needAssertResponse) {
            assertResponse("fontColor", "createWatermarkOnline");
        }
    }
    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWatermarkOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "createWatermarkOnline", "document");
        Shape valueShape = (Shape)getTestValue("Shape", "createWatermarkOnline", "shape");
        Double valueFontHeight = (Double)getTestValue("Double", "createWatermarkOnline", "fontHeight");
        String valueText = (String)getTestValue("String", "createWatermarkOnline", "text");
        String valueFontName = (String)getTestValue("String", "createWatermarkOnline", "fontName");
        String valueFontColor = (String)getTestValue("String", "createWatermarkOnline", "fontColor");
        String valuePassword = (String)getTestValue("String", "createWatermarkOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "createWatermarkOnline", "password");
            initialize("createWatermarkOnline", "password", valuePassword);
            File response = api.createWatermarkOnline(valueDocument, valueShape, valueFontHeight, valueText, valueFontName, valueFontColor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "createWatermarkOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "createWatermarkOnline");
        }
    }
    
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationTest() throws ApiException, Exception {
        initialize("deleteAnimation", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimation", "name");
            initialize("deleteAnimation", "name", valueName);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimation", "slideIndex");
            initialize("deleteAnimation", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimation", "password");
            initialize("deleteAnimation", "password", valuePassword);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimation", "folder");
            initialize("deleteAnimation", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteAnimation");
        }
    }
    /**
     * Remove animation from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimation", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimation", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimation", "storage");
            initialize("deleteAnimation", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimation(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteAnimation");
        }
    }
    
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectTest() throws ApiException, Exception {
        initialize("deleteAnimationEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationEffect", "name");
            initialize("deleteAnimationEffect", "name", valueName);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationEffect", "slideIndex");
            initialize("deleteAnimationEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteAnimationEffect", "effectIndex");
            initialize("deleteAnimationEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "deleteAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationEffect", "password");
            initialize("deleteAnimationEffect", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationEffect", "folder");
            initialize("deleteAnimationEffect", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteAnimationEffect");
        }
    }
    /**
     * Remove an effect from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationEffect", "storage");
            initialize("deleteAnimationEffect", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteAnimationEffect");
        }
    }
    
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceTest() throws ApiException, Exception {
        initialize("deleteAnimationInteractiveSequence", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationInteractiveSequence", "name");
            initialize("deleteAnimationInteractiveSequence", "name", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteAnimationInteractiveSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationInteractiveSequence", "slideIndex");
            initialize("deleteAnimationInteractiveSequence", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteAnimationInteractiveSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteAnimationInteractiveSequence", "sequenceIndex");
            initialize("deleteAnimationInteractiveSequence", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "deleteAnimationInteractiveSequence", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationInteractiveSequence", "password");
            initialize("deleteAnimationInteractiveSequence", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteAnimationInteractiveSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationInteractiveSequence", "folder");
            initialize("deleteAnimationInteractiveSequence", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteAnimationInteractiveSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteAnimationInteractiveSequence");
        }
    }
    /**
     * Remove an interactive sequence from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequence", "sequenceIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationInteractiveSequence", "storage");
            initialize("deleteAnimationInteractiveSequence", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequence(valueName, valueSlideIndex, valueSequenceIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteAnimationInteractiveSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteAnimationInteractiveSequence");
        }
    }
    
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("deleteAnimationInteractiveSequenceEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationInteractiveSequenceEffect", "name");
            initialize("deleteAnimationInteractiveSequenceEffect", "name", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "deleteAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "deleteAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "deleteAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationInteractiveSequenceEffect", "password");
            initialize("deleteAnimationInteractiveSequenceEffect", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationInteractiveSequenceEffect", "folder");
            initialize("deleteAnimationInteractiveSequenceEffect", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Remove an effect from slide animation interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequenceEffect", "effectIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationInteractiveSequenceEffect", "storage");
            initialize("deleteAnimationInteractiveSequenceEffect", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesTest() throws ApiException, Exception {
        initialize("deleteAnimationInteractiveSequences", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationInteractiveSequences", "name");
            initialize("deleteAnimationInteractiveSequences", "name", valueName);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteAnimationInteractiveSequences", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationInteractiveSequences", "slideIndex");
            initialize("deleteAnimationInteractiveSequences", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteAnimationInteractiveSequences", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationInteractiveSequences", "password");
            initialize("deleteAnimationInteractiveSequences", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteAnimationInteractiveSequences", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationInteractiveSequences", "folder");
            initialize("deleteAnimationInteractiveSequences", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteAnimationInteractiveSequences", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteAnimationInteractiveSequences");
        }
    }
    /**
     * Clear all interactive sequences from slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationInteractiveSequencesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationInteractiveSequences", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationInteractiveSequences", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationInteractiveSequences", "storage");
            initialize("deleteAnimationInteractiveSequences", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationInteractiveSequences(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteAnimationInteractiveSequences", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteAnimationInteractiveSequences");
        }
    }
    
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceTest() throws ApiException, Exception {
        initialize("deleteAnimationMainSequence", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteAnimationMainSequence", "name");
            initialize("deleteAnimationMainSequence", "name", valueName);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteAnimationMainSequence", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteAnimationMainSequence", "slideIndex");
            initialize("deleteAnimationMainSequence", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteAnimationMainSequence", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteAnimationMainSequence", "password");
            initialize("deleteAnimationMainSequence", "password", valuePassword);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteAnimationMainSequence", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteAnimationMainSequence", "folder");
            initialize("deleteAnimationMainSequence", "folder", valueFolder);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteAnimationMainSequence", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteAnimationMainSequence");
        }
    }
    /**
     * Clear main sequence in slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAnimationMainSequenceInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteAnimationMainSequence", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteAnimationMainSequence", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteAnimationMainSequence", "password");
        String valueFolder = (String)getTestValue("String", "deleteAnimationMainSequence", "folder");
        String valueStorage = (String)getTestValue("String", "deleteAnimationMainSequence", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteAnimationMainSequence", "storage");
            initialize("deleteAnimationMainSequence", "storage", valueStorage);
            SlideAnimation response = api.deleteAnimationMainSequence(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteAnimationMainSequence", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteAnimationMainSequence");
        }
    }
    
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundTest() throws ApiException, Exception {
        initialize("deleteBackground", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteBackground", "name");
            initialize("deleteBackground", "name", valueName);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteBackground", "slideIndex");
            initialize("deleteBackground", "slideIndex", valueSlideIndex);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteBackground", "password");
            initialize("deleteBackground", "password", valuePassword);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteBackground", "folder");
            initialize("deleteBackground", "folder", valueFolder);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteBackground");
        }
    }
    /**
     * Remove background from a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteBackground", "password");
        String valueFolder = (String)getTestValue("String", "deleteBackground", "folder");
        String valueStorage = (String)getTestValue("String", "deleteBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteBackground", "storage");
            initialize("deleteBackground", "storage", valueStorage);
            SlideBackground response = api.deleteBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteBackground");
        }
    }
    
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryTest() throws ApiException, Exception {
        initialize("deleteChartCategory", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartCategory", "name");
            initialize("deleteChartCategory", "name", valueName);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartCategory", "slideIndex");
            initialize("deleteChartCategory", "slideIndex", valueSlideIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartCategory", "shapeIndex");
            initialize("deleteChartCategory", "shapeIndex", valueShapeIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidCategoryIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueCategoryIndex = (Integer)invalidizeTestValue("Integer", valueCategoryIndex, "deleteChartCategory", "categoryIndex");
            initialize("deleteChartCategory", "categoryIndex", valueCategoryIndex);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "categoryIndex", "deleteChartCategory", valueCategoryIndex);
        }
        if (needAssertResponse) {
            assertResponse("categoryIndex", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartCategory", "password");
            initialize("deleteChartCategory", "password", valuePassword);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartCategory", "folder");
            initialize("deleteChartCategory", "folder", valueFolder);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteChartCategory");
        }
    }
    /**
     * Delete a category from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "deleteChartCategory", "categoryIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartCategory", "storage");
            initialize("deleteChartCategory", "storage", valueStorage);
            Chart response = api.deleteChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteChartCategory");
        }
    }
    
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointTest() throws ApiException, Exception {
        initialize("deleteChartDataPoint", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartDataPoint", "name");
            initialize("deleteChartDataPoint", "name", valueName);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartDataPoint", "slideIndex");
            initialize("deleteChartDataPoint", "slideIndex", valueSlideIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartDataPoint", "shapeIndex");
            initialize("deleteChartDataPoint", "shapeIndex", valueShapeIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "deleteChartDataPoint", "seriesIndex");
            initialize("deleteChartDataPoint", "seriesIndex", valueSeriesIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "deleteChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidPointIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valuePointIndex = (Integer)invalidizeTestValue("Integer", valuePointIndex, "deleteChartDataPoint", "pointIndex");
            initialize("deleteChartDataPoint", "pointIndex", valuePointIndex);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pointIndex", "deleteChartDataPoint", valuePointIndex);
        }
        if (needAssertResponse) {
            assertResponse("pointIndex", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartDataPoint", "password");
            initialize("deleteChartDataPoint", "password", valuePassword);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartDataPoint", "folder");
            initialize("deleteChartDataPoint", "folder", valueFolder);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteChartDataPoint");
        }
    }
    /**
     * Delete a data point from a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "deleteChartDataPoint", "pointIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartDataPoint", "storage");
            initialize("deleteChartDataPoint", "storage", valueStorage);
            Chart response = api.deleteChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteChartDataPoint");
        }
    }
    
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesTest() throws ApiException, Exception {
        initialize("deleteChartSeries", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteChartSeries", "name");
            initialize("deleteChartSeries", "name", valueName);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteChartSeries", "slideIndex");
            initialize("deleteChartSeries", "slideIndex", valueSlideIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteChartSeries", "shapeIndex");
            initialize("deleteChartSeries", "shapeIndex", valueShapeIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "deleteChartSeries", "seriesIndex");
            initialize("deleteChartSeries", "seriesIndex", valueSeriesIndex);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "deleteChartSeries", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteChartSeries", "password");
            initialize("deleteChartSeries", "password", valuePassword);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteChartSeries", "folder");
            initialize("deleteChartSeries", "folder", valueFolder);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteChartSeries");
        }
    }
    /**
     * Delete a series from a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "deleteChartSeries", "seriesIndex");
        String valuePassword = (String)getTestValue("String", "deleteChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "deleteChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "deleteChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteChartSeries", "storage");
            initialize("deleteChartSeries", "storage", valueStorage);
            Chart response = api.deleteChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteChartSeries");
        }
    }
    
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsTest() throws ApiException, Exception {
        initialize("deleteComments", null, null);
        ;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteComments", "name");
            initialize("deleteComments", "name", valueName);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteComments", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteComments", "author");
            initialize("deleteComments", "author", valueAuthor);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "author", "deleteComments", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("author", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteComments", "password");
            initialize("deleteComments", "password", valuePassword);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteComments", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteComments", "folder");
            initialize("deleteComments", "folder", valueFolder);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteComments", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteComments");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteComments", "name");
        String valueAuthor = (String)getTestValue("String", "deleteComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteComments", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteComments", "storage");
            initialize("deleteComments", "storage", valueStorage);
            api.deleteComments(valueName, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteComments", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteComments");
        }
    }
    
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineTest() throws ApiException, Exception {
        initialize("deleteCommentsOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteCommentsOnline", "document");
            initialize("deleteCommentsOnline", "document", valueDocument);
            File response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "deleteCommentsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "deleteCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteCommentsOnline", "author");
            initialize("deleteCommentsOnline", "author", valueAuthor);
            File response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "author", "deleteCommentsOnline", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("author", "deleteCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteCommentsOnline", "document");
        String valueAuthor = (String)getTestValue("String", "deleteCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteCommentsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteCommentsOnline", "password");
            initialize("deleteCommentsOnline", "password", valuePassword);
            File response = api.deleteCommentsOnline(valueDocument, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteCommentsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteCommentsOnline");
        }
    }
    
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesTest() throws ApiException, Exception {
        initialize("deleteDocumentProperties", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteDocumentProperties", "name");
            initialize("deleteDocumentProperties", "name", valueName);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteDocumentProperties", "password");
            initialize("deleteDocumentProperties", "password", valuePassword);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteDocumentProperties", "folder");
            initialize("deleteDocumentProperties", "folder", valueFolder);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteDocumentProperties");
        }
    }
    /**
     * Clean document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteDocumentProperties", "storage");
            initialize("deleteDocumentProperties", "storage", valueStorage);
            DocumentProperties response = api.deleteDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteDocumentProperties");
        }
    }
    
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyTest() throws ApiException, Exception {
        initialize("deleteDocumentProperty", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteDocumentProperty", "name");
            initialize("deleteDocumentProperty", "name", valueName);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "deleteDocumentProperty", "propertyName");
            initialize("deleteDocumentProperty", "propertyName", valuePropertyName);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "propertyName", "deleteDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("propertyName", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteDocumentProperty", "password");
            initialize("deleteDocumentProperty", "password", valuePassword);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteDocumentProperty", "folder");
            initialize("deleteDocumentProperty", "folder", valueFolder);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteDocumentProperty");
        }
    }
    /**
     * Delete document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "deleteDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "deleteDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "deleteDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "deleteDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteDocumentProperty", "storage");
            initialize("deleteDocumentProperty", "storage", valueStorage);
            DocumentProperties response = api.deleteDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteDocumentProperty");
        }
    }
    
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException, Exception {
        initialize("deleteFile", null, null);
        ;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        api.deleteFile(valuePath, valueStorageName, valueVersionId);
    }

    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteFile", "path");
            initialize("deleteFile", "path", valuePath);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteFile");
        }
    }
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "deleteFile", "storageName");
            initialize("deleteFile", "storageName", valueStorageName);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "deleteFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "deleteFile");
        }
    }
    /**
     * Delete file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFile", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "deleteFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "deleteFile", "versionId");
            initialize("deleteFile", "versionId", valueVersionId);
            api.deleteFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "deleteFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "deleteFile");
        }
    }
    
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException, Exception {
        initialize("deleteFolder", null, null);
        ;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        api.deleteFolder(valuePath, valueStorageName, valueRecursive);
    }

    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteFolder", "path");
            initialize("deleteFolder", "path", valuePath);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteFolder", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteFolder");
        }
    }
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "deleteFolder", "storageName");
            initialize("deleteFolder", "storageName", valueStorageName);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "deleteFolder", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "deleteFolder");
        }
    }
    /**
     * Delete folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFolderInvalidRecursiveTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "deleteFolder", "path");
        String valueStorageName = (String)getTestValue("String", "deleteFolder", "storageName");
        Boolean valueRecursive = (Boolean)getTestValue("Boolean", "deleteFolder", "recursive");
        try {
            valueRecursive = (Boolean)invalidizeTestValue("Boolean", valueRecursive, "deleteFolder", "recursive");
            initialize("deleteFolder", "recursive", valueRecursive);
            api.deleteFolder(valuePath, valueStorageName, valueRecursive);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "recursive", "deleteFolder", valueRecursive);
        }
        if (needAssertResponse) {
            assertResponse("recursive", "deleteFolder");
        }
    }
    
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideTest() throws ApiException, Exception {
        initialize("deleteNotesSlide", null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlide", "name");
            initialize("deleteNotesSlide", "name", valueName);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlide", "slideIndex");
            initialize("deleteNotesSlide", "slideIndex", valueSlideIndex);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlide", "password");
            initialize("deleteNotesSlide", "password", valuePassword);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlide", "folder");
            initialize("deleteNotesSlide", "folder", valueFolder);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlide");
        }
    }
    /**
     * Remove notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlide", "storage");
            initialize("deleteNotesSlide", "storage", valueStorage);
            Slide response = api.deleteNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlide");
        }
    }
    
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphTest() throws ApiException, Exception {
        initialize("deleteNotesSlideParagraph", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideParagraph", "name");
            initialize("deleteNotesSlideParagraph", "name", valueName);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideParagraph", "slideIndex");
            initialize("deleteNotesSlideParagraph", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlideParagraph", "shapeIndex");
            initialize("deleteNotesSlideParagraph", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteNotesSlideParagraph", "paragraphIndex");
            initialize("deleteNotesSlideParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteNotesSlideParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideParagraph", "password");
            initialize("deleteNotesSlideParagraph", "password", valuePassword);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideParagraph", "folder");
            initialize("deleteNotesSlideParagraph", "folder", valueFolder);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideParagraph", "storage");
            initialize("deleteNotesSlideParagraph", "storage", valueStorage);
            Paragraphs response = api.deleteNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsTest() throws ApiException, Exception {
        initialize("deleteNotesSlideParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideParagraphs", "name");
            initialize("deleteNotesSlideParagraphs", "name", valueName);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideParagraphs", "slideIndex");
            initialize("deleteNotesSlideParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlideParagraphs", "shapeIndex");
            initialize("deleteNotesSlideParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlideParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteNotesSlideParagraphs", "paragraphs");
            initialize("deleteNotesSlideParagraphs", "paragraphs", valueParagraphs);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphs", "deleteNotesSlideParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("paragraphs", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideParagraphs", "password");
            initialize("deleteNotesSlideParagraphs", "password", valuePassword);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideParagraphs", "folder");
            initialize("deleteNotesSlideParagraphs", "folder", valueFolder);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideParagraphs", "storage");
            initialize("deleteNotesSlideParagraphs", "storage", valueStorage);
            Paragraphs response = api.deleteNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideParagraphs");
        }
    }
    
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionTest() throws ApiException, Exception {
        initialize("deleteNotesSlidePortion", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlidePortion", "name");
            initialize("deleteNotesSlidePortion", "name", valueName);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlidePortion", "slideIndex");
            initialize("deleteNotesSlidePortion", "slideIndex", valueSlideIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlidePortion", "shapeIndex");
            initialize("deleteNotesSlidePortion", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteNotesSlidePortion", "paragraphIndex");
            initialize("deleteNotesSlidePortion", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteNotesSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deleteNotesSlidePortion", "portionIndex");
            initialize("deleteNotesSlidePortion", "portionIndex", valuePortionIndex);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "deleteNotesSlidePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlidePortion", "password");
            initialize("deleteNotesSlidePortion", "password", valuePassword);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlidePortion", "folder");
            initialize("deleteNotesSlidePortion", "folder", valueFolder);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlidePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlidePortion", "storage");
            initialize("deleteNotesSlidePortion", "storage", valueStorage);
            Portions response = api.deleteNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlidePortion");
        }
    }
    
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsTest() throws ApiException, Exception {
        initialize("deleteNotesSlidePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlidePortions", "name");
            initialize("deleteNotesSlidePortions", "name", valueName);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlidePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlidePortions", "slideIndex");
            initialize("deleteNotesSlidePortions", "slideIndex", valueSlideIndex);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlidePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlidePortions", "shapeIndex");
            initialize("deleteNotesSlidePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlidePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteNotesSlidePortions", "paragraphIndex");
            initialize("deleteNotesSlidePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteNotesSlidePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deleteNotesSlidePortions", "portions");
            initialize("deleteNotesSlidePortions", "portions", valuePortions);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portions", "deleteNotesSlidePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("portions", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlidePortions", "password");
            initialize("deleteNotesSlidePortions", "password", valuePassword);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlidePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlidePortions", "folder");
            initialize("deleteNotesSlidePortions", "folder", valueFolder);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlidePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlidePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlidePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteNotesSlidePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlidePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlidePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlidePortions", "storage");
            initialize("deleteNotesSlidePortions", "storage", valueStorage);
            Portions response = api.deleteNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlidePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlidePortions");
        }
    }
    
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeTest() throws ApiException, Exception {
        initialize("deleteNotesSlideShape", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideShape", "name");
            initialize("deleteNotesSlideShape", "name", valueName);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideShape", "slideIndex");
            initialize("deleteNotesSlideShape", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteNotesSlideShape", "shapeIndex");
            initialize("deleteNotesSlideShape", "shapeIndex", valueShapeIndex);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideShape", "password");
            initialize("deleteNotesSlideShape", "password", valuePassword);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideShape", "folder");
            initialize("deleteNotesSlideShape", "folder", valueFolder);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideShape", "storage");
            initialize("deleteNotesSlideShape", "storage", valueStorage);
            Shapes response = api.deleteNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideShape");
        }
    }
    
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesTest() throws ApiException, Exception {
        initialize("deleteNotesSlideShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteNotesSlideShapes", "name");
            initialize("deleteNotesSlideShapes", "name", valueName);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteNotesSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteNotesSlideShapes", "slideIndex");
            initialize("deleteNotesSlideShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteNotesSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteNotesSlideShapes", "shapes");
            initialize("deleteNotesSlideShapes", "shapes", valueShapes);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "deleteNotesSlideShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteNotesSlideShapes", "password");
            initialize("deleteNotesSlideShapes", "password", valuePassword);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteNotesSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteNotesSlideShapes", "folder");
            initialize("deleteNotesSlideShapes", "folder", valueFolder);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteNotesSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteNotesSlideShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotesSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteNotesSlideShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteNotesSlideShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteNotesSlideShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteNotesSlideShapes", "storage");
            initialize("deleteNotesSlideShapes", "storage", valueStorage);
            Shapes response = api.deleteNotesSlideShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteNotesSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteNotesSlideShapes");
        }
    }
    
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphTest() throws ApiException, Exception {
        initialize("deleteParagraph", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteParagraph", "name");
            initialize("deleteParagraph", "name", valueName);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteParagraph", "slideIndex");
            initialize("deleteParagraph", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteParagraph", "shapeIndex");
            initialize("deleteParagraph", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteParagraph", "paragraphIndex");
            initialize("deleteParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteParagraph", "password");
            initialize("deleteParagraph", "password", valuePassword);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteParagraph", "folder");
            initialize("deleteParagraph", "folder", valueFolder);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteParagraph");
        }
    }
    /**
     * Remove a paragraph.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteParagraph", "storage");
            initialize("deleteParagraph", "storage", valueStorage);
            Paragraphs response = api.deleteParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsTest() throws ApiException, Exception {
        initialize("deleteParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteParagraphs", "name");
            initialize("deleteParagraphs", "name", valueName);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteParagraphs", "slideIndex");
            initialize("deleteParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteParagraphs", "shapeIndex");
            initialize("deleteParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteParagraphs", "paragraphs");
            initialize("deleteParagraphs", "paragraphs", valueParagraphs);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphs", "deleteParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("paragraphs", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteParagraphs", "password");
            initialize("deleteParagraphs", "password", valuePassword);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteParagraphs", "folder");
            initialize("deleteParagraphs", "folder", valueFolder);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteParagraphs", "storage");
            initialize("deleteParagraphs", "storage", valueStorage);
            Paragraphs response = api.deleteParagraphs(valueName, valueSlideIndex, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteParagraphs");
        }
    }
    
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionTest() throws ApiException, Exception {
        initialize("deletePortion", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deletePortion", "name");
            initialize("deletePortion", "name", valueName);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deletePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deletePortion", "slideIndex");
            initialize("deletePortion", "slideIndex", valueSlideIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deletePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deletePortion", "shapeIndex");
            initialize("deletePortion", "shapeIndex", valueShapeIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deletePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deletePortion", "paragraphIndex");
            initialize("deletePortion", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deletePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deletePortion", "portionIndex");
            initialize("deletePortion", "portionIndex", valuePortionIndex);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "deletePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deletePortion", "password");
            initialize("deletePortion", "password", valuePassword);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deletePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deletePortion", "folder");
            initialize("deletePortion", "folder", valueFolder);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deletePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deletePortion");
        }
    }
    /**
     * Remove a portion.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deletePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deletePortion", "password");
        String valueFolder = (String)getTestValue("String", "deletePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deletePortion", "storage");
            initialize("deletePortion", "storage", valueStorage);
            Portions response = api.deletePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deletePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deletePortion");
        }
    }
    
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsTest() throws ApiException, Exception {
        initialize("deletePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deletePortions", "name");
            initialize("deletePortions", "name", valueName);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deletePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deletePortions", "slideIndex");
            initialize("deletePortions", "slideIndex", valueSlideIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deletePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deletePortions", "shapeIndex");
            initialize("deletePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deletePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deletePortions", "paragraphIndex");
            initialize("deletePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deletePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deletePortions", "portions");
            initialize("deletePortions", "portions", valuePortions);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portions", "deletePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("portions", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deletePortions", "password");
            initialize("deletePortions", "password", valuePassword);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deletePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deletePortions", "folder");
            initialize("deletePortions", "folder", valueFolder);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deletePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deletePortions");
        }
    }
    /**
     * Remove a range of portions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deletePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deletePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deletePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deletePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deletePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deletePortions", "password");
        String valueFolder = (String)getTestValue("String", "deletePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deletePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deletePortions", "storage");
            initialize("deletePortions", "storage", valueStorage);
            Portions response = api.deletePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deletePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deletePortions");
        }
    }
    
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionTest() throws ApiException, Exception {
        initialize("deleteProtection", null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteProtection", "name");
            initialize("deleteProtection", "name", valueName);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteProtection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteProtection");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteProtection", "password");
            initialize("deleteProtection", "password", valuePassword);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteProtection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteProtection");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteProtection", "folder");
            initialize("deleteProtection", "folder", valueFolder);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteProtection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteProtection");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteProtection", "name");
        String valuePassword = (String)getTestValue("String", "deleteProtection", "password");
        String valueFolder = (String)getTestValue("String", "deleteProtection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteProtection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteProtection", "storage");
            initialize("deleteProtection", "storage", valueStorage);
            ProtectionProperties response = api.deleteProtection(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteProtection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteProtection");
        }
    }
    
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionOnlineTest() throws ApiException, Exception {
        initialize("deleteProtectionOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteProtectionOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteProtectionOnline", "password");
        response = api.deleteProtectionOnline(valueDocument, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteProtectionOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteProtectionOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteProtectionOnline", "document");
            initialize("deleteProtectionOnline", "document", valueDocument);
            File response = api.deleteProtectionOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "deleteProtectionOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "deleteProtectionOnline");
        }
    }
    /**
     * Resets all presentation protection settings. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProtectionOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteProtectionOnline", "document");
        String valuePassword = (String)getTestValue("String", "deleteProtectionOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteProtectionOnline", "password");
            initialize("deleteProtectionOnline", "password", valuePassword);
            File response = api.deleteProtectionOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteProtectionOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteProtectionOnline");
        }
    }
    
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionTest() throws ApiException, Exception {
        initialize("deleteSection", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSection", "name");
            initialize("deleteSection", "name", valueName);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "deleteSection", "sectionIndex");
            initialize("deleteSection", "sectionIndex", valueSectionIndex);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionIndex", "deleteSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("sectionIndex", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidWithSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueWithSlides = (Boolean)invalidizeTestValue("Boolean", valueWithSlides, "deleteSection", "withSlides");
            initialize("deleteSection", "withSlides", valueWithSlides);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withSlides", "deleteSection", valueWithSlides);
        }
        if (needAssertResponse) {
            assertResponse("withSlides", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSection", "password");
            initialize("deleteSection", "password", valuePassword);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSection", "folder");
            initialize("deleteSection", "folder", valueFolder);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSection");
        }
    }
    /**
     * Delete a presentation section.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "deleteSection", "sectionIndex");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSection", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSection", "password");
        String valueFolder = (String)getTestValue("String", "deleteSection", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSection", "storage");
            initialize("deleteSection", "storage", valueStorage);
            Sections response = api.deleteSection(valueName, valueSectionIndex, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSection");
        }
    }
    
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsTest() throws ApiException, Exception {
        initialize("deleteSections", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSections", "name");
            initialize("deleteSections", "name", valueName);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidSectionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueSections = (List<Integer>)invalidizeTestValue("List<Integer>", valueSections, "deleteSections", "sections");
            initialize("deleteSections", "sections", valueSections);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sections", "deleteSections", valueSections);
        }
        if (needAssertResponse) {
            assertResponse("sections", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidWithSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueWithSlides = (Boolean)invalidizeTestValue("Boolean", valueWithSlides, "deleteSections", "withSlides");
            initialize("deleteSections", "withSlides", valueWithSlides);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withSlides", "deleteSections", valueWithSlides);
        }
        if (needAssertResponse) {
            assertResponse("withSlides", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSections", "password");
            initialize("deleteSections", "password", valuePassword);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSections", "folder");
            initialize("deleteSections", "folder", valueFolder);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSections");
        }
    }
    /**
     * Delete presentation sections.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSections", "name");
        List<Integer> valueSections = (List<Integer>)getTestValue("List<Integer>", "deleteSections", "sections");
        Boolean valueWithSlides = (Boolean)getTestValue("Boolean", "deleteSections", "withSlides");
        String valuePassword = (String)getTestValue("String", "deleteSections", "password");
        String valueFolder = (String)getTestValue("String", "deleteSections", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSections", "storage");
            initialize("deleteSections", "storage", valueStorage);
            Sections response = api.deleteSections(valueName, valueSections, valueWithSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSections");
        }
    }
    
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeTest() throws ApiException, Exception {
        initialize("deleteShape", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteShape", "name");
            initialize("deleteShape", "name", valueName);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteShape", "slideIndex");
            initialize("deleteShape", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteShape", "shapeIndex");
            initialize("deleteShape", "shapeIndex", valueShapeIndex);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteShape", "password");
            initialize("deleteShape", "password", valuePassword);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteShape", "folder");
            initialize("deleteShape", "folder", valueFolder);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteShape");
        }
    }
    /**
     * Remove a shape.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteShape", "password");
        String valueFolder = (String)getTestValue("String", "deleteShape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteShape", "storage");
            initialize("deleteShape", "storage", valueStorage);
            Shapes response = api.deleteShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteShape");
        }
    }
    
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesTest() throws ApiException, Exception {
        initialize("deleteShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteShapes", "name");
            initialize("deleteShapes", "name", valueName);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteShapes", "slideIndex");
            initialize("deleteShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteShapes", "shapes");
            initialize("deleteShapes", "shapes", valueShapes);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "deleteShapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteShapes", "password");
            initialize("deleteShapes", "password", valuePassword);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteShapes", "folder");
            initialize("deleteShapes", "folder", valueFolder);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteShapes");
        }
    }
    /**
     * Remove a range of shapes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteShapes", "slideIndex");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteShapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteShapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteShapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteShapes", "storage");
            initialize("deleteShapes", "storage", valueStorage);
            Shapes response = api.deleteShapes(valueName, valueSlideIndex, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteShapes");
        }
    }
    
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideTest() throws ApiException, Exception {
        initialize("deleteSlide", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlide", "name");
            initialize("deleteSlide", "name", valueName);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlide", "slideIndex");
            initialize("deleteSlide", "slideIndex", valueSlideIndex);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlide", "password");
            initialize("deleteSlide", "password", valuePassword);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlide", "folder");
            initialize("deleteSlide", "folder", valueFolder);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlide");
        }
    }
    /**
     * Delete a presentation slide by index.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "deleteSlide", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlide", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlide", "storage");
            initialize("deleteSlide", "storage", valueStorage);
            Slides response = api.deleteSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlide");
        }
    }
    
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsTest() throws ApiException, Exception {
        initialize("deleteSlideComments", null, null);
        SlideComments response = null;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlideComments", "name");
            initialize("deleteSlideComments", "name", valueName);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlideComments", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideComments", "slideIndex");
            initialize("deleteSlideComments", "slideIndex", valueSlideIndex);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideComments", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteSlideComments", "author");
            initialize("deleteSlideComments", "author", valueAuthor);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "author", "deleteSlideComments", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("author", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideComments", "password");
            initialize("deleteSlideComments", "password", valuePassword);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideComments", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlideComments", "folder");
            initialize("deleteSlideComments", "folder", valueFolder);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlideComments", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlideComments");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideComments", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideComments", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlideComments", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlideComments", "storage");
            initialize("deleteSlideComments", "storage", valueStorage);
            SlideComments response = api.deleteSlideComments(valueName, valueSlideIndex, valueAuthor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlideComments", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlideComments");
        }
    }
    
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineTest() throws ApiException, Exception {
        initialize("deleteSlideCommentsOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteSlideCommentsOnline", "document");
            initialize("deleteSlideCommentsOnline", "document", valueDocument);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "deleteSlideCommentsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "deleteSlideCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSlideCommentsOnline", "slideIndex");
            initialize("deleteSlideCommentsOnline", "slideIndex", valueSlideIndex);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSlideCommentsOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSlideCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidAuthorTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valueAuthor = (String)invalidizeTestValue("String", valueAuthor, "deleteSlideCommentsOnline", "author");
            initialize("deleteSlideCommentsOnline", "author", valueAuthor);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "author", "deleteSlideCommentsOnline", valueAuthor);
        }
        if (needAssertResponse) {
            assertResponse("author", "deleteSlideCommentsOnline");
        }
    }
    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlideCommentsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteSlideCommentsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSlideCommentsOnline", "slideIndex");
        String valueAuthor = (String)getTestValue("String", "deleteSlideCommentsOnline", "author");
        String valuePassword = (String)getTestValue("String", "deleteSlideCommentsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlideCommentsOnline", "password");
            initialize("deleteSlideCommentsOnline", "password", valuePassword);
            File response = api.deleteSlideCommentsOnline(valueDocument, valueSlideIndex, valueAuthor, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlideCommentsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlideCommentsOnline");
        }
    }
    
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesTest() throws ApiException, Exception {
        initialize("deleteSlides", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSlides", "name");
            initialize("deleteSlides", "name", valueName);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "deleteSlides", "slides");
            initialize("deleteSlides", "slides", valueSlides);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slides", "deleteSlides", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("slides", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSlides", "password");
            initialize("deleteSlides", "password", valuePassword);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSlides", "folder");
            initialize("deleteSlides", "folder", valueFolder);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSlides");
        }
    }
    /**
     * Delete presentation slides.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSlides", "name");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "deleteSlides", "slides");
        String valuePassword = (String)getTestValue("String", "deleteSlides", "password");
        String valueFolder = (String)getTestValue("String", "deleteSlides", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSlides", "storage");
            initialize("deleteSlides", "storage", valueStorage);
            Slides response = api.deleteSlides(valueName, valueSlides, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSlides");
        }
    }
    
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeTest() throws ApiException, Exception {
        initialize("deleteSubshape", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshape", "name");
            initialize("deleteSubshape", "name", valueName);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshape", "slideIndex");
            initialize("deleteSubshape", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshape", "path");
            initialize("deleteSubshape", "path", valuePath);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshape", "shapeIndex");
            initialize("deleteSubshape", "shapeIndex", valueShapeIndex);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshape", "password");
            initialize("deleteSubshape", "password", valuePassword);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshape", "folder");
            initialize("deleteSubshape", "folder", valueFolder);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshape");
        }
    }
    /**
     * Remove a shape (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshape", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshape", "storage");
            initialize("deleteSubshape", "storage", valueStorage);
            Shapes response = api.deleteSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshape");
        }
    }
    
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphTest() throws ApiException, Exception {
        initialize("deleteSubshapeParagraph", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapeParagraph", "name");
            initialize("deleteSubshapeParagraph", "name", valueName);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapeParagraph", "slideIndex");
            initialize("deleteSubshapeParagraph", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapeParagraph", "path");
            initialize("deleteSubshapeParagraph", "path", valuePath);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapeParagraph", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapeParagraph", "shapeIndex");
            initialize("deleteSubshapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSubshapeParagraph", "paragraphIndex");
            initialize("deleteSubshapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteSubshapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapeParagraph", "password");
            initialize("deleteSubshapeParagraph", "password", valuePassword);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapeParagraph", "folder");
            initialize("deleteSubshapeParagraph", "folder", valueFolder);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapeParagraph");
        }
    }
    /**
     * Remove a paragraph (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapeParagraph", "storage");
            initialize("deleteSubshapeParagraph", "storage", valueStorage);
            Paragraphs response = api.deleteSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapeParagraph");
        }
    }
    
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsTest() throws ApiException, Exception {
        initialize("deleteSubshapeParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapeParagraphs", "name");
            initialize("deleteSubshapeParagraphs", "name", valueName);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapeParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapeParagraphs", "slideIndex");
            initialize("deleteSubshapeParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapeParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapeParagraphs", "path");
            initialize("deleteSubshapeParagraphs", "path", valuePath);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapeParagraphs", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapeParagraphs", "shapeIndex");
            initialize("deleteSubshapeParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapeParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidParagraphsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueParagraphs = (List<Integer>)invalidizeTestValue("List<Integer>", valueParagraphs, "deleteSubshapeParagraphs", "paragraphs");
            initialize("deleteSubshapeParagraphs", "paragraphs", valueParagraphs);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphs", "deleteSubshapeParagraphs", valueParagraphs);
        }
        if (needAssertResponse) {
            assertResponse("paragraphs", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapeParagraphs", "password");
            initialize("deleteSubshapeParagraphs", "password", valuePassword);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapeParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapeParagraphs", "folder");
            initialize("deleteSubshapeParagraphs", "folder", valueFolder);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapeParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapeParagraphs");
        }
    }
    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapeParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapeParagraphs", "shapeIndex");
        List<Integer> valueParagraphs = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapeParagraphs", "paragraphs");
        String valuePassword = (String)getTestValue("String", "deleteSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapeParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapeParagraphs", "storage");
            initialize("deleteSubshapeParagraphs", "storage", valueStorage);
            Paragraphs response = api.deleteSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphs, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapeParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapeParagraphs");
        }
    }
    
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionTest() throws ApiException, Exception {
        initialize("deleteSubshapePortion", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapePortion", "name");
            initialize("deleteSubshapePortion", "name", valueName);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapePortion", "slideIndex");
            initialize("deleteSubshapePortion", "slideIndex", valueSlideIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapePortion", "path");
            initialize("deleteSubshapePortion", "path", valuePath);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapePortion", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapePortion", "shapeIndex");
            initialize("deleteSubshapePortion", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSubshapePortion", "paragraphIndex");
            initialize("deleteSubshapePortion", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteSubshapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "deleteSubshapePortion", "portionIndex");
            initialize("deleteSubshapePortion", "portionIndex", valuePortionIndex);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "deleteSubshapePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapePortion", "password");
            initialize("deleteSubshapePortion", "password", valuePassword);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapePortion", "folder");
            initialize("deleteSubshapePortion", "folder", valueFolder);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapePortion");
        }
    }
    /**
     * Remove a portion (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "deleteSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapePortion", "storage");
            initialize("deleteSubshapePortion", "storage", valueStorage);
            Portions response = api.deleteSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapePortion");
        }
    }
    
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsTest() throws ApiException, Exception {
        initialize("deleteSubshapePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapePortions", "name");
            initialize("deleteSubshapePortions", "name", valueName);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapePortions", "slideIndex");
            initialize("deleteSubshapePortions", "slideIndex", valueSlideIndex);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapePortions", "path");
            initialize("deleteSubshapePortions", "path", valuePath);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapePortions", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "deleteSubshapePortions", "shapeIndex");
            initialize("deleteSubshapePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "deleteSubshapePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "deleteSubshapePortions", "paragraphIndex");
            initialize("deleteSubshapePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "deleteSubshapePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidPortionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valuePortions = (List<Integer>)invalidizeTestValue("List<Integer>", valuePortions, "deleteSubshapePortions", "portions");
            initialize("deleteSubshapePortions", "portions", valuePortions);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portions", "deleteSubshapePortions", valuePortions);
        }
        if (needAssertResponse) {
            assertResponse("portions", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapePortions", "password");
            initialize("deleteSubshapePortions", "password", valuePassword);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapePortions", "folder");
            initialize("deleteSubshapePortions", "folder", valueFolder);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapePortions");
        }
    }
    /**
     * Remove a range of portions (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "deleteSubshapePortions", "paragraphIndex");
        List<Integer> valuePortions = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapePortions", "portions");
        String valuePassword = (String)getTestValue("String", "deleteSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapePortions", "storage");
            initialize("deleteSubshapePortions", "storage", valueStorage);
            Portions response = api.deleteSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapePortions");
        }
    }
    
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesTest() throws ApiException, Exception {
        initialize("deleteSubshapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteSubshapes", "name");
            initialize("deleteSubshapes", "name", valueName);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteSubshapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "deleteSubshapes", "slideIndex");
            initialize("deleteSubshapes", "slideIndex", valueSlideIndex);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "deleteSubshapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "deleteSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "deleteSubshapes", "path");
            initialize("deleteSubshapes", "path", valuePath);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "deleteSubshapes", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "deleteSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesInvalidShapesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        try {
            valueShapes = (List<Integer>)invalidizeTestValue("List<Integer>", valueShapes, "deleteSubshapes", "shapes");
            initialize("deleteSubshapes", "shapes", valueShapes);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapes", "deleteSubshapes", valueShapes);
        }
        if (needAssertResponse) {
            assertResponse("shapes", "deleteSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteSubshapes", "password");
            initialize("deleteSubshapes", "password", valuePassword);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteSubshapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteSubshapes", "folder");
            initialize("deleteSubshapes", "folder", valueFolder);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteSubshapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteSubshapes");
        }
    }
    /**
     * Remove a range of shapes (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubshapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "deleteSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "deleteSubshapes", "path");
        List<Integer> valueShapes = (List<Integer>)getTestValue("List<Integer>", "deleteSubshapes", "shapes");
        String valuePassword = (String)getTestValue("String", "deleteSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "deleteSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "deleteSubshapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteSubshapes", "storage");
            initialize("deleteSubshapes", "storage", valueStorage);
            Shapes response = api.deleteSubshapes(valueName, valueSlideIndex, valuePath, valueShapes, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteSubshapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteSubshapes");
        }
    }
    
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkTest() throws ApiException, Exception {
        initialize("deleteWatermark", null, null);
        ;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "deleteWatermark", "name");
            initialize("deleteWatermark", "name", valueName);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "deleteWatermark", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidShapeNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueShapeName = (String)invalidizeTestValue("String", valueShapeName, "deleteWatermark", "shapeName");
            initialize("deleteWatermark", "shapeName", valueShapeName);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeName", "deleteWatermark", valueShapeName);
        }
        if (needAssertResponse) {
            assertResponse("shapeName", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteWatermark", "password");
            initialize("deleteWatermark", "password", valuePassword);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteWatermark", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "deleteWatermark", "folder");
            initialize("deleteWatermark", "folder", valueFolder);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "deleteWatermark", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "deleteWatermark");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "deleteWatermark", "name");
        String valueShapeName = (String)getTestValue("String", "deleteWatermark", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermark", "password");
        String valueFolder = (String)getTestValue("String", "deleteWatermark", "folder");
        String valueStorage = (String)getTestValue("String", "deleteWatermark", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "deleteWatermark", "storage");
            initialize("deleteWatermark", "storage", valueStorage);
            api.deleteWatermark(valueName, valueShapeName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "deleteWatermark", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "deleteWatermark");
        }
    }
    
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineTest() throws ApiException, Exception {
        initialize("deleteWatermarkOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "deleteWatermarkOnline", "document");
            initialize("deleteWatermarkOnline", "document", valueDocument);
            File response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "deleteWatermarkOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "deleteWatermarkOnline");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineInvalidShapeNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        try {
            valueShapeName = (String)invalidizeTestValue("String", valueShapeName, "deleteWatermarkOnline", "shapeName");
            initialize("deleteWatermarkOnline", "shapeName", valueShapeName);
            File response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeName", "deleteWatermarkOnline", valueShapeName);
        }
        if (needAssertResponse) {
            assertResponse("shapeName", "deleteWatermarkOnline");
        }
    }
    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWatermarkOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "deleteWatermarkOnline", "document");
        String valueShapeName = (String)getTestValue("String", "deleteWatermarkOnline", "shapeName");
        String valuePassword = (String)getTestValue("String", "deleteWatermarkOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "deleteWatermarkOnline", "password");
            initialize("deleteWatermarkOnline", "password", valuePassword);
            File response = api.deleteWatermarkOnline(valueDocument, valueShapeName, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "deleteWatermarkOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "deleteWatermarkOnline");
        }
    }
    
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileTest() throws ApiException, Exception {
        initialize("downloadFile", null, null);
        File response = null;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
        assertTrue(response.isFile());
    }

    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "downloadFile", "path");
            initialize("downloadFile", "path", valuePath);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "downloadFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "downloadFile");
        }
    }
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "downloadFile", "storageName");
            initialize("downloadFile", "storageName", valueStorageName);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "downloadFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "downloadFile");
        }
    }
    /**
     * Download file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "downloadFile", "path");
        String valueStorageName = (String)getTestValue("String", "downloadFile", "storageName");
        String valueVersionId = (String)getTestValue("String", "downloadFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "downloadFile", "versionId");
            initialize("downloadFile", "versionId", valueVersionId);
            File response = api.downloadFile(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "downloadFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "downloadFile");
        }
    }
    
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageTest() throws ApiException, Exception {
        initialize("downloadImage", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImage", "name");
            initialize("downloadImage", "name", valueName);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadImage", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImage", "index");
            initialize("downloadImage", "index", valueIndex);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "downloadImage", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImage", "format");
            initialize("downloadImage", "format", valueFormat);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadImage", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImage", "password");
            initialize("downloadImage", "password", valuePassword);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImage", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImage", "folder");
            initialize("downloadImage", "folder", valueFolder);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadImage", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadImage");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImage", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImage", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImage", "format");
        String valuePassword = (String)getTestValue("String", "downloadImage", "password");
        String valueFolder = (String)getTestValue("String", "downloadImage", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImage", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImage", "storage");
            initialize("downloadImage", "storage", valueStorage);
            File response = api.downloadImage(valueName, valueIndex, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadImage", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadImage");
        }
    }
    
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatTest() throws ApiException, Exception {
        initialize("downloadImageDefaultFormat", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImageDefaultFormat", "name");
            initialize("downloadImageDefaultFormat", "name", valueName);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadImageDefaultFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImageDefaultFormat", "index");
            initialize("downloadImageDefaultFormat", "index", valueIndex);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "downloadImageDefaultFormat", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImageDefaultFormat", "password");
            initialize("downloadImageDefaultFormat", "password", valuePassword);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImageDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImageDefaultFormat", "folder");
            initialize("downloadImageDefaultFormat", "folder", valueFolder);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadImageDefaultFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadImageDefaultFormat");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImageDefaultFormat", "name");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormat", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImageDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImageDefaultFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImageDefaultFormat", "storage");
            initialize("downloadImageDefaultFormat", "storage", valueStorage);
            File response = api.downloadImageDefaultFormat(valueName, valueIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadImageDefaultFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadImageDefaultFormat");
        }
    }
    
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineTest() throws ApiException, Exception {
        initialize("downloadImageDefaultFormatOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImageDefaultFormatOnline", "document");
            initialize("downloadImageDefaultFormatOnline", "document", valueDocument);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "downloadImageDefaultFormatOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "downloadImageDefaultFormatOnline");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImageDefaultFormatOnline", "index");
            initialize("downloadImageDefaultFormatOnline", "index", valueIndex);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "downloadImageDefaultFormatOnline", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "downloadImageDefaultFormatOnline");
        }
    }
    /**
     * Get image binary data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageDefaultFormatOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageDefaultFormatOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageDefaultFormatOnline", "index");
        String valuePassword = (String)getTestValue("String", "downloadImageDefaultFormatOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImageDefaultFormatOnline", "password");
            initialize("downloadImageDefaultFormatOnline", "password", valuePassword);
            File response = api.downloadImageDefaultFormatOnline(valueDocument, valueIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImageDefaultFormatOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImageDefaultFormatOnline");
        }
    }
    
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineTest() throws ApiException, Exception {
        initialize("downloadImageOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImageOnline", "document");
            initialize("downloadImageOnline", "document", valueDocument);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "downloadImageOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "downloadImageOnline");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valueIndex = (Integer)invalidizeTestValue("Integer", valueIndex, "downloadImageOnline", "index");
            initialize("downloadImageOnline", "index", valueIndex);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "index", "downloadImageOnline", valueIndex);
        }
        if (needAssertResponse) {
            assertResponse("index", "downloadImageOnline");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImageOnline", "format");
            initialize("downloadImageOnline", "format", valueFormat);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadImageOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadImageOnline");
        }
    }
    /**
     * Get image in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImageOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImageOnline", "document");
        Integer valueIndex = (Integer)getTestValue("Integer", "downloadImageOnline", "index");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImageOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImageOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImageOnline", "password");
            initialize("downloadImageOnline", "password", valuePassword);
            File response = api.downloadImageOnline(valueDocument, valueIndex, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImageOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImageOnline");
        }
    }
    
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesTest() throws ApiException, Exception {
        initialize("downloadImages", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImages", "name");
            initialize("downloadImages", "name", valueName);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImages", "format");
            initialize("downloadImages", "format", valueFormat);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadImages", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImages", "password");
            initialize("downloadImages", "password", valuePassword);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImages", "folder");
            initialize("downloadImages", "folder", valueFolder);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadImages");
        }
    }
    /**
     * Get all presentation images in specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImages", "name");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImages", "format");
        String valuePassword = (String)getTestValue("String", "downloadImages", "password");
        String valueFolder = (String)getTestValue("String", "downloadImages", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImages", "storage");
            initialize("downloadImages", "storage", valueStorage);
            File response = api.downloadImages(valueName, valueFormat, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadImages");
        }
    }
    
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatTest() throws ApiException, Exception {
        initialize("downloadImagesDefaultFormat", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadImagesDefaultFormat", "name");
            initialize("downloadImagesDefaultFormat", "name", valueName);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadImagesDefaultFormat", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadImagesDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImagesDefaultFormat", "password");
            initialize("downloadImagesDefaultFormat", "password", valuePassword);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImagesDefaultFormat", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImagesDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadImagesDefaultFormat", "folder");
            initialize("downloadImagesDefaultFormat", "folder", valueFolder);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadImagesDefaultFormat", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadImagesDefaultFormat");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadImagesDefaultFormat", "name");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormat", "password");
        String valueFolder = (String)getTestValue("String", "downloadImagesDefaultFormat", "folder");
        String valueStorage = (String)getTestValue("String", "downloadImagesDefaultFormat", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadImagesDefaultFormat", "storage");
            initialize("downloadImagesDefaultFormat", "storage", valueStorage);
            File response = api.downloadImagesDefaultFormat(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadImagesDefaultFormat", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadImagesDefaultFormat");
        }
    }
    
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatOnlineTest() throws ApiException, Exception {
        initialize("downloadImagesDefaultFormatOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesDefaultFormatOnline", "document");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormatOnline", "password");
        response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesDefaultFormatOnline", "document");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormatOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImagesDefaultFormatOnline", "document");
            initialize("downloadImagesDefaultFormatOnline", "document", valueDocument);
            File response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "downloadImagesDefaultFormatOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "downloadImagesDefaultFormatOnline");
        }
    }
    /**
     * Get all presentation images.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesDefaultFormatOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesDefaultFormatOnline", "document");
        String valuePassword = (String)getTestValue("String", "downloadImagesDefaultFormatOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImagesDefaultFormatOnline", "password");
            initialize("downloadImagesDefaultFormatOnline", "password", valuePassword);
            File response = api.downloadImagesDefaultFormatOnline(valueDocument, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImagesDefaultFormatOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImagesDefaultFormatOnline");
        }
    }
    
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineTest() throws ApiException, Exception {
        initialize("downloadImagesOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadImagesOnline", "document");
            initialize("downloadImagesOnline", "document", valueDocument);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "downloadImagesOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "downloadImagesOnline");
        }
    }
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        try {
            valueFormat = (ImageExportFormat)invalidizeTestValue("ImageExportFormat", valueFormat, "downloadImagesOnline", "format");
            initialize("downloadImagesOnline", "format", valueFormat);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadImagesOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadImagesOnline");
        }
    }
    /**
     * Get all presentation images in specified format. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadImagesOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadImagesOnline", "document");
        ImageExportFormat valueFormat = (ImageExportFormat)getTestValue("ImageExportFormat", "downloadImagesOnline", "format");
        String valuePassword = (String)getTestValue("String", "downloadImagesOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadImagesOnline", "password");
            initialize("downloadImagesOnline", "password", valuePassword);
            File response = api.downloadImagesOnline(valueDocument, valueFormat, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadImagesOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadImagesOnline");
        }
    }
    
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideTest() throws ApiException, Exception {
        initialize("downloadNotesSlide", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadNotesSlide", "name");
            initialize("downloadNotesSlide", "name", valueName);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadNotesSlide", "slideIndex");
            initialize("downloadNotesSlide", "slideIndex", valueSlideIndex);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueFormat = (NotesSlideExportFormat)invalidizeTestValue("NotesSlideExportFormat", valueFormat, "downloadNotesSlide", "format");
            initialize("downloadNotesSlide", "format", valueFormat);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadNotesSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadNotesSlide", "width");
            initialize("downloadNotesSlide", "width", valueWidth);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "downloadNotesSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadNotesSlide", "height");
            initialize("downloadNotesSlide", "height", valueHeight);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "downloadNotesSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadNotesSlide", "password");
            initialize("downloadNotesSlide", "password", valuePassword);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadNotesSlide", "folder");
            initialize("downloadNotesSlide", "folder", valueFolder);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadNotesSlide", "storage");
            initialize("downloadNotesSlide", "storage", valueStorage);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadNotesSlide");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlide", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlide", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadNotesSlide", "fontsFolder");
            initialize("downloadNotesSlide", "fontsFolder", valueFontsFolder);
            File response = api.downloadNotesSlide(valueName, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadNotesSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadNotesSlide");
        }
    }
    
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineTest() throws ApiException, Exception {
        initialize("downloadNotesSlideOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadNotesSlideOnline", "document");
            initialize("downloadNotesSlideOnline", "document", valueDocument);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "downloadNotesSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadNotesSlideOnline", "slideIndex");
            initialize("downloadNotesSlideOnline", "slideIndex", valueSlideIndex);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadNotesSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueFormat = (NotesSlideExportFormat)invalidizeTestValue("NotesSlideExportFormat", valueFormat, "downloadNotesSlideOnline", "format");
            initialize("downloadNotesSlideOnline", "format", valueFormat);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadNotesSlideOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadNotesSlideOnline", "width");
            initialize("downloadNotesSlideOnline", "width", valueWidth);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "downloadNotesSlideOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadNotesSlideOnline", "height");
            initialize("downloadNotesSlideOnline", "height", valueHeight);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "downloadNotesSlideOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadNotesSlideOnline", "password");
            initialize("downloadNotesSlideOnline", "password", valuePassword);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadNotesSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadNotesSlideOnline");
        }
    }
    /**
     * Convert notes slide to the specified image format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "slideIndex");
        NotesSlideExportFormat valueFormat = (NotesSlideExportFormat)getTestValue("NotesSlideExportFormat", "downloadNotesSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadNotesSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideOnline", "password");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadNotesSlideOnline", "fontsFolder");
            initialize("downloadNotesSlideOnline", "fontsFolder", valueFontsFolder);
            File response = api.downloadNotesSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadNotesSlideOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadNotesSlideOnline");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeTest() throws ApiException, Exception {
        initialize("downloadNotesSlideShape", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadNotesSlideShape", "name");
            initialize("downloadNotesSlideShape", "name", valueName);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadNotesSlideShape", "slideIndex");
            initialize("downloadNotesSlideShape", "slideIndex", valueSlideIndex);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadNotesSlideShape", "shapeIndex");
            initialize("downloadNotesSlideShape", "shapeIndex", valueShapeIndex);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "downloadNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "downloadNotesSlideShape", "format");
            initialize("downloadNotesSlideShape", "format", valueFormat);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadNotesSlideShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "downloadNotesSlideShape", "options");
            initialize("downloadNotesSlideShape", "options", valueOptions);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "downloadNotesSlideShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "downloadNotesSlideShape", "scaleX");
            initialize("downloadNotesSlideShape", "scaleX", valueScaleX);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "downloadNotesSlideShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "downloadNotesSlideShape", "scaleY");
            initialize("downloadNotesSlideShape", "scaleY", valueScaleY);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "downloadNotesSlideShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "downloadNotesSlideShape", "bounds");
            initialize("downloadNotesSlideShape", "bounds", valueBounds);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "downloadNotesSlideShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadNotesSlideShape", "password");
            initialize("downloadNotesSlideShape", "password", valuePassword);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadNotesSlideShape", "folder");
            initialize("downloadNotesSlideShape", "folder", valueFolder);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadNotesSlideShape", "storage");
            initialize("downloadNotesSlideShape", "storage", valueStorage);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadNotesSlideShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadNotesSlideShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadNotesSlideShape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadNotesSlideShape", "fontsFolder");
            initialize("downloadNotesSlideShape", "fontsFolder", valueFontsFolder);
            File response = api.downloadNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadNotesSlideShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadNotesSlideShape");
        }
    }
    
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationTest() throws ApiException, Exception {
        initialize("downloadPresentation", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
        assertTrue(response.isFile());
    }

    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadPresentation", "name");
            initialize("downloadPresentation", "name", valueName);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadPresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "downloadPresentation", "format");
            initialize("downloadPresentation", "format", valueFormat);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadPresentation", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "downloadPresentation", "options");
            initialize("downloadPresentation", "options", valueOptions);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "downloadPresentation", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadPresentation", "password");
            initialize("downloadPresentation", "password", valuePassword);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadPresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadPresentation", "folder");
            initialize("downloadPresentation", "folder", valueFolder);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadPresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadPresentation", "storage");
            initialize("downloadPresentation", "storage", valueStorage);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadPresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadPresentation", "fontsFolder");
            initialize("downloadPresentation", "fontsFolder", valueFontsFolder);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadPresentation", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadPresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadPresentationInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadPresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "downloadPresentation", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadPresentation", "options");
        String valuePassword = (String)getTestValue("String", "downloadPresentation", "password");
        String valueFolder = (String)getTestValue("String", "downloadPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "downloadPresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadPresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "downloadPresentation", "slides");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "downloadPresentation", "slides");
            initialize("downloadPresentation", "slides", valueSlides);
            File response = api.downloadPresentation(valueName, valueFormat, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slides", "downloadPresentation", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("slides", "downloadPresentation");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeTest() throws ApiException, Exception {
        initialize("downloadShape", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadShape", "name");
            initialize("downloadShape", "name", valueName);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadShape", "slideIndex");
            initialize("downloadShape", "slideIndex", valueSlideIndex);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadShape", "shapeIndex");
            initialize("downloadShape", "shapeIndex", valueShapeIndex);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "downloadShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "downloadShape", "format");
            initialize("downloadShape", "format", valueFormat);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "downloadShape", "options");
            initialize("downloadShape", "options", valueOptions);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "downloadShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "downloadShape", "scaleX");
            initialize("downloadShape", "scaleX", valueScaleX);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "downloadShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "downloadShape", "scaleY");
            initialize("downloadShape", "scaleY", valueScaleY);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "downloadShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "downloadShape", "bounds");
            initialize("downloadShape", "bounds", valueBounds);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "downloadShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadShape", "password");
            initialize("downloadShape", "password", valuePassword);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadShape", "folder");
            initialize("downloadShape", "folder", valueFolder);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadShape", "storage");
            initialize("downloadShape", "storage", valueStorage);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShape", "password");
        String valueFolder = (String)getTestValue("String", "downloadShape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadShape", "fontsFolder");
            initialize("downloadShape", "fontsFolder", valueFontsFolder);
            File response = api.downloadShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadShape");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineTest() throws ApiException, Exception {
        initialize("downloadShapeOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadShapeOnline", "document");
            initialize("downloadShapeOnline", "document", valueDocument);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "downloadShapeOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadShapeOnline", "slideIndex");
            initialize("downloadShapeOnline", "slideIndex", valueSlideIndex);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadShapeOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadShapeOnline", "shapeIndex");
            initialize("downloadShapeOnline", "shapeIndex", valueShapeIndex);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "downloadShapeOnline", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "downloadShapeOnline", "format");
            initialize("downloadShapeOnline", "format", valueFormat);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadShapeOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "downloadShapeOnline", "scaleX");
            initialize("downloadShapeOnline", "scaleX", valueScaleX);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "downloadShapeOnline", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "downloadShapeOnline", "scaleY");
            initialize("downloadShapeOnline", "scaleY", valueScaleY);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "downloadShapeOnline", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "downloadShapeOnline", "bounds");
            initialize("downloadShapeOnline", "bounds", valueBounds);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "downloadShapeOnline", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadShapeOnline", "password");
            initialize("downloadShapeOnline", "password", valuePassword);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadShapeOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadShapeOnline", "storage");
            initialize("downloadShapeOnline", "storage", valueStorage);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadShapeOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadShapeOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadShapeOnline", "format");
        Double valueScaleX = (Double)getTestValue("Double", "downloadShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadShapeOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadShapeOnline", "fontsFolder");
            initialize("downloadShapeOnline", "fontsFolder", valueFontsFolder);
            File response = api.downloadShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadShapeOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadShapeOnline");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideTest() throws ApiException, Exception {
        initialize("downloadSlide", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadSlide", "name");
            initialize("downloadSlide", "name", valueName);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadSlide", "slideIndex");
            initialize("downloadSlide", "slideIndex", valueSlideIndex);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "downloadSlide", "format");
            initialize("downloadSlide", "format", valueFormat);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "downloadSlide", "options");
            initialize("downloadSlide", "options", valueOptions);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "downloadSlide", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadSlide", "width");
            initialize("downloadSlide", "width", valueWidth);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "downloadSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadSlide", "height");
            initialize("downloadSlide", "height", valueHeight);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "downloadSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadSlide", "password");
            initialize("downloadSlide", "password", valuePassword);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadSlide", "folder");
            initialize("downloadSlide", "folder", valueFolder);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadSlide", "storage");
            initialize("downloadSlide", "storage", valueStorage);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlide", "format");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "downloadSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlide", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlide", "password");
        String valueFolder = (String)getTestValue("String", "downloadSlide", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadSlide", "fontsFolder");
            initialize("downloadSlide", "fontsFolder", valueFontsFolder);
            File response = api.downloadSlide(valueName, valueSlideIndex, valueFormat, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadSlide");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineTest() throws ApiException, Exception {
        initialize("downloadSlideOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "downloadSlideOnline", "document");
            initialize("downloadSlideOnline", "document", valueDocument);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "downloadSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadSlideOnline", "slideIndex");
            initialize("downloadSlideOnline", "slideIndex", valueSlideIndex);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "downloadSlideOnline", "format");
            initialize("downloadSlideOnline", "format", valueFormat);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadSlideOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "downloadSlideOnline", "width");
            initialize("downloadSlideOnline", "width", valueWidth);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "downloadSlideOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "downloadSlideOnline", "height");
            initialize("downloadSlideOnline", "height", valueHeight);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "downloadSlideOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadSlideOnline", "password");
            initialize("downloadSlideOnline", "password", valuePassword);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadSlideOnline", "storage");
            initialize("downloadSlideOnline", "storage", valueStorage);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadSlideOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSlideOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "downloadSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "downloadSlideOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "downloadSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "downloadSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "downloadSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "downloadSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSlideOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadSlideOnline", "fontsFolder");
            initialize("downloadSlideOnline", "fontsFolder", valueFontsFolder);
            File response = api.downloadSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadSlideOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadSlideOnline");
        }
    }
    
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeTest() throws ApiException, Exception {
        initialize("downloadSubshape", null, null);
        File response = null;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "downloadSubshape", "name");
            initialize("downloadSubshape", "name", valueName);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "downloadSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "downloadSubshape", "slideIndex");
            initialize("downloadSubshape", "slideIndex", valueSlideIndex);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "downloadSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "downloadSubshape", "path");
            initialize("downloadSubshape", "path", valuePath);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "downloadSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "downloadSubshape", "shapeIndex");
            initialize("downloadSubshape", "shapeIndex", valueShapeIndex);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "downloadSubshape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "downloadSubshape", "format");
            initialize("downloadSubshape", "format", valueFormat);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "downloadSubshape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "downloadSubshape", "options");
            initialize("downloadSubshape", "options", valueOptions);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "downloadSubshape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "downloadSubshape", "scaleX");
            initialize("downloadSubshape", "scaleX", valueScaleX);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "downloadSubshape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "downloadSubshape", "scaleY");
            initialize("downloadSubshape", "scaleY", valueScaleY);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "downloadSubshape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "downloadSubshape", "bounds");
            initialize("downloadSubshape", "bounds", valueBounds);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "downloadSubshape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "downloadSubshape", "password");
            initialize("downloadSubshape", "password", valuePassword);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "downloadSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "downloadSubshape", "folder");
            initialize("downloadSubshape", "folder", valueFolder);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "downloadSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "downloadSubshape", "storage");
            initialize("downloadSubshape", "storage", valueStorage);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "downloadSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "downloadSubshape");
        }
    }
    /**
     * Render shape to specified picture format (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSubshapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "downloadSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "downloadSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "downloadSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "downloadSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "downloadSubshape", "format");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "downloadSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "downloadSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "downloadSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "downloadSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "downloadSubshape", "password");
        String valueFolder = (String)getTestValue("String", "downloadSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "downloadSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "downloadSubshape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "downloadSubshape", "fontsFolder");
            initialize("downloadSubshape", "fontsFolder", valueFontsFolder);
            File response = api.downloadSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "downloadSubshape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "downloadSubshape");
        }
    }
    
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationTest() throws ApiException, Exception {
        initialize("getAnimation", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getAnimation", "name");
            initialize("getAnimation", "name", valueName);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getAnimation", "slideIndex");
            initialize("getAnimation", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getAnimation", "shapeIndex");
            initialize("getAnimation", "shapeIndex", valueShapeIndex);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getAnimation", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getAnimation", "password");
            initialize("getAnimation", "password", valuePassword);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getAnimation", "folder");
            initialize("getAnimation", "folder", valueFolder);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getAnimation");
        }
    }
    /**
     * Read slide animation effects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getAnimation", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getAnimation", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getAnimation", "password");
        String valueFolder = (String)getTestValue("String", "getAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "getAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getAnimation", "storage");
            initialize("getAnimation", "storage", valueStorage);
            SlideAnimation response = api.getAnimation(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getAnimation");
        }
    }
    
    /**
     * Get API info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiInfoTest() throws ApiException, Exception {
        initialize("getApiInfo", null, null);
        ApiInfo response = null;
        response = api.getApiInfo();
        assertNotNull(response);
    }

    
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundTest() throws ApiException, Exception {
        initialize("getBackground", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getBackground", "name");
            initialize("getBackground", "name", valueName);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getBackground", "slideIndex");
            initialize("getBackground", "slideIndex", valueSlideIndex);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getBackground", "password");
            initialize("getBackground", "password", valuePassword);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getBackground", "folder");
            initialize("getBackground", "folder", valueFolder);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getBackground");
        }
    }
    /**
     * Read slide background info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getBackground", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getBackground", "password");
        String valueFolder = (String)getTestValue("String", "getBackground", "folder");
        String valueStorage = (String)getTestValue("String", "getBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getBackground", "storage");
            initialize("getBackground", "storage", valueStorage);
            SlideBackground response = api.getBackground(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getBackground");
        }
    }
    
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeTest() throws ApiException, Exception {
        initialize("getColorScheme", null, null);
        ColorScheme response = null;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getColorScheme", "name");
            initialize("getColorScheme", "name", valueName);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getColorScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getColorScheme", "slideIndex");
            initialize("getColorScheme", "slideIndex", valueSlideIndex);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getColorScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getColorScheme", "password");
            initialize("getColorScheme", "password", valuePassword);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getColorScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getColorScheme", "folder");
            initialize("getColorScheme", "folder", valueFolder);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getColorScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getColorScheme");
        }
    }
    /**
     * Read slide theme color scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColorSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getColorScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getColorScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getColorScheme", "password");
        String valueFolder = (String)getTestValue("String", "getColorScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getColorScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getColorScheme", "storage");
            initialize("getColorScheme", "storage", valueStorage);
            ColorScheme response = api.getColorScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getColorScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getColorScheme");
        }
    }
    
    /**
     * Get disc usage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscUsageTest() throws ApiException, Exception {
        initialize("getDiscUsage", null, null);
        DiscUsage response = null;
        String valueStorageName = (String)getTestValue("String", "getDiscUsage", "storageName");
        response = api.getDiscUsage(valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get disc usage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDiscUsageInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueStorageName = (String)getTestValue("String", "getDiscUsage", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getDiscUsage", "storageName");
            initialize("getDiscUsage", "storageName", valueStorageName);
            DiscUsage response = api.getDiscUsage(valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "getDiscUsage", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "getDiscUsage");
        }
    }
    
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesTest() throws ApiException, Exception {
        initialize("getDocumentProperties", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getDocumentProperties", "name");
            initialize("getDocumentProperties", "name", valueName);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getDocumentProperties", "password");
            initialize("getDocumentProperties", "password", valuePassword);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getDocumentProperties", "folder");
            initialize("getDocumentProperties", "folder", valueFolder);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getDocumentProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperties", "name");
        String valuePassword = (String)getTestValue("String", "getDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getDocumentProperties", "storage");
            initialize("getDocumentProperties", "storage", valueStorage);
            DocumentProperties response = api.getDocumentProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getDocumentProperties");
        }
    }
    
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyTest() throws ApiException, Exception {
        initialize("getDocumentProperty", null, null);
        DocumentProperty response = null;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getDocumentProperty", "name");
            initialize("getDocumentProperty", "name", valueName);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "getDocumentProperty", "propertyName");
            initialize("getDocumentProperty", "propertyName", valuePropertyName);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "propertyName", "getDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("propertyName", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getDocumentProperty", "password");
            initialize("getDocumentProperty", "password", valuePassword);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getDocumentProperty", "folder");
            initialize("getDocumentProperty", "folder", valueFolder);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getDocumentProperty");
        }
    }
    /**
     * Read presentation document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "getDocumentProperty", "propertyName");
        String valuePassword = (String)getTestValue("String", "getDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "getDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "getDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getDocumentProperty", "storage");
            initialize("getDocumentProperty", "storage", valueStorage);
            DocumentProperty response = api.getDocumentProperty(valueName, valuePropertyName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getDocumentProperty");
        }
    }
    
    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsTest() throws ApiException, Exception {
        initialize("getFileVersions", null, null);
        FileVersions response = null;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        response = api.getFileVersions(valuePath, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getFileVersions", "path");
            initialize("getFileVersions", "path", valuePath);
            FileVersions response = api.getFileVersions(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getFileVersions", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getFileVersions");
        }
    }
    /**
     * Get file versions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFileVersionsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFileVersions", "path");
        String valueStorageName = (String)getTestValue("String", "getFileVersions", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getFileVersions", "storageName");
            initialize("getFileVersions", "storageName", valueStorageName);
            FileVersions response = api.getFileVersions(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "getFileVersions", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "getFileVersions");
        }
    }
    
    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListTest() throws ApiException, Exception {
        initialize("getFilesList", null, null);
        FilesList response = null;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        response = api.getFilesList(valuePath, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getFilesList", "path");
            initialize("getFilesList", "path", valuePath);
            FilesList response = api.getFilesList(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getFilesList", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getFilesList");
        }
    }
    /**
     * Get all files and folders within a folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFilesListInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "getFilesList", "path");
        String valueStorageName = (String)getTestValue("String", "getFilesList", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "getFilesList", "storageName");
            initialize("getFilesList", "storageName", valueStorageName);
            FilesList response = api.getFilesList(valuePath, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "getFilesList", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "getFilesList");
        }
    }
    
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeTest() throws ApiException, Exception {
        initialize("getFontScheme", null, null);
        FontScheme response = null;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getFontScheme", "name");
            initialize("getFontScheme", "name", valueName);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getFontScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getFontScheme", "slideIndex");
            initialize("getFontScheme", "slideIndex", valueSlideIndex);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getFontScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getFontScheme", "password");
            initialize("getFontScheme", "password", valuePassword);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getFontScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getFontScheme", "folder");
            initialize("getFontScheme", "folder", valueFolder);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getFontScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getFontScheme");
        }
    }
    /**
     * Read slide theme font scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFontSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFontScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFontScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFontScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFontScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFontScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getFontScheme", "storage");
            initialize("getFontScheme", "storage", valueStorage);
            FontScheme response = api.getFontScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getFontScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getFontScheme");
        }
    }
    
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeTest() throws ApiException, Exception {
        initialize("getFormatScheme", null, null);
        FormatScheme response = null;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getFormatScheme", "name");
            initialize("getFormatScheme", "name", valueName);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getFormatScheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getFormatScheme", "slideIndex");
            initialize("getFormatScheme", "slideIndex", valueSlideIndex);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getFormatScheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getFormatScheme", "password");
            initialize("getFormatScheme", "password", valuePassword);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getFormatScheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getFormatScheme", "folder");
            initialize("getFormatScheme", "folder", valueFolder);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getFormatScheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getFormatScheme");
        }
    }
    /**
     * Read slide theme format scheme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormatSchemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getFormatScheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getFormatScheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getFormatScheme", "password");
        String valueFolder = (String)getTestValue("String", "getFormatScheme", "folder");
        String valueStorage = (String)getTestValue("String", "getFormatScheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getFormatScheme", "storage");
            initialize("getFormatScheme", "storage", valueStorage);
            FormatScheme response = api.getFormatScheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getFormatScheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getFormatScheme");
        }
    }
    
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideTest() throws ApiException, Exception {
        initialize("getLayoutSlide", null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getLayoutSlide", "name");
            initialize("getLayoutSlide", "name", valueName);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getLayoutSlide", "slideIndex");
            initialize("getLayoutSlide", "slideIndex", valueSlideIndex);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getLayoutSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getLayoutSlide", "password");
            initialize("getLayoutSlide", "password", valuePassword);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getLayoutSlide", "folder");
            initialize("getLayoutSlide", "folder", valueFolder);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getLayoutSlide");
        }
    }
    /**
     * Read presentation layoutSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getLayoutSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getLayoutSlide", "storage");
            initialize("getLayoutSlide", "storage", valueStorage);
            LayoutSlide response = api.getLayoutSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getLayoutSlide");
        }
    }
    
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesTest() throws ApiException, Exception {
        initialize("getLayoutSlides", null, null);
        LayoutSlides response = null;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getLayoutSlides", "name");
            initialize("getLayoutSlides", "name", valueName);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getLayoutSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getLayoutSlides");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getLayoutSlides", "password");
            initialize("getLayoutSlides", "password", valuePassword);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getLayoutSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getLayoutSlides");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getLayoutSlides", "folder");
            initialize("getLayoutSlides", "folder", valueFolder);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getLayoutSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getLayoutSlides");
        }
    }
    /**
     * Read presentation layoutSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLayoutSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getLayoutSlides", "name");
        String valuePassword = (String)getTestValue("String", "getLayoutSlides", "password");
        String valueFolder = (String)getTestValue("String", "getLayoutSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getLayoutSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getLayoutSlides", "storage");
            initialize("getLayoutSlides", "storage", valueStorage);
            LayoutSlides response = api.getLayoutSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getLayoutSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getLayoutSlides");
        }
    }
    
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideTest() throws ApiException, Exception {
        initialize("getMasterSlide", null, null);
        MasterSlide response = null;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getMasterSlide", "name");
            initialize("getMasterSlide", "name", valueName);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getMasterSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getMasterSlide", "slideIndex");
            initialize("getMasterSlide", "slideIndex", valueSlideIndex);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getMasterSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getMasterSlide", "password");
            initialize("getMasterSlide", "password", valuePassword);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getMasterSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getMasterSlide", "folder");
            initialize("getMasterSlide", "folder", valueFolder);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getMasterSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getMasterSlide");
        }
    }
    /**
     * Read presentation masterSlide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getMasterSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getMasterSlide", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getMasterSlide", "storage");
            initialize("getMasterSlide", "storage", valueStorage);
            MasterSlide response = api.getMasterSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getMasterSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getMasterSlide");
        }
    }
    
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesTest() throws ApiException, Exception {
        initialize("getMasterSlides", null, null);
        MasterSlides response = null;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getMasterSlides", "name");
            initialize("getMasterSlides", "name", valueName);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getMasterSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getMasterSlides");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getMasterSlides", "password");
            initialize("getMasterSlides", "password", valuePassword);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getMasterSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getMasterSlides");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getMasterSlides", "folder");
            initialize("getMasterSlides", "folder", valueFolder);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getMasterSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getMasterSlides");
        }
    }
    /**
     * Read presentation masterSlides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMasterSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getMasterSlides", "name");
        String valuePassword = (String)getTestValue("String", "getMasterSlides", "password");
        String valueFolder = (String)getTestValue("String", "getMasterSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getMasterSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getMasterSlides", "storage");
            initialize("getMasterSlides", "storage", valueStorage);
            MasterSlides response = api.getMasterSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getMasterSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getMasterSlides");
        }
    }
    
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideTest() throws ApiException, Exception {
        initialize("getNotesSlide", null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlide", "name");
            initialize("getNotesSlide", "name", valueName);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlide", "slideIndex");
            initialize("getNotesSlide", "slideIndex", valueSlideIndex);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlide", "password");
            initialize("getNotesSlide", "password", valuePassword);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlide", "folder");
            initialize("getNotesSlide", "folder", valueFolder);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlide");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlide", "storage");
            initialize("getNotesSlide", "storage", valueStorage);
            NotesSlide response = api.getNotesSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlide");
        }
    }
    
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("getNotesSlideHeaderFooter", null, null);
        NotesSlideHeaderFooter response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideHeaderFooter", "name");
            initialize("getNotesSlideHeaderFooter", "name", valueName);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideHeaderFooter", "slideIndex");
            initialize("getNotesSlideHeaderFooter", "slideIndex", valueSlideIndex);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideHeaderFooter", "password");
            initialize("getNotesSlideHeaderFooter", "password", valuePassword);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideHeaderFooter", "folder");
            initialize("getNotesSlideHeaderFooter", "folder", valueFolder);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideHeaderFooter");
        }
    }
    /**
     * Get header/footer info for the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideHeaderFooter", "storage");
            initialize("getNotesSlideHeaderFooter", "storage", valueStorage);
            NotesSlideHeaderFooter response = api.getNotesSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideHeaderFooter");
        }
    }
    
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineTest() throws ApiException, Exception {
        initialize("getNotesSlideOnline", null, null);
        NotesSlide response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
        assertNotNull(response);
    }

    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "getNotesSlideOnline", "document");
            initialize("getNotesSlideOnline", "document", valueDocument);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "getNotesSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "getNotesSlideOnline");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideOnline", "slideIndex");
            initialize("getNotesSlideOnline", "slideIndex", valueSlideIndex);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideOnline");
        }
    }
    /**
     * Read notes slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "getNotesSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideOnline", "password");
            initialize("getNotesSlideOnline", "password", valuePassword);
            NotesSlide response = api.getNotesSlideOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideOnline");
        }
    }
    
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphTest() throws ApiException, Exception {
        initialize("getNotesSlideParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideParagraph", "name");
            initialize("getNotesSlideParagraph", "name", valueName);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideParagraph", "slideIndex");
            initialize("getNotesSlideParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideParagraph", "shapeIndex");
            initialize("getNotesSlideParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getNotesSlideParagraph", "paragraphIndex");
            initialize("getNotesSlideParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getNotesSlideParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getNotesSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideParagraph", "password");
            initialize("getNotesSlideParagraph", "password", valuePassword);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideParagraph", "folder");
            initialize("getNotesSlideParagraph", "folder", valueFolder);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideParagraph", "storage");
            initialize("getNotesSlideParagraph", "storage", valueStorage);
            Paragraph response = api.getNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideParagraph");
        }
    }
    
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphsTest() throws ApiException, Exception {
        initialize("getNotesSlideParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraphs", "storage");
        response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideParagraphs", "name");
            initialize("getNotesSlideParagraphs", "name", valueName);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideParagraphs", "slideIndex");
            initialize("getNotesSlideParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideParagraphs", "shapeIndex");
            initialize("getNotesSlideParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideParagraphs", "password");
            initialize("getNotesSlideParagraphs", "password", valuePassword);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideParagraphs", "folder");
            initialize("getNotesSlideParagraphs", "folder", valueFolder);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideParagraphs", "storage");
            initialize("getNotesSlideParagraphs", "storage", valueStorage);
            Paragraphs response = api.getNotesSlideParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideParagraphs");
        }
    }
    
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionTest() throws ApiException, Exception {
        initialize("getNotesSlidePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlidePortion", "name");
            initialize("getNotesSlidePortion", "name", valueName);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlidePortion", "slideIndex");
            initialize("getNotesSlidePortion", "slideIndex", valueSlideIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlidePortion", "shapeIndex");
            initialize("getNotesSlidePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getNotesSlidePortion", "paragraphIndex");
            initialize("getNotesSlidePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getNotesSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getNotesSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getNotesSlidePortion", "portionIndex");
            initialize("getNotesSlidePortion", "portionIndex", valuePortionIndex);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "getNotesSlidePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "getNotesSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlidePortion", "password");
            initialize("getNotesSlidePortion", "password", valuePassword);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlidePortion", "folder");
            initialize("getNotesSlidePortion", "folder", valueFolder);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlidePortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getNotesSlidePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlidePortion", "storage");
            initialize("getNotesSlidePortion", "storage", valueStorage);
            Portion response = api.getNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlidePortion");
        }
    }
    
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsTest() throws ApiException, Exception {
        initialize("getNotesSlidePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlidePortions", "name");
            initialize("getNotesSlidePortions", "name", valueName);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlidePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlidePortions", "slideIndex");
            initialize("getNotesSlidePortions", "slideIndex", valueSlideIndex);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlidePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlidePortions", "shapeIndex");
            initialize("getNotesSlidePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlidePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getNotesSlidePortions", "paragraphIndex");
            initialize("getNotesSlidePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getNotesSlidePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getNotesSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlidePortions", "password");
            initialize("getNotesSlidePortions", "password", valuePassword);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlidePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlidePortions", "folder");
            initialize("getNotesSlidePortions", "folder", valueFolder);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlidePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlidePortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlidePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlidePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getNotesSlidePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlidePortions", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlidePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlidePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlidePortions", "storage");
            initialize("getNotesSlidePortions", "storage", valueStorage);
            Portions response = api.getNotesSlidePortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlidePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlidePortions");
        }
    }
    
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeTest() throws ApiException, Exception {
        initialize("getNotesSlideShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShape", "name");
            initialize("getNotesSlideShape", "name", valueName);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShape", "slideIndex");
            initialize("getNotesSlideShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getNotesSlideShape", "shapeIndex");
            initialize("getNotesSlideShape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShape", "password");
            initialize("getNotesSlideShape", "password", valuePassword);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShape", "folder");
            initialize("getNotesSlideShape", "folder", valueFolder);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getNotesSlideShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShape", "storage");
            initialize("getNotesSlideShape", "storage", valueStorage);
            ShapeBase response = api.getNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShape");
        }
    }
    
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesTest() throws ApiException, Exception {
        initialize("getNotesSlideShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getNotesSlideShapes", "name");
            initialize("getNotesSlideShapes", "name", valueName);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getNotesSlideShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getNotesSlideShapes", "slideIndex");
            initialize("getNotesSlideShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getNotesSlideShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getNotesSlideShapes", "password");
            initialize("getNotesSlideShapes", "password", valuePassword);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getNotesSlideShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getNotesSlideShapes", "folder");
            initialize("getNotesSlideShapes", "folder", valueFolder);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getNotesSlideShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getNotesSlideShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotesSlideShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getNotesSlideShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getNotesSlideShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getNotesSlideShapes", "password");
        String valueFolder = (String)getTestValue("String", "getNotesSlideShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getNotesSlideShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getNotesSlideShapes", "storage");
            initialize("getNotesSlideShapes", "storage", valueStorage);
            Shapes response = api.getNotesSlideShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getNotesSlideShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getNotesSlideShapes");
        }
    }
    
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphTest() throws ApiException, Exception {
        initialize("getParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraph", "name");
            initialize("getParagraph", "name", valueName);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraph", "slideIndex");
            initialize("getParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraph", "shapeIndex");
            initialize("getParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getParagraph", "paragraphIndex");
            initialize("getParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraph", "password");
            initialize("getParagraph", "password", valuePassword);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraph", "folder");
            initialize("getParagraph", "folder", valueFolder);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getParagraph");
        }
    }
    /**
     * Read shape paragraph info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraph", "storage");
            initialize("getParagraph", "storage", valueStorage);
            Paragraph response = api.getParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getParagraph");
        }
    }
    
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsTest() throws ApiException, Exception {
        initialize("getParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getParagraphs", "name");
            initialize("getParagraphs", "name", valueName);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getParagraphs", "slideIndex");
            initialize("getParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getParagraphs", "shapeIndex");
            initialize("getParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getParagraphs", "password");
            initialize("getParagraphs", "password", valuePassword);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getParagraphs", "folder");
            initialize("getParagraphs", "folder", valueFolder);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getParagraphs");
        }
    }
    /**
     * Read shape paragraphs info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getParagraphs", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getParagraphs", "storage");
            initialize("getParagraphs", "storage", valueStorage);
            Paragraphs response = api.getParagraphs(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getParagraphs");
        }
    }
    
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderTest() throws ApiException, Exception {
        initialize("getPlaceholder", null, null);
        Placeholder response = null;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPlaceholder", "name");
            initialize("getPlaceholder", "name", valueName);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getPlaceholder", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPlaceholder", "slideIndex");
            initialize("getPlaceholder", "slideIndex", valueSlideIndex);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getPlaceholder", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidPlaceholderIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valuePlaceholderIndex = (Integer)invalidizeTestValue("Integer", valuePlaceholderIndex, "getPlaceholder", "placeholderIndex");
            initialize("getPlaceholder", "placeholderIndex", valuePlaceholderIndex);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "placeholderIndex", "getPlaceholder", valuePlaceholderIndex);
        }
        if (needAssertResponse) {
            assertResponse("placeholderIndex", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPlaceholder", "password");
            initialize("getPlaceholder", "password", valuePassword);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getPlaceholder", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPlaceholder", "folder");
            initialize("getPlaceholder", "folder", valueFolder);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getPlaceholder", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getPlaceholder");
        }
    }
    /**
     * Read slide placeholder info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholderInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholder", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholder", "slideIndex");
        Integer valuePlaceholderIndex = (Integer)getTestValue("Integer", "getPlaceholder", "placeholderIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholder", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholder", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholder", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPlaceholder", "storage");
            initialize("getPlaceholder", "storage", valueStorage);
            Placeholder response = api.getPlaceholder(valueName, valueSlideIndex, valuePlaceholderIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getPlaceholder", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getPlaceholder");
        }
    }
    
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersTest() throws ApiException, Exception {
        initialize("getPlaceholders", null, null);
        Placeholders response = null;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPlaceholders", "name");
            initialize("getPlaceholders", "name", valueName);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getPlaceholders", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPlaceholders", "slideIndex");
            initialize("getPlaceholders", "slideIndex", valueSlideIndex);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getPlaceholders", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPlaceholders", "password");
            initialize("getPlaceholders", "password", valuePassword);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getPlaceholders", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPlaceholders", "folder");
            initialize("getPlaceholders", "folder", valueFolder);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getPlaceholders", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getPlaceholders");
        }
    }
    /**
     * Read slide placeholders info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlaceholdersInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPlaceholders", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPlaceholders", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getPlaceholders", "password");
        String valueFolder = (String)getTestValue("String", "getPlaceholders", "folder");
        String valueStorage = (String)getTestValue("String", "getPlaceholders", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPlaceholders", "storage");
            initialize("getPlaceholders", "storage", valueStorage);
            Placeholders response = api.getPlaceholders(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getPlaceholders", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getPlaceholders");
        }
    }
    
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionTest() throws ApiException, Exception {
        initialize("getPortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPortion", "name");
            initialize("getPortion", "name", valueName);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getPortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPortion", "slideIndex");
            initialize("getPortion", "slideIndex", valueSlideIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getPortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getPortion", "shapeIndex");
            initialize("getPortion", "shapeIndex", valueShapeIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getPortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getPortion", "paragraphIndex");
            initialize("getPortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getPortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getPortion", "portionIndex");
            initialize("getPortion", "portionIndex", valuePortionIndex);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "getPortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPortion", "password");
            initialize("getPortion", "password", valuePassword);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getPortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPortion", "folder");
            initialize("getPortion", "folder", valueFolder);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getPortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getPortion");
        }
    }
    /**
     * Read paragraph portion info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getPortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getPortion", "password");
        String valueFolder = (String)getTestValue("String", "getPortion", "folder");
        String valueStorage = (String)getTestValue("String", "getPortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPortion", "storage");
            initialize("getPortion", "storage", valueStorage);
            Portion response = api.getPortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getPortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getPortion");
        }
    }
    
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsTest() throws ApiException, Exception {
        initialize("getPortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPortions", "name");
            initialize("getPortions", "name", valueName);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getPortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getPortions", "slideIndex");
            initialize("getPortions", "slideIndex", valueSlideIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getPortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getPortions", "shapeIndex");
            initialize("getPortions", "shapeIndex", valueShapeIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getPortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getPortions", "paragraphIndex");
            initialize("getPortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getPortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPortions", "password");
            initialize("getPortions", "password", valuePassword);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getPortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPortions", "folder");
            initialize("getPortions", "folder", valueFolder);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getPortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getPortions");
        }
    }
    /**
     * Read paragraph portions info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getPortions", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getPortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getPortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getPortions", "password");
        String valueFolder = (String)getTestValue("String", "getPortions", "folder");
        String valueStorage = (String)getTestValue("String", "getPortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPortions", "storage");
            initialize("getPortions", "storage", valueStorage);
            Portions response = api.getPortions(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getPortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getPortions");
        }
    }
    
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTest() throws ApiException, Exception {
        initialize("getPresentation", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPresentation", "name");
            initialize("getPresentation", "name", valueName);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getPresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getPresentation");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPresentation", "password");
            initialize("getPresentation", "password", valuePassword);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getPresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getPresentation");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPresentation", "folder");
            initialize("getPresentation", "folder", valueFolder);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getPresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getPresentation");
        }
    }
    /**
     * Read presentation info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentation", "name");
        String valuePassword = (String)getTestValue("String", "getPresentation", "password");
        String valueFolder = (String)getTestValue("String", "getPresentation", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPresentation", "storage");
            initialize("getPresentation", "storage", valueStorage);
            Document response = api.getPresentation(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getPresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getPresentation");
        }
    }
    
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesTest() throws ApiException, Exception {
        initialize("getPresentationImages", null, null);
        Images response = null;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPresentationImages", "name");
            initialize("getPresentationImages", "name", valueName);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getPresentationImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getPresentationImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPresentationImages", "password");
            initialize("getPresentationImages", "password", valuePassword);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getPresentationImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getPresentationImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPresentationImages", "folder");
            initialize("getPresentationImages", "folder", valueFolder);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getPresentationImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getPresentationImages");
        }
    }
    /**
     * Read presentation images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationImages", "name");
        String valuePassword = (String)getTestValue("String", "getPresentationImages", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationImages", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPresentationImages", "storage");
            initialize("getPresentationImages", "storage", valueStorage);
            Images response = api.getPresentationImages(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getPresentationImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getPresentationImages");
        }
    }
    
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsTest() throws ApiException, Exception {
        initialize("getPresentationTextItems", null, null);
        TextItems response = null;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getPresentationTextItems", "name");
            initialize("getPresentationTextItems", "name", valueName);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getPresentationTextItems", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidWithEmptyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueWithEmpty = (Boolean)invalidizeTestValue("Boolean", valueWithEmpty, "getPresentationTextItems", "withEmpty");
            initialize("getPresentationTextItems", "withEmpty", valueWithEmpty);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withEmpty", "getPresentationTextItems", valueWithEmpty);
        }
        if (needAssertResponse) {
            assertResponse("withEmpty", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getPresentationTextItems", "password");
            initialize("getPresentationTextItems", "password", valuePassword);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getPresentationTextItems", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getPresentationTextItems", "folder");
            initialize("getPresentationTextItems", "folder", valueFolder);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getPresentationTextItems", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getPresentationTextItems");
        }
    }
    /**
     * Extract presentation text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPresentationTextItemsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getPresentationTextItems", "name");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getPresentationTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getPresentationTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getPresentationTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getPresentationTextItems", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getPresentationTextItems", "storage");
            initialize("getPresentationTextItems", "storage", valueStorage);
            TextItems response = api.getPresentationTextItems(valueName, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getPresentationTextItems", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getPresentationTextItems");
        }
    }
    
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesTest() throws ApiException, Exception {
        initialize("getProtectionProperties", null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getProtectionProperties", "name");
            initialize("getProtectionProperties", "name", valueName);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getProtectionProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getProtectionProperties", "password");
            initialize("getProtectionProperties", "password", valuePassword);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getProtectionProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getProtectionProperties", "folder");
            initialize("getProtectionProperties", "folder", valueFolder);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getProtectionProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getProtectionProperties");
        }
    }
    /**
     * Read presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProtectionPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getProtectionProperties", "name");
        String valuePassword = (String)getTestValue("String", "getProtectionProperties", "password");
        String valueFolder = (String)getTestValue("String", "getProtectionProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getProtectionProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getProtectionProperties", "storage");
            initialize("getProtectionProperties", "storage", valueStorage);
            ProtectionProperties response = api.getProtectionProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getProtectionProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getProtectionProperties");
        }
    }
    
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsTest() throws ApiException, Exception {
        initialize("getSections", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSections", "name");
            initialize("getSections", "name", valueName);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSections", "password");
            initialize("getSections", "password", valuePassword);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSections", "folder");
            initialize("getSections", "folder", valueFolder);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSections");
        }
    }
    /**
     * Read presentation sections info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSections", "name");
        String valuePassword = (String)getTestValue("String", "getSections", "password");
        String valueFolder = (String)getTestValue("String", "getSections", "folder");
        String valueStorage = (String)getTestValue("String", "getSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSections", "storage");
            initialize("getSections", "storage", valueStorage);
            Sections response = api.getSections(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSections");
        }
    }
    
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeTest() throws ApiException, Exception {
        initialize("getShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getShape", "name");
            initialize("getShape", "name", valueName);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getShape", "slideIndex");
            initialize("getShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getShape", "shapeIndex");
            initialize("getShape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getShape", "password");
            initialize("getShape", "password", valuePassword);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getShape", "folder");
            initialize("getShape", "folder", valueFolder);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getShape");
        }
    }
    /**
     * Read slide shape info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getShape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getShape", "password");
        String valueFolder = (String)getTestValue("String", "getShape", "folder");
        String valueStorage = (String)getTestValue("String", "getShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getShape", "storage");
            initialize("getShape", "storage", valueStorage);
            ShapeBase response = api.getShape(valueName, valueSlideIndex, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getShape");
        }
    }
    
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesTest() throws ApiException, Exception {
        initialize("getShapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getShapes", "name");
            initialize("getShapes", "name", valueName);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getShapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getShapes", "slideIndex");
            initialize("getShapes", "slideIndex", valueSlideIndex);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getShapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getShapes", "password");
            initialize("getShapes", "password", valuePassword);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getShapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getShapes", "folder");
            initialize("getShapes", "folder", valueFolder);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getShapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getShapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getShapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getShapes", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getShapes", "password");
        String valueFolder = (String)getTestValue("String", "getShapes", "folder");
        String valueStorage = (String)getTestValue("String", "getShapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getShapes", "storage");
            initialize("getShapes", "storage", valueStorage);
            Shapes response = api.getShapes(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getShapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getShapes");
        }
    }
    
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTest() throws ApiException, Exception {
        initialize("getSlide", null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlide", "name");
            initialize("getSlide", "name", valueName);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlide", "slideIndex");
            initialize("getSlide", "slideIndex", valueSlideIndex);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlide", "password");
            initialize("getSlide", "password", valuePassword);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlide", "folder");
            initialize("getSlide", "folder", valueFolder);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlide");
        }
    }
    /**
     * Read presentation slide info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlide", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlide", "password");
        String valueFolder = (String)getTestValue("String", "getSlide", "folder");
        String valueStorage = (String)getTestValue("String", "getSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlide", "storage");
            initialize("getSlide", "storage", valueStorage);
            Slide response = api.getSlide(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlide");
        }
    }
    
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsTest() throws ApiException, Exception {
        initialize("getSlideComments", null, null);
        SlideComments response = null;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideComments", "name");
            initialize("getSlideComments", "name", valueName);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideComments", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideComments", "slideIndex");
            initialize("getSlideComments", "slideIndex", valueSlideIndex);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideComments", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideComments", "password");
            initialize("getSlideComments", "password", valuePassword);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideComments", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideComments", "folder");
            initialize("getSlideComments", "folder", valueFolder);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideComments", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideComments");
        }
    }
    /**
     * Read presentation slide comments.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideCommentsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideComments", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideComments", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideComments", "password");
        String valueFolder = (String)getTestValue("String", "getSlideComments", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideComments", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideComments", "storage");
            initialize("getSlideComments", "storage", valueStorage);
            SlideComments response = api.getSlideComments(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideComments", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideComments");
        }
    }
    
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("getSlideHeaderFooter", null, null);
        HeaderFooter response = null;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideHeaderFooter", "name");
            initialize("getSlideHeaderFooter", "name", valueName);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideHeaderFooter", "slideIndex");
            initialize("getSlideHeaderFooter", "slideIndex", valueSlideIndex);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideHeaderFooter", "password");
            initialize("getSlideHeaderFooter", "password", valuePassword);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideHeaderFooter", "folder");
            initialize("getSlideHeaderFooter", "folder", valueFolder);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideHeaderFooter");
        }
    }
    /**
     * Get footer info for the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideHeaderFooter", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "getSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideHeaderFooter", "storage");
            initialize("getSlideHeaderFooter", "storage", valueStorage);
            HeaderFooter response = api.getSlideHeaderFooter(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideHeaderFooter");
        }
    }
    
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesTest() throws ApiException, Exception {
        initialize("getSlideImages", null, null);
        Images response = null;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideImages", "name");
            initialize("getSlideImages", "name", valueName);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideImages", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideImages", "slideIndex");
            initialize("getSlideImages", "slideIndex", valueSlideIndex);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideImages", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideImages", "password");
            initialize("getSlideImages", "password", valuePassword);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideImages", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideImages", "folder");
            initialize("getSlideImages", "folder", valueFolder);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideImages", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideImages");
        }
    }
    /**
     * Read slide images info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideImagesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideImages", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideImages", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getSlideImages", "password");
        String valueFolder = (String)getTestValue("String", "getSlideImages", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideImages", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideImages", "storage");
            initialize("getSlideImages", "storage", valueStorage);
            Images response = api.getSlideImages(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideImages", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideImages");
        }
    }
    
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesTest() throws ApiException, Exception {
        initialize("getSlideProperties", null, null);
        SlideProperties response = null;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideProperties", "name");
            initialize("getSlideProperties", "name", valueName);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideProperties", "password");
            initialize("getSlideProperties", "password", valuePassword);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideProperties", "folder");
            initialize("getSlideProperties", "folder", valueFolder);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideProperties");
        }
    }
    /**
     * Read presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidePropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideProperties", "name");
        String valuePassword = (String)getTestValue("String", "getSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "getSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideProperties", "storage");
            initialize("getSlideProperties", "storage", valueStorage);
            SlideProperties response = api.getSlideProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideProperties");
        }
    }
    
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsTest() throws ApiException, Exception {
        initialize("getSlideTextItems", null, null);
        TextItems response = null;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlideTextItems", "name");
            initialize("getSlideTextItems", "name", valueName);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlideTextItems", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSlideTextItems", "slideIndex");
            initialize("getSlideTextItems", "slideIndex", valueSlideIndex);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSlideTextItems", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidWithEmptyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueWithEmpty = (Boolean)invalidizeTestValue("Boolean", valueWithEmpty, "getSlideTextItems", "withEmpty");
            initialize("getSlideTextItems", "withEmpty", valueWithEmpty);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "withEmpty", "getSlideTextItems", valueWithEmpty);
        }
        if (needAssertResponse) {
            assertResponse("withEmpty", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlideTextItems", "password");
            initialize("getSlideTextItems", "password", valuePassword);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlideTextItems", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlideTextItems", "folder");
            initialize("getSlideTextItems", "folder", valueFolder);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlideTextItems", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlideTextItems");
        }
    }
    /**
     * Extract slide text items.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlideTextItemsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlideTextItems", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSlideTextItems", "slideIndex");
        Boolean valueWithEmpty = (Boolean)getTestValue("Boolean", "getSlideTextItems", "withEmpty");
        String valuePassword = (String)getTestValue("String", "getSlideTextItems", "password");
        String valueFolder = (String)getTestValue("String", "getSlideTextItems", "folder");
        String valueStorage = (String)getTestValue("String", "getSlideTextItems", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlideTextItems", "storage");
            initialize("getSlideTextItems", "storage", valueStorage);
            TextItems response = api.getSlideTextItems(valueName, valueSlideIndex, valueWithEmpty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlideTextItems", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlideTextItems");
        }
    }
    
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesTest() throws ApiException, Exception {
        initialize("getSlides", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSlides", "name");
            initialize("getSlides", "name", valueName);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSlides");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSlides", "password");
            initialize("getSlides", "password", valuePassword);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSlides");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSlides", "folder");
            initialize("getSlides", "folder", valueFolder);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSlides");
        }
    }
    /**
     * Read presentation slides info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSlides", "name");
        String valuePassword = (String)getTestValue("String", "getSlides", "password");
        String valueFolder = (String)getTestValue("String", "getSlides", "folder");
        String valueStorage = (String)getTestValue("String", "getSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSlides", "storage");
            initialize("getSlides", "storage", valueStorage);
            Slides response = api.getSlides(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSlides");
        }
    }
    
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeTest() throws ApiException, Exception {
        initialize("getSubshape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshape", "name");
            initialize("getSubshape", "name", valueName);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshape", "slideIndex");
            initialize("getSubshape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshape", "path");
            initialize("getSubshape", "path", valuePath);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSubshape", "shapeIndex");
            initialize("getSubshape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSubshape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshape", "password");
            initialize("getSubshape", "password", valuePassword);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshape", "folder");
            initialize("getSubshape", "folder", valueFolder);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshape");
        }
    }
    /**
     * Read slide shape info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshape", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshape", "password");
        String valueFolder = (String)getTestValue("String", "getSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshape", "storage");
            initialize("getSubshape", "storage", valueStorage);
            ShapeBase response = api.getSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshape");
        }
    }
    
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphTest() throws ApiException, Exception {
        initialize("getSubshapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshapeParagraph", "name");
            initialize("getSubshapeParagraph", "name", valueName);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshapeParagraph", "slideIndex");
            initialize("getSubshapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshapeParagraph", "path");
            initialize("getSubshapeParagraph", "path", valuePath);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshapeParagraph", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSubshapeParagraph", "shapeIndex");
            initialize("getSubshapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSubshapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSubshapeParagraph", "paragraphIndex");
            initialize("getSubshapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getSubshapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshapeParagraph", "password");
            initialize("getSubshapeParagraph", "password", valuePassword);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshapeParagraph", "folder");
            initialize("getSubshapeParagraph", "folder", valueFolder);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshapeParagraph");
        }
    }
    /**
     * Read shape paragraph info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapeParagraph", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshapeParagraph", "storage");
            initialize("getSubshapeParagraph", "storage", valueStorage);
            Paragraph response = api.getSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshapeParagraph");
        }
    }
    
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsTest() throws ApiException, Exception {
        initialize("getSubshapeParagraphs", null, null);
        Paragraphs response = null;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshapeParagraphs", "name");
            initialize("getSubshapeParagraphs", "name", valueName);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshapeParagraphs", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshapeParagraphs", "slideIndex");
            initialize("getSubshapeParagraphs", "slideIndex", valueSlideIndex);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshapeParagraphs", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshapeParagraphs", "path");
            initialize("getSubshapeParagraphs", "path", valuePath);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshapeParagraphs", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSubshapeParagraphs", "shapeIndex");
            initialize("getSubshapeParagraphs", "shapeIndex", valueShapeIndex);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSubshapeParagraphs", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshapeParagraphs", "password");
            initialize("getSubshapeParagraphs", "password", valuePassword);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshapeParagraphs", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshapeParagraphs", "folder");
            initialize("getSubshapeParagraphs", "folder", valueFolder);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshapeParagraphs", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshapeParagraphs");
        }
    }
    /**
     * Read shape paragraphs info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapeParagraphsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapeParagraphs", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapeParagraphs", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapeParagraphs", "shapeIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapeParagraphs", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapeParagraphs", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapeParagraphs", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshapeParagraphs", "storage");
            initialize("getSubshapeParagraphs", "storage", valueStorage);
            Paragraphs response = api.getSubshapeParagraphs(valueName, valueSlideIndex, valuePath, valueShapeIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshapeParagraphs", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshapeParagraphs");
        }
    }
    
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionTest() throws ApiException, Exception {
        initialize("getSubshapePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshapePortion", "name");
            initialize("getSubshapePortion", "name", valueName);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshapePortion", "slideIndex");
            initialize("getSubshapePortion", "slideIndex", valueSlideIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshapePortion", "path");
            initialize("getSubshapePortion", "path", valuePath);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshapePortion", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSubshapePortion", "shapeIndex");
            initialize("getSubshapePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSubshapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSubshapePortion", "paragraphIndex");
            initialize("getSubshapePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getSubshapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "getSubshapePortion", "portionIndex");
            initialize("getSubshapePortion", "portionIndex", valuePortionIndex);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "getSubshapePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshapePortion", "password");
            initialize("getSubshapePortion", "password", valuePassword);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshapePortion", "folder");
            initialize("getSubshapePortion", "folder", valueFolder);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshapePortion");
        }
    }
    /**
     * Read paragraph portion info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "getSubshapePortion", "portionIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshapePortion", "storage");
            initialize("getSubshapePortion", "storage", valueStorage);
            Portion response = api.getSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshapePortion");
        }
    }
    
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsTest() throws ApiException, Exception {
        initialize("getSubshapePortions", null, null);
        Portions response = null;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshapePortions", "name");
            initialize("getSubshapePortions", "name", valueName);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshapePortions", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshapePortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshapePortions", "slideIndex");
            initialize("getSubshapePortions", "slideIndex", valueSlideIndex);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshapePortions", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshapePortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshapePortions", "path");
            initialize("getSubshapePortions", "path", valuePath);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshapePortions", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshapePortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "getSubshapePortions", "shapeIndex");
            initialize("getSubshapePortions", "shapeIndex", valueShapeIndex);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "getSubshapePortions", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "getSubshapePortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "getSubshapePortions", "paragraphIndex");
            initialize("getSubshapePortions", "paragraphIndex", valueParagraphIndex);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "getSubshapePortions", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "getSubshapePortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshapePortions", "password");
            initialize("getSubshapePortions", "password", valuePassword);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshapePortions", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshapePortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshapePortions", "folder");
            initialize("getSubshapePortions", "folder", valueFolder);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshapePortions", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshapePortions");
        }
    }
    /**
     * Read paragraph portions info (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapePortionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapePortions", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapePortions", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "getSubshapePortions", "paragraphIndex");
        String valuePassword = (String)getTestValue("String", "getSubshapePortions", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapePortions", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapePortions", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshapePortions", "storage");
            initialize("getSubshapePortions", "storage", valueStorage);
            Portions response = api.getSubshapePortions(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshapePortions", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshapePortions");
        }
    }
    
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapesTest() throws ApiException, Exception {
        initialize("getSubshapes", null, null);
        Shapes response = null;
        String valueName = (String)getTestValue("String", "getSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapes", "storage");
        response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapes", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getSubshapes", "name");
            initialize("getSubshapes", "name", valueName);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getSubshapes", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapes", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getSubshapes", "slideIndex");
            initialize("getSubshapes", "slideIndex", valueSlideIndex);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getSubshapes", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapesInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapes", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "getSubshapes", "path");
            initialize("getSubshapes", "path", valuePath);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "getSubshapes", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "getSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapes", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getSubshapes", "password");
            initialize("getSubshapes", "password", valuePassword);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getSubshapes", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapes", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getSubshapes", "folder");
            initialize("getSubshapes", "folder", valueFolder);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getSubshapes", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getSubshapes");
        }
    }
    /**
     * Read slide shapes info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubshapesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getSubshapes", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getSubshapes", "slideIndex");
        String valuePath = (String)getTestValue("String", "getSubshapes", "path");
        String valuePassword = (String)getTestValue("String", "getSubshapes", "password");
        String valueFolder = (String)getTestValue("String", "getSubshapes", "folder");
        String valueStorage = (String)getTestValue("String", "getSubshapes", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getSubshapes", "storage");
            initialize("getSubshapes", "storage", valueStorage);
            Shapes response = api.getSubshapes(valueName, valueSlideIndex, valuePath, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getSubshapes", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getSubshapes");
        }
    }
    
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeTest() throws ApiException, Exception {
        initialize("getTheme", null, null);
        Theme response = null;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getTheme", "name");
            initialize("getTheme", "name", valueName);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getTheme", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "getTheme", "slideIndex");
            initialize("getTheme", "slideIndex", valueSlideIndex);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "getTheme", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getTheme", "password");
            initialize("getTheme", "password", valuePassword);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getTheme", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getTheme", "folder");
            initialize("getTheme", "folder", valueFolder);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getTheme", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getTheme");
        }
    }
    /**
     * Read slide theme info.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getThemeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getTheme", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "getTheme", "slideIndex");
        String valuePassword = (String)getTestValue("String", "getTheme", "password");
        String valueFolder = (String)getTestValue("String", "getTheme", "folder");
        String valueStorage = (String)getTestValue("String", "getTheme", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getTheme", "storage");
            initialize("getTheme", "storage", valueStorage);
            Theme response = api.getTheme(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getTheme", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getTheme");
        }
    }
    
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesTest() throws ApiException, Exception {
        initialize("getViewProperties", null, null);
        ViewProperties response = null;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "getViewProperties", "name");
            initialize("getViewProperties", "name", valueName);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "getViewProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "getViewProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "getViewProperties", "password");
            initialize("getViewProperties", "password", valuePassword);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "getViewProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "getViewProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "getViewProperties", "folder");
            initialize("getViewProperties", "folder", valueFolder);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "getViewProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "getViewProperties");
        }
    }
    /**
     * Read presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getViewPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "getViewProperties", "name");
        String valuePassword = (String)getTestValue("String", "getViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "getViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "getViewProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "getViewProperties", "storage");
            initialize("getViewProperties", "storage", valueStorage);
            ViewProperties response = api.getViewProperties(valueName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "getViewProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "getViewProperties");
        }
    }
    
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlTest() throws ApiException, Exception {
        initialize("importFromHtml", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "importFromHtml", "name");
            initialize("importFromHtml", "name", valueName);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "importFromHtml", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidHtmlTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueHtml = (String)invalidizeTestValue("String", valueHtml, "importFromHtml", "html");
            initialize("importFromHtml", "html", valueHtml);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "html", "importFromHtml", valueHtml);
        }
        if (needAssertResponse) {
            assertResponse("html", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "importFromHtml", "password");
            initialize("importFromHtml", "password", valuePassword);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "importFromHtml", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "importFromHtml", "folder");
            initialize("importFromHtml", "folder", valueFolder);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "importFromHtml", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "importFromHtml");
        }
    }
    /**
     * Create presentation document from html.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromHtmlInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromHtml", "name");
        String valueHtml = (String)getTestValue("String", "importFromHtml", "html");
        String valuePassword = (String)getTestValue("String", "importFromHtml", "password");
        String valueFolder = (String)getTestValue("String", "importFromHtml", "folder");
        String valueStorage = (String)getTestValue("String", "importFromHtml", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "importFromHtml", "storage");
            initialize("importFromHtml", "storage", valueStorage);
            Document response = api.importFromHtml(valueName, valueHtml, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "importFromHtml", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "importFromHtml");
        }
    }
    
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfTest() throws ApiException, Exception {
        initialize("importFromPdf", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "importFromPdf", "name");
            initialize("importFromPdf", "name", valueName);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "importFromPdf", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidPdfTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valuePdf = (byte[])invalidizeTestValue("byte[]", valuePdf, "importFromPdf", "pdf");
            initialize("importFromPdf", "pdf", valuePdf);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pdf", "importFromPdf", valuePdf);
        }
        if (needAssertResponse) {
            assertResponse("pdf", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "importFromPdf", "password");
            initialize("importFromPdf", "password", valuePassword);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "importFromPdf", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "importFromPdf", "folder");
            initialize("importFromPdf", "folder", valueFolder);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "importFromPdf", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "importFromPdf");
        }
    }
    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importFromPdfInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "importFromPdf", "name");
        byte[] valuePdf = (byte[])getTestValue("byte[]", "importFromPdf", "pdf");
        String valuePassword = (String)getTestValue("String", "importFromPdf", "password");
        String valueFolder = (String)getTestValue("String", "importFromPdf", "folder");
        String valueStorage = (String)getTestValue("String", "importFromPdf", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "importFromPdf", "storage");
            initialize("importFromPdf", "storage", valueStorage);
            Document response = api.importFromPdf(valueName, valuePdf, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "importFromPdf", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "importFromPdf");
        }
    }
    
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeTest() throws ApiException, Exception {
        initialize("merge", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "merge", "name");
            initialize("merge", "name", valueName);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "merge", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueRequest = (PresentationsMergeRequest)invalidizeTestValue("PresentationsMergeRequest", valueRequest, "merge", "request");
            initialize("merge", "request", valueRequest);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "merge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "merge", "password");
            initialize("merge", "password", valuePassword);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "merge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "merge", "folder");
            initialize("merge", "folder", valueFolder);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "merge", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "merge");
        }
    }
    /**
     * Merge the presentation with other presentations specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "merge", "name");
        PresentationsMergeRequest valueRequest = (PresentationsMergeRequest)getTestValue("PresentationsMergeRequest", "merge", "request");
        String valuePassword = (String)getTestValue("String", "merge", "password");
        String valueFolder = (String)getTestValue("String", "merge", "folder");
        String valueStorage = (String)getTestValue("String", "merge", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "merge", "storage");
            initialize("merge", "storage", valueStorage);
            Document response = api.merge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "merge", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "merge");
        }
    }
    
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineTest() throws ApiException, Exception {
        initialize("mergeAndSaveOnline", null, null);
        ;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "mergeAndSaveOnline", "outPath");
            initialize("mergeAndSaveOnline", "outPath", valueOutPath);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "mergeAndSaveOnline", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "mergeAndSaveOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "mergeAndSaveOnline", "files");
            initialize("mergeAndSaveOnline", "files", valueFiles);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "files", "mergeAndSaveOnline", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("files", "mergeAndSaveOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "mergeAndSaveOnline", "request");
            initialize("mergeAndSaveOnline", "request", valueRequest);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "mergeAndSaveOnline", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "mergeAndSaveOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeAndSaveOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueOutPath = (String)getTestValue("String", "mergeAndSaveOnline", "outPath");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeAndSaveOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeAndSaveOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeAndSaveOnline", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "mergeAndSaveOnline", "storage");
            initialize("mergeAndSaveOnline", "storage", valueStorage);
            api.mergeAndSaveOnline(valueOutPath, valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "mergeAndSaveOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "mergeAndSaveOnline");
        }
    }
    
    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineTest() throws ApiException, Exception {
        initialize("mergeOnline", null, null);
        File response = null;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
        assertTrue(response.isFile());
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "mergeOnline", "files");
            initialize("mergeOnline", "files", valueFiles);
            File response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "files", "mergeOnline", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("files", "mergeOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "mergeOnline", "request");
            initialize("mergeOnline", "request", valueRequest);
            File response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "mergeOnline", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "mergeOnline");
        }
    }
    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mergeOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "mergeOnline", "files");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "mergeOnline", "request");
        String valueStorage = (String)getTestValue("String", "mergeOnline", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "mergeOnline", "storage");
            initialize("mergeOnline", "storage", valueStorage);
            File response = api.mergeOnline(valueFiles, valueRequest, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "mergeOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "mergeOnline");
        }
    }
    
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileTest() throws ApiException, Exception {
        initialize("moveFile", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
    }

    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "moveFile", "srcPath");
            initialize("moveFile", "srcPath", valueSrcPath);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "moveFile", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "moveFile", "destPath");
            initialize("moveFile", "destPath", valueDestPath);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "moveFile", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "moveFile", "srcStorageName");
            initialize("moveFile", "srcStorageName", valueSrcStorageName);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "moveFile", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "moveFile", "destStorageName");
            initialize("moveFile", "destStorageName", valueDestStorageName);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "moveFile", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "moveFile");
        }
    }
    /**
     * Move file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFileInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFile", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFile", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFile", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFile", "destStorageName");
        String valueVersionId = (String)getTestValue("String", "moveFile", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "moveFile", "versionId");
            initialize("moveFile", "versionId", valueVersionId);
            api.moveFile(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "moveFile", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "moveFile");
        }
    }
    
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderTest() throws ApiException, Exception {
        initialize("moveFolder", null, null);
        ;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
    }

    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidSrcPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueSrcPath = (String)invalidizeTestValue("String", valueSrcPath, "moveFolder", "srcPath");
            initialize("moveFolder", "srcPath", valueSrcPath);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcPath", "moveFolder", valueSrcPath);
        }
        if (needAssertResponse) {
            assertResponse("srcPath", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidDestPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueDestPath = (String)invalidizeTestValue("String", valueDestPath, "moveFolder", "destPath");
            initialize("moveFolder", "destPath", valueDestPath);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destPath", "moveFolder", valueDestPath);
        }
        if (needAssertResponse) {
            assertResponse("destPath", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidSrcStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueSrcStorageName = (String)invalidizeTestValue("String", valueSrcStorageName, "moveFolder", "srcStorageName");
            initialize("moveFolder", "srcStorageName", valueSrcStorageName);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "srcStorageName", "moveFolder", valueSrcStorageName);
        }
        if (needAssertResponse) {
            assertResponse("srcStorageName", "moveFolder");
        }
    }
    /**
     * Move folder
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveFolderInvalidDestStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueSrcPath = (String)getTestValue("String", "moveFolder", "srcPath");
        String valueDestPath = (String)getTestValue("String", "moveFolder", "destPath");
        String valueSrcStorageName = (String)getTestValue("String", "moveFolder", "srcStorageName");
        String valueDestStorageName = (String)getTestValue("String", "moveFolder", "destStorageName");
        try {
            valueDestStorageName = (String)invalidizeTestValue("String", valueDestStorageName, "moveFolder", "destStorageName");
            initialize("moveFolder", "destStorageName", valueDestStorageName);
            api.moveFolder(valueSrcPath, valueDestPath, valueSrcStorageName, valueDestStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destStorageName", "moveFolder", valueDestStorageName);
        }
        if (needAssertResponse) {
            assertResponse("destStorageName", "moveFolder");
        }
    }
    
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionTest() throws ApiException, Exception {
        initialize("moveSection", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "moveSection", "name");
            initialize("moveSection", "name", valueName);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "moveSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "moveSection", "sectionIndex");
            initialize("moveSection", "sectionIndex", valueSectionIndex);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionIndex", "moveSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("sectionIndex", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidNewPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueNewPosition = (Integer)invalidizeTestValue("Integer", valueNewPosition, "moveSection", "newPosition");
            initialize("moveSection", "newPosition", valueNewPosition);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newPosition", "moveSection", valueNewPosition);
        }
        if (needAssertResponse) {
            assertResponse("newPosition", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "moveSection", "password");
            initialize("moveSection", "password", valuePassword);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "moveSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "moveSection", "folder");
            initialize("moveSection", "folder", valueFolder);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "moveSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "moveSection");
        }
    }
    /**
     * Move presentation section to a specified position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "moveSection", "sectionIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSection", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSection", "password");
        String valueFolder = (String)getTestValue("String", "moveSection", "folder");
        String valueStorage = (String)getTestValue("String", "moveSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "moveSection", "storage");
            initialize("moveSection", "storage", valueStorage);
            Sections response = api.moveSection(valueName, valueSectionIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "moveSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "moveSection");
        }
    }
    
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideTest() throws ApiException, Exception {
        initialize("moveSlide", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "moveSlide", "name");
            initialize("moveSlide", "name", valueName);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "moveSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "moveSlide", "slideIndex");
            initialize("moveSlide", "slideIndex", valueSlideIndex);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "moveSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidNewPositionTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueNewPosition = (Integer)invalidizeTestValue("Integer", valueNewPosition, "moveSlide", "newPosition");
            initialize("moveSlide", "newPosition", valueNewPosition);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newPosition", "moveSlide", valueNewPosition);
        }
        if (needAssertResponse) {
            assertResponse("newPosition", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "moveSlide", "password");
            initialize("moveSlide", "password", valuePassword);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "moveSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "moveSlide", "folder");
            initialize("moveSlide", "folder", valueFolder);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "moveSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "moveSlide");
        }
    }
    /**
     * Reorder presentation slide position.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "moveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "moveSlide", "slideIndex");
        Integer valueNewPosition = (Integer)getTestValue("Integer", "moveSlide", "newPosition");
        String valuePassword = (String)getTestValue("String", "moveSlide", "password");
        String valueFolder = (String)getTestValue("String", "moveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "moveSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "moveSlide", "storage");
            initialize("moveSlide", "storage", valueStorage);
            Slides response = api.moveSlide(valueName, valueSlideIndex, valueNewPosition, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "moveSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "moveSlide");
        }
    }
    
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsTest() throws ApiException, Exception {
        initialize("notesSlideExists", null, null);
        EntityExists response = null;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "notesSlideExists", "name");
            initialize("notesSlideExists", "name", valueName);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "notesSlideExists", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "notesSlideExists", "slideIndex");
            initialize("notesSlideExists", "slideIndex", valueSlideIndex);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "notesSlideExists", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "notesSlideExists", "password");
            initialize("notesSlideExists", "password", valuePassword);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "notesSlideExists", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "notesSlideExists", "folder");
            initialize("notesSlideExists", "folder", valueFolder);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "notesSlideExists", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "notesSlideExists");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "notesSlideExists", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExists", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExists", "password");
        String valueFolder = (String)getTestValue("String", "notesSlideExists", "folder");
        String valueStorage = (String)getTestValue("String", "notesSlideExists", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "notesSlideExists", "storage");
            initialize("notesSlideExists", "storage", valueStorage);
            EntityExists response = api.notesSlideExists(valueName, valueSlideIndex, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "notesSlideExists", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "notesSlideExists");
        }
    }
    
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineTest() throws ApiException, Exception {
        initialize("notesSlideExistsOnline", null, null);
        EntityExists response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
        assertNotNull(response);
    }

    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "notesSlideExistsOnline", "document");
            initialize("notesSlideExistsOnline", "document", valueDocument);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "notesSlideExistsOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "notesSlideExistsOnline");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "notesSlideExistsOnline", "slideIndex");
            initialize("notesSlideExistsOnline", "slideIndex", valueSlideIndex);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "notesSlideExistsOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "notesSlideExistsOnline");
        }
    }
    /**
     * Get info whether a notes slide exists.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notesSlideExistsOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "notesSlideExistsOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "notesSlideExistsOnline", "slideIndex");
        String valuePassword = (String)getTestValue("String", "notesSlideExistsOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "notesSlideExistsOnline", "password");
            initialize("notesSlideExistsOnline", "password", valuePassword);
            EntityExists response = api.notesSlideExistsOnline(valueDocument, valueSlideIndex, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "notesSlideExistsOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "notesSlideExistsOnline");
        }
    }
    
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsTest() throws ApiException, Exception {
        initialize("objectExists", null, null);
        ObjectExist response = null;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        response = api.objectExists(valuePath, valueStorageName, valueVersionId);
        assertNotNull(response);
    }

    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "objectExists", "path");
            initialize("objectExists", "path", valuePath);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "objectExists", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "objectExists");
        }
    }
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "objectExists", "storageName");
            initialize("objectExists", "storageName", valueStorageName);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "objectExists", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "objectExists");
        }
    }
    /**
     * Check if file or folder exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void objectExistsInvalidVersionIdTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "objectExists", "path");
        String valueStorageName = (String)getTestValue("String", "objectExists", "storageName");
        String valueVersionId = (String)getTestValue("String", "objectExists", "versionId");
        try {
            valueVersionId = (String)invalidizeTestValue("String", valueVersionId, "objectExists", "versionId");
            initialize("objectExists", "versionId", valueVersionId);
            ObjectExist response = api.objectExists(valuePath, valueStorageName, valueVersionId);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "versionId", "objectExists", valueVersionId);
        }
        if (needAssertResponse) {
            assertResponse("versionId", "objectExists");
        }
    }
    
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeTest() throws ApiException, Exception {
        initialize("orderedMerge", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "orderedMerge", "name");
            initialize("orderedMerge", "name", valueName);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "orderedMerge", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidRequestTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueRequest = (OrderedMergeRequest)invalidizeTestValue("OrderedMergeRequest", valueRequest, "orderedMerge", "request");
            initialize("orderedMerge", "request", valueRequest);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "request", "orderedMerge", valueRequest);
        }
        if (needAssertResponse) {
            assertResponse("request", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "orderedMerge", "password");
            initialize("orderedMerge", "password", valuePassword);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "orderedMerge", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "orderedMerge", "folder");
            initialize("orderedMerge", "folder", valueFolder);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "orderedMerge", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "orderedMerge");
        }
    }
    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderedMergeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "orderedMerge", "name");
        OrderedMergeRequest valueRequest = (OrderedMergeRequest)getTestValue("OrderedMergeRequest", "orderedMerge", "request");
        String valuePassword = (String)getTestValue("String", "orderedMerge", "password");
        String valueFolder = (String)getTestValue("String", "orderedMerge", "folder");
        String valueStorage = (String)getTestValue("String", "orderedMerge", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "orderedMerge", "storage");
            initialize("orderedMerge", "storage", valueStorage);
            Document response = api.orderedMerge(valueName, valueRequest, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "orderedMerge", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "orderedMerge");
        }
    }
    
    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineTest() throws ApiException, Exception {
        initialize("pipeline", null, null);
        File response = null;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "pipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "pipeline", "files");
        response = api.pipeline(valuePipeline, valueFiles);
        assertTrue(response.isFile());
    }

    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineInvalidPipelineTest() throws ApiException {
        Boolean needAssertResponse = false;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "pipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "pipeline", "files");
        try {
            valuePipeline = (Pipeline)invalidizeTestValue("Pipeline", valuePipeline, "pipeline", "pipeline");
            initialize("pipeline", "pipeline", valuePipeline);
            File response = api.pipeline(valuePipeline, valueFiles);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pipeline", "pipeline", valuePipeline);
        }
        if (needAssertResponse) {
            assertResponse("pipeline", "pipeline");
        }
    }
    /**
     * Performs slides pipeline.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pipelineInvalidFilesTest() throws ApiException {
        Boolean needAssertResponse = false;
        Pipeline valuePipeline = (Pipeline)getTestValue("Pipeline", "pipeline", "pipeline");
        List<FileInfo> valueFiles = (List<FileInfo>)getTestValue("List<FileInfo>", "pipeline", "files");
        try {
            valueFiles = (List<FileInfo>)invalidizeTestValue("List<FileInfo>", valueFiles, "pipeline", "files");
            initialize("pipeline", "files", valueFiles);
            File response = api.pipeline(valuePipeline, valueFiles);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "files", "pipeline", valueFiles);
        }
        if (needAssertResponse) {
            assertResponse("files", "pipeline");
        }
    }
    
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesTest() throws ApiException, Exception {
        initialize("reorderSlides", null, null);
        Slides response = null;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "reorderSlides", "name");
            initialize("reorderSlides", "name", valueName);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "reorderSlides", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidOldPositionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueOldPositions = (List<Integer>)invalidizeTestValue("List<Integer>", valueOldPositions, "reorderSlides", "oldPositions");
            initialize("reorderSlides", "oldPositions", valueOldPositions);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldPositions", "reorderSlides", valueOldPositions);
        }
        if (needAssertResponse) {
            assertResponse("oldPositions", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidNewPositionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueNewPositions = (List<Integer>)invalidizeTestValue("List<Integer>", valueNewPositions, "reorderSlides", "newPositions");
            initialize("reorderSlides", "newPositions", valueNewPositions);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newPositions", "reorderSlides", valueNewPositions);
        }
        if (needAssertResponse) {
            assertResponse("newPositions", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "reorderSlides", "password");
            initialize("reorderSlides", "password", valuePassword);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "reorderSlides", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "reorderSlides", "folder");
            initialize("reorderSlides", "folder", valueFolder);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "reorderSlides", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "reorderSlides");
        }
    }
    /**
     * Reorder presentation slides positions.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderSlidesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "reorderSlides", "name");
        List<Integer> valueOldPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "oldPositions");
        List<Integer> valueNewPositions = (List<Integer>)getTestValue("List<Integer>", "reorderSlides", "newPositions");
        String valuePassword = (String)getTestValue("String", "reorderSlides", "password");
        String valueFolder = (String)getTestValue("String", "reorderSlides", "folder");
        String valueStorage = (String)getTestValue("String", "reorderSlides", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "reorderSlides", "storage");
            initialize("reorderSlides", "storage", valueStorage);
            Slides response = api.reorderSlides(valueName, valueOldPositions, valueNewPositions, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "reorderSlides", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "reorderSlides");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextTest() throws ApiException, Exception {
        initialize("replacePresentationText", null, null);
        DocumentReplaceResult response = null;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "replacePresentationText", "name");
            initialize("replacePresentationText", "name", valueName);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "replacePresentationText", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replacePresentationText", "oldValue");
            initialize("replacePresentationText", "oldValue", valueOldValue);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "replacePresentationText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replacePresentationText", "newValue");
            initialize("replacePresentationText", "newValue", valueNewValue);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "replacePresentationText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replacePresentationText", "ignoreCase");
            initialize("replacePresentationText", "ignoreCase", valueIgnoreCase);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "replacePresentationText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replacePresentationText", "password");
            initialize("replacePresentationText", "password", valuePassword);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "replacePresentationText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "replacePresentationText", "folder");
            initialize("replacePresentationText", "folder", valueFolder);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "replacePresentationText", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "replacePresentationText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replacePresentationText", "name");
        String valueOldValue = (String)getTestValue("String", "replacePresentationText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationText", "password");
        String valueFolder = (String)getTestValue("String", "replacePresentationText", "folder");
        String valueStorage = (String)getTestValue("String", "replacePresentationText", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "replacePresentationText", "storage");
            initialize("replacePresentationText", "storage", valueStorage);
            DocumentReplaceResult response = api.replacePresentationText(valueName, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "replacePresentationText", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "replacePresentationText");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineTest() throws ApiException, Exception {
        initialize("replacePresentationTextOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "replacePresentationTextOnline", "document");
            initialize("replacePresentationTextOnline", "document", valueDocument);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "replacePresentationTextOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replacePresentationTextOnline", "oldValue");
            initialize("replacePresentationTextOnline", "oldValue", valueOldValue);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "replacePresentationTextOnline", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replacePresentationTextOnline", "newValue");
            initialize("replacePresentationTextOnline", "newValue", valueNewValue);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "replacePresentationTextOnline", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replacePresentationTextOnline", "ignoreCase");
            initialize("replacePresentationTextOnline", "ignoreCase", valueIgnoreCase);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "replacePresentationTextOnline", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "replacePresentationTextOnline");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replacePresentationTextOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replacePresentationTextOnline", "document");
        String valueOldValue = (String)getTestValue("String", "replacePresentationTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replacePresentationTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replacePresentationTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replacePresentationTextOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replacePresentationTextOnline", "password");
            initialize("replacePresentationTextOnline", "password", valuePassword);
            File response = api.replacePresentationTextOnline(valueDocument, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "replacePresentationTextOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "replacePresentationTextOnline");
        }
    }
    
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextTest() throws ApiException, Exception {
        initialize("replaceSlideText", null, null);
        SlideReplaceResult response = null;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "replaceSlideText", "name");
            initialize("replaceSlideText", "name", valueName);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "replaceSlideText", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "replaceSlideText", "slideIndex");
            initialize("replaceSlideText", "slideIndex", valueSlideIndex);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "replaceSlideText", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replaceSlideText", "oldValue");
            initialize("replaceSlideText", "oldValue", valueOldValue);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "replaceSlideText", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replaceSlideText", "newValue");
            initialize("replaceSlideText", "newValue", valueNewValue);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "replaceSlideText", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replaceSlideText", "ignoreCase");
            initialize("replaceSlideText", "ignoreCase", valueIgnoreCase);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "replaceSlideText", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replaceSlideText", "password");
            initialize("replaceSlideText", "password", valuePassword);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "replaceSlideText", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "replaceSlideText", "folder");
            initialize("replaceSlideText", "folder", valueFolder);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "replaceSlideText", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "replaceSlideText");
        }
    }
    /**
     * Replace text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "replaceSlideText", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideText", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideText", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideText", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideText", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideText", "password");
        String valueFolder = (String)getTestValue("String", "replaceSlideText", "folder");
        String valueStorage = (String)getTestValue("String", "replaceSlideText", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "replaceSlideText", "storage");
            initialize("replaceSlideText", "storage", valueStorage);
            SlideReplaceResult response = api.replaceSlideText(valueName, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "replaceSlideText", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "replaceSlideText");
        }
    }
    
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineTest() throws ApiException, Exception {
        initialize("replaceSlideTextOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "replaceSlideTextOnline", "document");
            initialize("replaceSlideTextOnline", "document", valueDocument);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "replaceSlideTextOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "replaceSlideTextOnline", "slideIndex");
            initialize("replaceSlideTextOnline", "slideIndex", valueSlideIndex);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "replaceSlideTextOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidOldValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueOldValue = (String)invalidizeTestValue("String", valueOldValue, "replaceSlideTextOnline", "oldValue");
            initialize("replaceSlideTextOnline", "oldValue", valueOldValue);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "oldValue", "replaceSlideTextOnline", valueOldValue);
        }
        if (needAssertResponse) {
            assertResponse("oldValue", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidNewValueTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueNewValue = (String)invalidizeTestValue("String", valueNewValue, "replaceSlideTextOnline", "newValue");
            initialize("replaceSlideTextOnline", "newValue", valueNewValue);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "newValue", "replaceSlideTextOnline", valueNewValue);
        }
        if (needAssertResponse) {
            assertResponse("newValue", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidIgnoreCaseTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valueIgnoreCase = (Boolean)invalidizeTestValue("Boolean", valueIgnoreCase, "replaceSlideTextOnline", "ignoreCase");
            initialize("replaceSlideTextOnline", "ignoreCase", valueIgnoreCase);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "ignoreCase", "replaceSlideTextOnline", valueIgnoreCase);
        }
        if (needAssertResponse) {
            assertResponse("ignoreCase", "replaceSlideTextOnline");
        }
    }
    /**
     * Replace slide text with a new value.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceSlideTextOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "replaceSlideTextOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "replaceSlideTextOnline", "slideIndex");
        String valueOldValue = (String)getTestValue("String", "replaceSlideTextOnline", "oldValue");
        String valueNewValue = (String)getTestValue("String", "replaceSlideTextOnline", "newValue");
        Boolean valueIgnoreCase = (Boolean)getTestValue("Boolean", "replaceSlideTextOnline", "ignoreCase");
        String valuePassword = (String)getTestValue("String", "replaceSlideTextOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "replaceSlideTextOnline", "password");
            initialize("replaceSlideTextOnline", "password", valuePassword);
            File response = api.replaceSlideTextOnline(valueDocument, valueSlideIndex, valueOldValue, valueNewValue, valueIgnoreCase, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "replaceSlideTextOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "replaceSlideTextOnline");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeTest() throws ApiException, Exception {
        initialize("saveNotesSlideShape", null, null);
        ;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "saveNotesSlideShape", "name");
            initialize("saveNotesSlideShape", "name", valueName);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "saveNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveNotesSlideShape", "slideIndex");
            initialize("saveNotesSlideShape", "slideIndex", valueSlideIndex);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "saveNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "saveNotesSlideShape", "shapeIndex");
            initialize("saveNotesSlideShape", "shapeIndex", valueShapeIndex);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "saveNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "saveNotesSlideShape", "format");
            initialize("saveNotesSlideShape", "format", valueFormat);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "saveNotesSlideShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveNotesSlideShape", "outPath");
            initialize("saveNotesSlideShape", "outPath", valueOutPath);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "saveNotesSlideShape", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "saveNotesSlideShape", "options");
            initialize("saveNotesSlideShape", "options", valueOptions);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "saveNotesSlideShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "saveNotesSlideShape", "scaleX");
            initialize("saveNotesSlideShape", "scaleX", valueScaleX);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "saveNotesSlideShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "saveNotesSlideShape", "scaleY");
            initialize("saveNotesSlideShape", "scaleY", valueScaleY);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "saveNotesSlideShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "saveNotesSlideShape", "bounds");
            initialize("saveNotesSlideShape", "bounds", valueBounds);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "saveNotesSlideShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveNotesSlideShape", "password");
            initialize("saveNotesSlideShape", "password", valuePassword);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "saveNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "saveNotesSlideShape", "folder");
            initialize("saveNotesSlideShape", "folder", valueFolder);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "saveNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveNotesSlideShape", "storage");
            initialize("saveNotesSlideShape", "storage", valueStorage);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "saveNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "saveNotesSlideShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveNotesSlideShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveNotesSlideShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveNotesSlideShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveNotesSlideShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveNotesSlideShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveNotesSlideShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveNotesSlideShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "saveNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveNotesSlideShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveNotesSlideShape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveNotesSlideShape", "fontsFolder");
            initialize("saveNotesSlideShape", "fontsFolder", valueFontsFolder);
            api.saveNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "saveNotesSlideShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "saveNotesSlideShape");
        }
    }
    
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationTest() throws ApiException, Exception {
        initialize("savePresentation", null, null);
        ;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
    }

    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "savePresentation", "name");
            initialize("savePresentation", "name", valueName);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "savePresentation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueFormat = (ExportFormat)invalidizeTestValue("ExportFormat", valueFormat, "savePresentation", "format");
            initialize("savePresentation", "format", valueFormat);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "savePresentation", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "savePresentation", "outPath");
            initialize("savePresentation", "outPath", valueOutPath);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "savePresentation", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "savePresentation", "options");
            initialize("savePresentation", "options", valueOptions);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "savePresentation", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "savePresentation", "password");
            initialize("savePresentation", "password", valuePassword);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "savePresentation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "savePresentation", "folder");
            initialize("savePresentation", "folder", valueFolder);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "savePresentation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "savePresentation", "storage");
            initialize("savePresentation", "storage", valueStorage);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "savePresentation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "savePresentation", "fontsFolder");
            initialize("savePresentation", "fontsFolder", valueFontsFolder);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "savePresentation", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "savePresentation");
        }
    }
    /**
     * Save a presentation to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savePresentationInvalidSlidesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "savePresentation", "name");
        ExportFormat valueFormat = (ExportFormat)getTestValue("ExportFormat", "savePresentation", "format");
        String valueOutPath = (String)getTestValue("String", "savePresentation", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "savePresentation", "options");
        String valuePassword = (String)getTestValue("String", "savePresentation", "password");
        String valueFolder = (String)getTestValue("String", "savePresentation", "folder");
        String valueStorage = (String)getTestValue("String", "savePresentation", "storage");
        String valueFontsFolder = (String)getTestValue("String", "savePresentation", "fontsFolder");
        List<Integer> valueSlides = (List<Integer>)getTestValue("List<Integer>", "savePresentation", "slides");
        try {
            valueSlides = (List<Integer>)invalidizeTestValue("List<Integer>", valueSlides, "savePresentation", "slides");
            initialize("savePresentation", "slides", valueSlides);
            api.savePresentation(valueName, valueFormat, valueOutPath, valueOptions, valuePassword, valueFolder, valueStorage, valueFontsFolder, valueSlides);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slides", "savePresentation", valueSlides);
        }
        if (needAssertResponse) {
            assertResponse("slides", "savePresentation");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeTest() throws ApiException, Exception {
        initialize("saveShape", null, null);
        ;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "saveShape", "name");
            initialize("saveShape", "name", valueName);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "saveShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveShape", "slideIndex");
            initialize("saveShape", "slideIndex", valueSlideIndex);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "saveShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "saveShape", "shapeIndex");
            initialize("saveShape", "shapeIndex", valueShapeIndex);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "saveShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "saveShape", "format");
            initialize("saveShape", "format", valueFormat);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "saveShape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveShape", "outPath");
            initialize("saveShape", "outPath", valueOutPath);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "saveShape", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "saveShape", "options");
            initialize("saveShape", "options", valueOptions);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "saveShape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "saveShape", "scaleX");
            initialize("saveShape", "scaleX", valueScaleX);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "saveShape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "saveShape", "scaleY");
            initialize("saveShape", "scaleY", valueScaleY);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "saveShape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "saveShape", "bounds");
            initialize("saveShape", "bounds", valueBounds);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "saveShape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveShape", "password");
            initialize("saveShape", "password", valuePassword);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "saveShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "saveShape", "folder");
            initialize("saveShape", "folder", valueFolder);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "saveShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveShape", "storage");
            initialize("saveShape", "storage", valueStorage);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "saveShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "saveShape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShape", "format");
        String valueOutPath = (String)getTestValue("String", "saveShape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveShape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveShape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShape", "password");
        String valueFolder = (String)getTestValue("String", "saveShape", "folder");
        String valueStorage = (String)getTestValue("String", "saveShape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveShape", "fontsFolder");
            initialize("saveShape", "fontsFolder", valueFontsFolder);
            api.saveShape(valueName, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "saveShape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "saveShape");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineTest() throws ApiException, Exception {
        initialize("saveShapeOnline", null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "saveShapeOnline", "document");
            initialize("saveShapeOnline", "document", valueDocument);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "saveShapeOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveShapeOnline", "slideIndex");
            initialize("saveShapeOnline", "slideIndex", valueSlideIndex);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "saveShapeOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "saveShapeOnline", "shapeIndex");
            initialize("saveShapeOnline", "shapeIndex", valueShapeIndex);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "saveShapeOnline", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "saveShapeOnline", "format");
            initialize("saveShapeOnline", "format", valueFormat);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "saveShapeOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveShapeOnline", "outPath");
            initialize("saveShapeOnline", "outPath", valueOutPath);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "saveShapeOnline", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "saveShapeOnline", "scaleX");
            initialize("saveShapeOnline", "scaleX", valueScaleX);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "saveShapeOnline", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "saveShapeOnline", "scaleY");
            initialize("saveShapeOnline", "scaleY", valueScaleY);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "saveShapeOnline", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "saveShapeOnline", "bounds");
            initialize("saveShapeOnline", "bounds", valueBounds);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "saveShapeOnline", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveShapeOnline", "password");
            initialize("saveShapeOnline", "password", valuePassword);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "saveShapeOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveShapeOnline", "storage");
            initialize("saveShapeOnline", "storage", valueStorage);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "saveShapeOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "saveShapeOnline");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveShapeOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveShapeOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveShapeOnline", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveShapeOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveShapeOnline", "outPath");
        Double valueScaleX = (Double)getTestValue("Double", "saveShapeOnline", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveShapeOnline", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveShapeOnline", "bounds");
        String valuePassword = (String)getTestValue("String", "saveShapeOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveShapeOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveShapeOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveShapeOnline", "fontsFolder");
            initialize("saveShapeOnline", "fontsFolder", valueFontsFolder);
            api.saveShapeOnline(valueDocument, valueSlideIndex, valueShapeIndex, valueFormat, valueOutPath, valueScaleX, valueScaleY, valueBounds, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "saveShapeOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "saveShapeOnline");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideTest() throws ApiException, Exception {
        initialize("saveSlide", null, null);
        ;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "saveSlide", "name");
            initialize("saveSlide", "name", valueName);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "saveSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveSlide", "slideIndex");
            initialize("saveSlide", "slideIndex", valueSlideIndex);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "saveSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "saveSlide", "format");
            initialize("saveSlide", "format", valueFormat);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "saveSlide", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveSlide", "outPath");
            initialize("saveSlide", "outPath", valueOutPath);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "saveSlide", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "saveSlide", "options");
            initialize("saveSlide", "options", valueOptions);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "saveSlide", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "saveSlide", "width");
            initialize("saveSlide", "width", valueWidth);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "saveSlide", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "saveSlide", "height");
            initialize("saveSlide", "height", valueHeight);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "saveSlide", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveSlide", "password");
            initialize("saveSlide", "password", valuePassword);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "saveSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "saveSlide", "folder");
            initialize("saveSlide", "folder", valueFolder);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "saveSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveSlide", "storage");
            initialize("saveSlide", "storage", valueStorage);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "saveSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "saveSlide");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlide", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlide", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlide", "outPath");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "saveSlide", "options");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlide", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlide", "height");
        String valuePassword = (String)getTestValue("String", "saveSlide", "password");
        String valueFolder = (String)getTestValue("String", "saveSlide", "folder");
        String valueStorage = (String)getTestValue("String", "saveSlide", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlide", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveSlide", "fontsFolder");
            initialize("saveSlide", "fontsFolder", valueFontsFolder);
            api.saveSlide(valueName, valueSlideIndex, valueFormat, valueOutPath, valueOptions, valueWidth, valueHeight, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "saveSlide", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "saveSlide");
        }
    }
    
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineTest() throws ApiException, Exception {
        initialize("saveSlideOnline", null, null);
        ;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
    }

    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "saveSlideOnline", "document");
            initialize("saveSlideOnline", "document", valueDocument);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "saveSlideOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveSlideOnline", "slideIndex");
            initialize("saveSlideOnline", "slideIndex", valueSlideIndex);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "saveSlideOnline", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "saveSlideOnline", "format");
            initialize("saveSlideOnline", "format", valueFormat);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "saveSlideOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveSlideOnline", "outPath");
            initialize("saveSlideOnline", "outPath", valueOutPath);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "saveSlideOnline", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "saveSlideOnline", "width");
            initialize("saveSlideOnline", "width", valueWidth);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "saveSlideOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "saveSlideOnline", "height");
            initialize("saveSlideOnline", "height", valueHeight);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "saveSlideOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveSlideOnline", "password");
            initialize("saveSlideOnline", "password", valuePassword);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "saveSlideOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveSlideOnline", "storage");
            initialize("saveSlideOnline", "storage", valueStorage);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "saveSlideOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "saveSlideOnline");
        }
    }
    /**
     * Save a slide to a specified format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSlideOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "saveSlideOnline", "document");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSlideOnline", "slideIndex");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "saveSlideOnline", "format");
        String valueOutPath = (String)getTestValue("String", "saveSlideOnline", "outPath");
        Integer valueWidth = (Integer)getTestValue("Integer", "saveSlideOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "saveSlideOnline", "height");
        String valuePassword = (String)getTestValue("String", "saveSlideOnline", "password");
        String valueStorage = (String)getTestValue("String", "saveSlideOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSlideOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveSlideOnline", "fontsFolder");
            initialize("saveSlideOnline", "fontsFolder", valueFontsFolder);
            api.saveSlideOnline(valueDocument, valueSlideIndex, valueFormat, valueOutPath, valueWidth, valueHeight, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "saveSlideOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "saveSlideOnline");
        }
    }
    
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeTest() throws ApiException, Exception {
        initialize("saveSubshape", null, null);
        ;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
    }

    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "saveSubshape", "name");
            initialize("saveSubshape", "name", valueName);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "saveSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "saveSubshape", "slideIndex");
            initialize("saveSubshape", "slideIndex", valueSlideIndex);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "saveSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "saveSubshape", "path");
            initialize("saveSubshape", "path", valuePath);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "saveSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "saveSubshape", "shapeIndex");
            initialize("saveSubshape", "shapeIndex", valueShapeIndex);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "saveSubshape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueFormat = (ShapeExportFormat)invalidizeTestValue("ShapeExportFormat", valueFormat, "saveSubshape", "format");
            initialize("saveSubshape", "format", valueFormat);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "saveSubshape", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidOutPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueOutPath = (String)invalidizeTestValue("String", valueOutPath, "saveSubshape", "outPath");
            initialize("saveSubshape", "outPath", valueOutPath);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "outPath", "saveSubshape", valueOutPath);
        }
        if (needAssertResponse) {
            assertResponse("outPath", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueOptions = (IShapeExportOptions)invalidizeTestValue("IShapeExportOptions", valueOptions, "saveSubshape", "options");
            initialize("saveSubshape", "options", valueOptions);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "saveSubshape", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidScaleXTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueScaleX = (Double)invalidizeTestValue("Double", valueScaleX, "saveSubshape", "scaleX");
            initialize("saveSubshape", "scaleX", valueScaleX);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleX", "saveSubshape", valueScaleX);
        }
        if (needAssertResponse) {
            assertResponse("scaleX", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidScaleYTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueScaleY = (Double)invalidizeTestValue("Double", valueScaleY, "saveSubshape", "scaleY");
            initialize("saveSubshape", "scaleY", valueScaleY);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "scaleY", "saveSubshape", valueScaleY);
        }
        if (needAssertResponse) {
            assertResponse("scaleY", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidBoundsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueBounds = (ShapeThumbnailBounds)invalidizeTestValue("ShapeThumbnailBounds", valueBounds, "saveSubshape", "bounds");
            initialize("saveSubshape", "bounds", valueBounds);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "bounds", "saveSubshape", valueBounds);
        }
        if (needAssertResponse) {
            assertResponse("bounds", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "saveSubshape", "password");
            initialize("saveSubshape", "password", valuePassword);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "saveSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "saveSubshape", "folder");
            initialize("saveSubshape", "folder", valueFolder);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "saveSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "saveSubshape", "storage");
            initialize("saveSubshape", "storage", valueStorage);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "saveSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "saveSubshape");
        }
    }
    /**
     * Render shape to specified picture format.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSubshapeInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "saveSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "saveSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "saveSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "saveSubshape", "shapeIndex");
        ShapeExportFormat valueFormat = (ShapeExportFormat)getTestValue("ShapeExportFormat", "saveSubshape", "format");
        String valueOutPath = (String)getTestValue("String", "saveSubshape", "outPath");
        IShapeExportOptions valueOptions = (IShapeExportOptions)getTestValue("IShapeExportOptions", "saveSubshape", "options");
        Double valueScaleX = (Double)getTestValue("Double", "saveSubshape", "scaleX");
        Double valueScaleY = (Double)getTestValue("Double", "saveSubshape", "scaleY");
        ShapeThumbnailBounds valueBounds = (ShapeThumbnailBounds)getTestValue("ShapeThumbnailBounds", "saveSubshape", "bounds");
        String valuePassword = (String)getTestValue("String", "saveSubshape", "password");
        String valueFolder = (String)getTestValue("String", "saveSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "saveSubshape", "storage");
        String valueFontsFolder = (String)getTestValue("String", "saveSubshape", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "saveSubshape", "fontsFolder");
            initialize("saveSubshape", "fontsFolder", valueFontsFolder);
            api.saveSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueFormat, valueOutPath, valueOptions, valueScaleX, valueScaleY, valueBounds, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "saveSubshape", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "saveSubshape");
        }
    }
    
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationTest() throws ApiException, Exception {
        initialize("setAnimation", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setAnimation", "name");
            initialize("setAnimation", "name", valueName);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setAnimation", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setAnimation", "slideIndex");
            initialize("setAnimation", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "setAnimation", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidAnimationTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueAnimation = (SlideAnimation)invalidizeTestValue("SlideAnimation", valueAnimation, "setAnimation", "animation");
            initialize("setAnimation", "animation", valueAnimation);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "animation", "setAnimation", valueAnimation);
        }
        if (needAssertResponse) {
            assertResponse("animation", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setAnimation", "password");
            initialize("setAnimation", "password", valuePassword);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setAnimation", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setAnimation", "folder");
            initialize("setAnimation", "folder", valueFolder);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setAnimation", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setAnimation");
        }
    }
    /**
     * Set slide animation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnimationInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setAnimation", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setAnimation", "slideIndex");
        SlideAnimation valueAnimation = (SlideAnimation)getTestValue("SlideAnimation", "setAnimation", "animation");
        String valuePassword = (String)getTestValue("String", "setAnimation", "password");
        String valueFolder = (String)getTestValue("String", "setAnimation", "folder");
        String valueStorage = (String)getTestValue("String", "setAnimation", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setAnimation", "storage");
            initialize("setAnimation", "storage", valueStorage);
            SlideAnimation response = api.setAnimation(valueName, valueSlideIndex, valueAnimation, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setAnimation", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setAnimation");
        }
    }
    
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundTest() throws ApiException, Exception {
        initialize("setBackground", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setBackground", "name");
            initialize("setBackground", "name", valueName);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setBackground", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setBackground", "slideIndex");
            initialize("setBackground", "slideIndex", valueSlideIndex);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "setBackground", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidBackgroundTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueBackground = (SlideBackground)invalidizeTestValue("SlideBackground", valueBackground, "setBackground", "background");
            initialize("setBackground", "background", valueBackground);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "background", "setBackground", valueBackground);
        }
        if (needAssertResponse) {
            assertResponse("background", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setBackground", "password");
            initialize("setBackground", "password", valuePassword);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setBackground", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setBackground", "folder");
            initialize("setBackground", "folder", valueFolder);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setBackground", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setBackground");
        }
    }
    /**
     * Set background for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackground", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackground", "slideIndex");
        SlideBackground valueBackground = (SlideBackground)getTestValue("SlideBackground", "setBackground", "background");
        String valuePassword = (String)getTestValue("String", "setBackground", "password");
        String valueFolder = (String)getTestValue("String", "setBackground", "folder");
        String valueStorage = (String)getTestValue("String", "setBackground", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setBackground", "storage");
            initialize("setBackground", "storage", valueStorage);
            SlideBackground response = api.setBackground(valueName, valueSlideIndex, valueBackground, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setBackground", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setBackground");
        }
    }
    
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorTest() throws ApiException, Exception {
        initialize("setBackgroundColor", null, null);
        SlideBackground response = null;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setBackgroundColor", "name");
            initialize("setBackgroundColor", "name", valueName);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setBackgroundColor", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setBackgroundColor", "slideIndex");
            initialize("setBackgroundColor", "slideIndex", valueSlideIndex);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "setBackgroundColor", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidColorTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueColor = (String)invalidizeTestValue("String", valueColor, "setBackgroundColor", "color");
            initialize("setBackgroundColor", "color", valueColor);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "color", "setBackgroundColor", valueColor);
        }
        if (needAssertResponse) {
            assertResponse("color", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setBackgroundColor", "password");
            initialize("setBackgroundColor", "password", valuePassword);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setBackgroundColor", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setBackgroundColor", "folder");
            initialize("setBackgroundColor", "folder", valueFolder);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setBackgroundColor", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setBackgroundColor");
        }
    }
    /**
     * Set background color for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setBackgroundColorInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setBackgroundColor", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setBackgroundColor", "slideIndex");
        String valueColor = (String)getTestValue("String", "setBackgroundColor", "color");
        String valuePassword = (String)getTestValue("String", "setBackgroundColor", "password");
        String valueFolder = (String)getTestValue("String", "setBackgroundColor", "folder");
        String valueStorage = (String)getTestValue("String", "setBackgroundColor", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setBackgroundColor", "storage");
            initialize("setBackgroundColor", "storage", valueStorage);
            SlideBackground response = api.setBackgroundColor(valueName, valueSlideIndex, valueColor, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setBackgroundColor", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setBackgroundColor");
        }
    }
    
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesTest() throws ApiException, Exception {
        initialize("setDocumentProperties", null, null);
        DocumentProperties response = null;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setDocumentProperties", "name");
            initialize("setDocumentProperties", "name", valueName);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setDocumentProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidPropertiesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueProperties = (DocumentProperties)invalidizeTestValue("DocumentProperties", valueProperties, "setDocumentProperties", "properties");
            initialize("setDocumentProperties", "properties", valueProperties);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "properties", "setDocumentProperties", valueProperties);
        }
        if (needAssertResponse) {
            assertResponse("properties", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setDocumentProperties", "password");
            initialize("setDocumentProperties", "password", valuePassword);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setDocumentProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setDocumentProperties", "folder");
            initialize("setDocumentProperties", "folder", valueFolder);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setDocumentProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setDocumentProperties");
        }
    }
    /**
     * Set document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperties", "name");
        DocumentProperties valueProperties = (DocumentProperties)getTestValue("DocumentProperties", "setDocumentProperties", "properties");
        String valuePassword = (String)getTestValue("String", "setDocumentProperties", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setDocumentProperties", "storage");
            initialize("setDocumentProperties", "storage", valueStorage);
            DocumentProperties response = api.setDocumentProperties(valueName, valueProperties, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setDocumentProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setDocumentProperties");
        }
    }
    
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyTest() throws ApiException, Exception {
        initialize("setDocumentProperty", null, null);
        DocumentProperty response = null;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setDocumentProperty", "name");
            initialize("setDocumentProperty", "name", valueName);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setDocumentProperty", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidPropertyNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valuePropertyName = (String)invalidizeTestValue("String", valuePropertyName, "setDocumentProperty", "propertyName");
            initialize("setDocumentProperty", "propertyName", valuePropertyName);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "propertyName", "setDocumentProperty", valuePropertyName);
        }
        if (needAssertResponse) {
            assertResponse("propertyName", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidPropertyTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueProperty = (DocumentProperty)invalidizeTestValue("DocumentProperty", valueProperty, "setDocumentProperty", "property");
            initialize("setDocumentProperty", "property", valueProperty);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "property", "setDocumentProperty", valueProperty);
        }
        if (needAssertResponse) {
            assertResponse("property", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setDocumentProperty", "password");
            initialize("setDocumentProperty", "password", valuePassword);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setDocumentProperty", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setDocumentProperty", "folder");
            initialize("setDocumentProperty", "folder", valueFolder);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setDocumentProperty", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setDocumentProperty");
        }
    }
    /**
     * Set document property.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDocumentPropertyInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setDocumentProperty", "name");
        String valuePropertyName = (String)getTestValue("String", "setDocumentProperty", "propertyName");
        DocumentProperty valueProperty = (DocumentProperty)getTestValue("DocumentProperty", "setDocumentProperty", "property");
        String valuePassword = (String)getTestValue("String", "setDocumentProperty", "password");
        String valueFolder = (String)getTestValue("String", "setDocumentProperty", "folder");
        String valueStorage = (String)getTestValue("String", "setDocumentProperty", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setDocumentProperty", "storage");
            initialize("setDocumentProperty", "storage", valueStorage);
            DocumentProperty response = api.setDocumentProperty(valueName, valuePropertyName, valueProperty, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setDocumentProperty", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setDocumentProperty");
        }
    }
    
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("setNotesSlideHeaderFooter", null, null);
        NotesSlideHeaderFooter response = null;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setNotesSlideHeaderFooter", "name");
            initialize("setNotesSlideHeaderFooter", "name", valueName);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setNotesSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setNotesSlideHeaderFooter", "slideIndex");
            initialize("setNotesSlideHeaderFooter", "slideIndex", valueSlideIndex);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "setNotesSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueDto = (NotesSlideHeaderFooter)invalidizeTestValue("NotesSlideHeaderFooter", valueDto, "setNotesSlideHeaderFooter", "dto");
            initialize("setNotesSlideHeaderFooter", "dto", valueDto);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "setNotesSlideHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setNotesSlideHeaderFooter", "password");
            initialize("setNotesSlideHeaderFooter", "password", valuePassword);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setNotesSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setNotesSlideHeaderFooter", "folder");
            initialize("setNotesSlideHeaderFooter", "folder", valueFolder);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setNotesSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setNotesSlideHeaderFooter");
        }
    }
    /**
     * Set header/footer the notes slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setNotesSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setNotesSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setNotesSlideHeaderFooter", "slideIndex");
        NotesSlideHeaderFooter valueDto = (NotesSlideHeaderFooter)getTestValue("NotesSlideHeaderFooter", "setNotesSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setNotesSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setNotesSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setNotesSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setNotesSlideHeaderFooter", "storage");
            initialize("setNotesSlideHeaderFooter", "storage", valueStorage);
            NotesSlideHeaderFooter response = api.setNotesSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setNotesSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setNotesSlideHeaderFooter");
        }
    }
    
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterTest() throws ApiException, Exception {
        initialize("setPresentationHeaderFooter", null, null);
        Document response = null;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setPresentationHeaderFooter", "name");
            initialize("setPresentationHeaderFooter", "name", valueName);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setPresentationHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueDto = (HeaderFooter)invalidizeTestValue("HeaderFooter", valueDto, "setPresentationHeaderFooter", "dto");
            initialize("setPresentationHeaderFooter", "dto", valueDto);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "setPresentationHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setPresentationHeaderFooter", "password");
            initialize("setPresentationHeaderFooter", "password", valuePassword);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setPresentationHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setPresentationHeaderFooter", "folder");
            initialize("setPresentationHeaderFooter", "folder", valueFolder);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setPresentationHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setPresentationHeaderFooter");
        }
    }
    /**
     * Set footers for all slides in a presentation.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPresentationHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setPresentationHeaderFooter", "name");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setPresentationHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setPresentationHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setPresentationHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setPresentationHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setPresentationHeaderFooter", "storage");
            initialize("setPresentationHeaderFooter", "storage", valueStorage);
            Document response = api.setPresentationHeaderFooter(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setPresentationHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setPresentationHeaderFooter");
        }
    }
    
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionTest() throws ApiException, Exception {
        initialize("setProtection", null, null);
        ProtectionProperties response = null;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setProtection", "name");
            initialize("setProtection", "name", valueName);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setProtection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueDto = (ProtectionProperties)invalidizeTestValue("ProtectionProperties", valueDto, "setProtection", "dto");
            initialize("setProtection", "dto", valueDto);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "setProtection", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setProtection", "password");
            initialize("setProtection", "password", valuePassword);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setProtection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setProtection", "folder");
            initialize("setProtection", "folder", valueFolder);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setProtection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setProtection");
        }
    }
    /**
     * Updates presentation protection properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setProtection", "name");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtection", "dto");
        String valuePassword = (String)getTestValue("String", "setProtection", "password");
        String valueFolder = (String)getTestValue("String", "setProtection", "folder");
        String valueStorage = (String)getTestValue("String", "setProtection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setProtection", "storage");
            initialize("setProtection", "storage", valueStorage);
            ProtectionProperties response = api.setProtection(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setProtection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setProtection");
        }
    }
    
    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineTest() throws ApiException, Exception {
        initialize("setProtectionOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
        assertTrue(response.isFile());
    }

    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "setProtectionOnline", "document");
            initialize("setProtectionOnline", "document", valueDocument);
            File response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "setProtectionOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "setProtectionOnline");
        }
    }
    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        try {
            valueDto = (ProtectionProperties)invalidizeTestValue("ProtectionProperties", valueDto, "setProtectionOnline", "dto");
            initialize("setProtectionOnline", "dto", valueDto);
            File response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "setProtectionOnline", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "setProtectionOnline");
        }
    }
    /**
     * Sets presentation protection options. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setProtectionOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "setProtectionOnline", "document");
        ProtectionProperties valueDto = (ProtectionProperties)getTestValue("ProtectionProperties", "setProtectionOnline", "dto");
        String valuePassword = (String)getTestValue("String", "setProtectionOnline", "password");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setProtectionOnline", "password");
            initialize("setProtectionOnline", "password", valuePassword);
            File response = api.setProtectionOnline(valueDocument, valueDto, valuePassword);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setProtectionOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setProtectionOnline");
        }
    }
    
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsTest() throws ApiException, Exception {
        initialize("setSections", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSections", "name");
            initialize("setSections", "name", valueName);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setSections", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidSectionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueSections = (Sections)invalidizeTestValue("Sections", valueSections, "setSections", "sections");
            initialize("setSections", "sections", valueSections);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sections", "setSections", valueSections);
        }
        if (needAssertResponse) {
            assertResponse("sections", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSections", "password");
            initialize("setSections", "password", valuePassword);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setSections", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSections", "folder");
            initialize("setSections", "folder", valueFolder);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setSections", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setSections");
        }
    }
    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSectionsInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSections", "name");
        Sections valueSections = (Sections)getTestValue("Sections", "setSections", "sections");
        String valuePassword = (String)getTestValue("String", "setSections", "password");
        String valueFolder = (String)getTestValue("String", "setSections", "folder");
        String valueStorage = (String)getTestValue("String", "setSections", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSections", "storage");
            initialize("setSections", "storage", valueStorage);
            Sections response = api.setSections(valueName, valueSections, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setSections", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setSections");
        }
    }
    
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterTest() throws ApiException, Exception {
        initialize("setSlideHeaderFooter", null, null);
        HeaderFooter response = null;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSlideHeaderFooter", "name");
            initialize("setSlideHeaderFooter", "name", valueName);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setSlideHeaderFooter", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "setSlideHeaderFooter", "slideIndex");
            initialize("setSlideHeaderFooter", "slideIndex", valueSlideIndex);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "setSlideHeaderFooter", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueDto = (HeaderFooter)invalidizeTestValue("HeaderFooter", valueDto, "setSlideHeaderFooter", "dto");
            initialize("setSlideHeaderFooter", "dto", valueDto);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "setSlideHeaderFooter", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSlideHeaderFooter", "password");
            initialize("setSlideHeaderFooter", "password", valuePassword);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setSlideHeaderFooter", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSlideHeaderFooter", "folder");
            initialize("setSlideHeaderFooter", "folder", valueFolder);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setSlideHeaderFooter", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setSlideHeaderFooter");
        }
    }
    /**
     * Set footer the slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlideHeaderFooterInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideHeaderFooter", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "setSlideHeaderFooter", "slideIndex");
        HeaderFooter valueDto = (HeaderFooter)getTestValue("HeaderFooter", "setSlideHeaderFooter", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideHeaderFooter", "password");
        String valueFolder = (String)getTestValue("String", "setSlideHeaderFooter", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideHeaderFooter", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSlideHeaderFooter", "storage");
            initialize("setSlideHeaderFooter", "storage", valueStorage);
            HeaderFooter response = api.setSlideHeaderFooter(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setSlideHeaderFooter", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setSlideHeaderFooter");
        }
    }
    
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesTest() throws ApiException, Exception {
        initialize("setSlideProperties", null, null);
        SlideProperties response = null;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setSlideProperties", "name");
            initialize("setSlideProperties", "name", valueName);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setSlideProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueDto = (SlideProperties)invalidizeTestValue("SlideProperties", valueDto, "setSlideProperties", "dto");
            initialize("setSlideProperties", "dto", valueDto);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "setSlideProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setSlideProperties", "password");
            initialize("setSlideProperties", "password", valuePassword);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setSlideProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setSlideProperties", "folder");
            initialize("setSlideProperties", "folder", valueFolder);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setSlideProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setSlideProperties");
        }
    }
    /**
     * Update presentation slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setSlidePropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setSlideProperties", "name");
        SlideProperties valueDto = (SlideProperties)getTestValue("SlideProperties", "setSlideProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setSlideProperties", "password");
        String valueFolder = (String)getTestValue("String", "setSlideProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setSlideProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setSlideProperties", "storage");
            initialize("setSlideProperties", "storage", valueStorage);
            SlideProperties response = api.setSlideProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setSlideProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setSlideProperties");
        }
    }
    
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesTest() throws ApiException, Exception {
        initialize("setViewProperties", null, null);
        ViewProperties response = null;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "setViewProperties", "name");
            initialize("setViewProperties", "name", valueName);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "setViewProperties", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "setViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueDto = (ViewProperties)invalidizeTestValue("ViewProperties", valueDto, "setViewProperties", "dto");
            initialize("setViewProperties", "dto", valueDto);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "setViewProperties", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "setViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "setViewProperties", "password");
            initialize("setViewProperties", "password", valuePassword);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "setViewProperties", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "setViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "setViewProperties", "folder");
            initialize("setViewProperties", "folder", valueFolder);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "setViewProperties", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "setViewProperties");
        }
    }
    /**
     * Update presentation document properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setViewPropertiesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "setViewProperties", "name");
        ViewProperties valueDto = (ViewProperties)getTestValue("ViewProperties", "setViewProperties", "dto");
        String valuePassword = (String)getTestValue("String", "setViewProperties", "password");
        String valueFolder = (String)getTestValue("String", "setViewProperties", "folder");
        String valueStorage = (String)getTestValue("String", "setViewProperties", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "setViewProperties", "storage");
            initialize("setViewProperties", "storage", valueStorage);
            ViewProperties response = api.setViewProperties(valueName, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "setViewProperties", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "setViewProperties");
        }
    }
    
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitTest() throws ApiException, Exception {
        initialize("split", null, null);
        SplitDocumentResult response = null;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "split", "name");
            initialize("split", "name", valueName);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "split", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidOptionsTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueOptions = (ExportOptions)invalidizeTestValue("ExportOptions", valueOptions, "split", "options");
            initialize("split", "options", valueOptions);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "options", "split", valueOptions);
        }
        if (needAssertResponse) {
            assertResponse("options", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "split", "format");
            initialize("split", "format", valueFormat);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "split", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "split", "width");
            initialize("split", "width", valueWidth);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "split", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "split", "height");
            initialize("split", "height", valueHeight);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "split", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "split", "from");
            initialize("split", "from", valueFrom);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "from", "split", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("from", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "split", "to");
            initialize("split", "to", valueTo);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "to", "split", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("to", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidDestFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueDestFolder = (String)invalidizeTestValue("String", valueDestFolder, "split", "destFolder");
            initialize("split", "destFolder", valueDestFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destFolder", "split", valueDestFolder);
        }
        if (needAssertResponse) {
            assertResponse("destFolder", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "split", "password");
            initialize("split", "password", valuePassword);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "split", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "split", "folder");
            initialize("split", "folder", valueFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "split", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "split", "storage");
            initialize("split", "storage", valueStorage);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "split", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "split");
        }
    }
    /**
     * Splitting presentations. Create one image per slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "split", "name");
        ExportOptions valueOptions = (ExportOptions)getTestValue("ExportOptions", "split", "options");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "split", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "split", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "split", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "split", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "split", "to");
        String valueDestFolder = (String)getTestValue("String", "split", "destFolder");
        String valuePassword = (String)getTestValue("String", "split", "password");
        String valueFolder = (String)getTestValue("String", "split", "folder");
        String valueStorage = (String)getTestValue("String", "split", "storage");
        String valueFontsFolder = (String)getTestValue("String", "split", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "split", "fontsFolder");
            initialize("split", "fontsFolder", valueFontsFolder);
            SplitDocumentResult response = api.split(valueName, valueOptions, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valueDestFolder, valuePassword, valueFolder, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "split", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "split");
        }
    }
    
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineTest() throws ApiException, Exception {
        initialize("splitAndSaveOnline", null, null);
        SplitDocumentResult response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
        assertNotNull(response);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "splitAndSaveOnline", "document");
            initialize("splitAndSaveOnline", "document", valueDocument);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "splitAndSaveOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "splitAndSaveOnline", "format");
            initialize("splitAndSaveOnline", "format", valueFormat);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "splitAndSaveOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidDestFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueDestFolder = (String)invalidizeTestValue("String", valueDestFolder, "splitAndSaveOnline", "destFolder");
            initialize("splitAndSaveOnline", "destFolder", valueDestFolder);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "destFolder", "splitAndSaveOnline", valueDestFolder);
        }
        if (needAssertResponse) {
            assertResponse("destFolder", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "splitAndSaveOnline", "width");
            initialize("splitAndSaveOnline", "width", valueWidth);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "splitAndSaveOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "splitAndSaveOnline", "height");
            initialize("splitAndSaveOnline", "height", valueHeight);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "splitAndSaveOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "splitAndSaveOnline", "from");
            initialize("splitAndSaveOnline", "from", valueFrom);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "from", "splitAndSaveOnline", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("from", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "splitAndSaveOnline", "to");
            initialize("splitAndSaveOnline", "to", valueTo);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "to", "splitAndSaveOnline", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("to", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "splitAndSaveOnline", "password");
            initialize("splitAndSaveOnline", "password", valuePassword);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "splitAndSaveOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "splitAndSaveOnline", "storage");
            initialize("splitAndSaveOnline", "storage", valueStorage);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "splitAndSaveOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "splitAndSaveOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitAndSaveOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitAndSaveOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitAndSaveOnline", "format");
        String valueDestFolder = (String)getTestValue("String", "splitAndSaveOnline", "destFolder");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitAndSaveOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitAndSaveOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitAndSaveOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitAndSaveOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitAndSaveOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitAndSaveOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitAndSaveOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "splitAndSaveOnline", "fontsFolder");
            initialize("splitAndSaveOnline", "fontsFolder", valueFontsFolder);
            SplitDocumentResult response = api.splitAndSaveOnline(valueDocument, valueFormat, valueDestFolder, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "splitAndSaveOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "splitAndSaveOnline");
        }
    }
    
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineTest() throws ApiException, Exception {
        initialize("splitOnline", null, null);
        File response = null;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
        assertTrue(response.isFile());
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidDocumentTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueDocument = (byte[])invalidizeTestValue("byte[]", valueDocument, "splitOnline", "document");
            initialize("splitOnline", "document", valueDocument);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "document", "splitOnline", valueDocument);
        }
        if (needAssertResponse) {
            assertResponse("document", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidFormatTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueFormat = (SlideExportFormat)invalidizeTestValue("SlideExportFormat", valueFormat, "splitOnline", "format");
            initialize("splitOnline", "format", valueFormat);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "format", "splitOnline", valueFormat);
        }
        if (needAssertResponse) {
            assertResponse("format", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidWidthTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueWidth = (Integer)invalidizeTestValue("Integer", valueWidth, "splitOnline", "width");
            initialize("splitOnline", "width", valueWidth);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "width", "splitOnline", valueWidth);
        }
        if (needAssertResponse) {
            assertResponse("width", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidHeightTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueHeight = (Integer)invalidizeTestValue("Integer", valueHeight, "splitOnline", "height");
            initialize("splitOnline", "height", valueHeight);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "height", "splitOnline", valueHeight);
        }
        if (needAssertResponse) {
            assertResponse("height", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidFromTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueFrom = (Integer)invalidizeTestValue("Integer", valueFrom, "splitOnline", "from");
            initialize("splitOnline", "from", valueFrom);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "from", "splitOnline", valueFrom);
        }
        if (needAssertResponse) {
            assertResponse("from", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidToTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueTo = (Integer)invalidizeTestValue("Integer", valueTo, "splitOnline", "to");
            initialize("splitOnline", "to", valueTo);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "to", "splitOnline", valueTo);
        }
        if (needAssertResponse) {
            assertResponse("to", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "splitOnline", "password");
            initialize("splitOnline", "password", valuePassword);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "splitOnline", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "splitOnline", "storage");
            initialize("splitOnline", "storage", valueStorage);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "splitOnline", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "splitOnline");
        }
    }
    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void splitOnlineInvalidFontsFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        byte[] valueDocument = (byte[])getTestValue("byte[]", "splitOnline", "document");
        SlideExportFormat valueFormat = (SlideExportFormat)getTestValue("SlideExportFormat", "splitOnline", "format");
        Integer valueWidth = (Integer)getTestValue("Integer", "splitOnline", "width");
        Integer valueHeight = (Integer)getTestValue("Integer", "splitOnline", "height");
        Integer valueFrom = (Integer)getTestValue("Integer", "splitOnline", "from");
        Integer valueTo = (Integer)getTestValue("Integer", "splitOnline", "to");
        String valuePassword = (String)getTestValue("String", "splitOnline", "password");
        String valueStorage = (String)getTestValue("String", "splitOnline", "storage");
        String valueFontsFolder = (String)getTestValue("String", "splitOnline", "fontsFolder");
        try {
            valueFontsFolder = (String)invalidizeTestValue("String", valueFontsFolder, "splitOnline", "fontsFolder");
            initialize("splitOnline", "fontsFolder", valueFontsFolder);
            File response = api.splitOnline(valueDocument, valueFormat, valueWidth, valueHeight, valueFrom, valueTo, valuePassword, valueStorage, valueFontsFolder);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "fontsFolder", "splitOnline", valueFontsFolder);
        }
        if (needAssertResponse) {
            assertResponse("fontsFolder", "splitOnline");
        }
    }
    
    /**
     * Check if storage exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storageExistsTest() throws ApiException, Exception {
        initialize("storageExists", null, null);
        StorageExist response = null;
        String valueStorageName = (String)getTestValue("String", "storageExists", "storageName");
        response = api.storageExists(valueStorageName);
        assertNotNull(response);
    }

    /**
     * Check if storage exists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void storageExistsInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueStorageName = (String)getTestValue("String", "storageExists", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "storageExists", "storageName");
            initialize("storageExists", "storageName", valueStorageName);
            StorageExist response = api.storageExists(valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "storageExists", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "storageExists");
        }
    }
    
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectTest() throws ApiException, Exception {
        initialize("updateAnimationEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateAnimationEffect", "name");
            initialize("updateAnimationEffect", "name", valueName);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateAnimationEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateAnimationEffect", "slideIndex");
            initialize("updateAnimationEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateAnimationEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "updateAnimationEffect", "effectIndex");
            initialize("updateAnimationEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "updateAnimationEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "updateAnimationEffect", "effect");
            initialize("updateAnimationEffect", "effect", valueEffect);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "updateAnimationEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateAnimationEffect", "password");
            initialize("updateAnimationEffect", "password", valuePassword);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateAnimationEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateAnimationEffect", "folder");
            initialize("updateAnimationEffect", "folder", valueFolder);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateAnimationEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateAnimationEffect");
        }
    }
    /**
     * Modify an animation effect for a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "slideIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateAnimationEffect", "storage");
            initialize("updateAnimationEffect", "storage", valueStorage);
            SlideAnimation response = api.updateAnimationEffect(valueName, valueSlideIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateAnimationEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateAnimationEffect");
        }
    }
    
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectTest() throws ApiException, Exception {
        initialize("updateAnimationInteractiveSequenceEffect", null, null);
        SlideAnimation response = null;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateAnimationInteractiveSequenceEffect", "name");
            initialize("updateAnimationInteractiveSequenceEffect", "name", valueName);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateAnimationInteractiveSequenceEffect", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateAnimationInteractiveSequenceEffect", "slideIndex");
            initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", valueSlideIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateAnimationInteractiveSequenceEffect", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidSequenceIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueSequenceIndex = (Integer)invalidizeTestValue("Integer", valueSequenceIndex, "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
            initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", valueSequenceIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sequenceIndex", "updateAnimationInteractiveSequenceEffect", valueSequenceIndex);
        }
        if (needAssertResponse) {
            assertResponse("sequenceIndex", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidEffectIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffectIndex = (Integer)invalidizeTestValue("Integer", valueEffectIndex, "updateAnimationInteractiveSequenceEffect", "effectIndex");
            initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", valueEffectIndex);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effectIndex", "updateAnimationInteractiveSequenceEffect", valueEffectIndex);
        }
        if (needAssertResponse) {
            assertResponse("effectIndex", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidEffectTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueEffect = (Effect)invalidizeTestValue("Effect", valueEffect, "updateAnimationInteractiveSequenceEffect", "effect");
            initialize("updateAnimationInteractiveSequenceEffect", "effect", valueEffect);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "effect", "updateAnimationInteractiveSequenceEffect", valueEffect);
        }
        if (needAssertResponse) {
            assertResponse("effect", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateAnimationInteractiveSequenceEffect", "password");
            initialize("updateAnimationInteractiveSequenceEffect", "password", valuePassword);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateAnimationInteractiveSequenceEffect", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateAnimationInteractiveSequenceEffect", "folder");
            initialize("updateAnimationInteractiveSequenceEffect", "folder", valueFolder);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateAnimationInteractiveSequenceEffect", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateAnimationInteractiveSequenceEffect");
        }
    }
    /**
     * Modify an animation effect for a slide interactive sequence.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnimationInteractiveSequenceEffectInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "slideIndex");
        Integer valueSequenceIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "sequenceIndex");
        Integer valueEffectIndex = (Integer)getTestValue("Integer", "updateAnimationInteractiveSequenceEffect", "effectIndex");
        Effect valueEffect = (Effect)getTestValue("Effect", "updateAnimationInteractiveSequenceEffect", "effect");
        String valuePassword = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "password");
        String valueFolder = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "folder");
        String valueStorage = (String)getTestValue("String", "updateAnimationInteractiveSequenceEffect", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateAnimationInteractiveSequenceEffect", "storage");
            initialize("updateAnimationInteractiveSequenceEffect", "storage", valueStorage);
            SlideAnimation response = api.updateAnimationInteractiveSequenceEffect(valueName, valueSlideIndex, valueSequenceIndex, valueEffectIndex, valueEffect, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateAnimationInteractiveSequenceEffect", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateAnimationInteractiveSequenceEffect");
        }
    }
    
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryTest() throws ApiException, Exception {
        initialize("updateChartCategory", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateChartCategory", "name");
            initialize("updateChartCategory", "name", valueName);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateChartCategory", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateChartCategory", "slideIndex");
            initialize("updateChartCategory", "slideIndex", valueSlideIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateChartCategory", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateChartCategory", "shapeIndex");
            initialize("updateChartCategory", "shapeIndex", valueShapeIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateChartCategory", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidCategoryIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueCategoryIndex = (Integer)invalidizeTestValue("Integer", valueCategoryIndex, "updateChartCategory", "categoryIndex");
            initialize("updateChartCategory", "categoryIndex", valueCategoryIndex);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "categoryIndex", "updateChartCategory", valueCategoryIndex);
        }
        if (needAssertResponse) {
            assertResponse("categoryIndex", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidCategoryTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueCategory = (ChartCategory)invalidizeTestValue("ChartCategory", valueCategory, "updateChartCategory", "category");
            initialize("updateChartCategory", "category", valueCategory);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "category", "updateChartCategory", valueCategory);
        }
        if (needAssertResponse) {
            assertResponse("category", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateChartCategory", "password");
            initialize("updateChartCategory", "password", valuePassword);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateChartCategory", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateChartCategory", "folder");
            initialize("updateChartCategory", "folder", valueFolder);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateChartCategory", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateChartCategory");
        }
    }
    /**
     * Update a chart category.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartCategoryInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartCategory", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartCategory", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartCategory", "shapeIndex");
        Integer valueCategoryIndex = (Integer)getTestValue("Integer", "updateChartCategory", "categoryIndex");
        ChartCategory valueCategory = (ChartCategory)getTestValue("ChartCategory", "updateChartCategory", "category");
        String valuePassword = (String)getTestValue("String", "updateChartCategory", "password");
        String valueFolder = (String)getTestValue("String", "updateChartCategory", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartCategory", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateChartCategory", "storage");
            initialize("updateChartCategory", "storage", valueStorage);
            Chart response = api.updateChartCategory(valueName, valueSlideIndex, valueShapeIndex, valueCategoryIndex, valueCategory, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateChartCategory", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateChartCategory");
        }
    }
    
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointTest() throws ApiException, Exception {
        initialize("updateChartDataPoint", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateChartDataPoint", "name");
            initialize("updateChartDataPoint", "name", valueName);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateChartDataPoint", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateChartDataPoint", "slideIndex");
            initialize("updateChartDataPoint", "slideIndex", valueSlideIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateChartDataPoint", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateChartDataPoint", "shapeIndex");
            initialize("updateChartDataPoint", "shapeIndex", valueShapeIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateChartDataPoint", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "updateChartDataPoint", "seriesIndex");
            initialize("updateChartDataPoint", "seriesIndex", valueSeriesIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "updateChartDataPoint", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidPointIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valuePointIndex = (Integer)invalidizeTestValue("Integer", valuePointIndex, "updateChartDataPoint", "pointIndex");
            initialize("updateChartDataPoint", "pointIndex", valuePointIndex);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "pointIndex", "updateChartDataPoint", valuePointIndex);
        }
        if (needAssertResponse) {
            assertResponse("pointIndex", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidDataPointTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueDataPoint = (DataPoint)invalidizeTestValue("DataPoint", valueDataPoint, "updateChartDataPoint", "dataPoint");
            initialize("updateChartDataPoint", "dataPoint", valueDataPoint);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dataPoint", "updateChartDataPoint", valueDataPoint);
        }
        if (needAssertResponse) {
            assertResponse("dataPoint", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateChartDataPoint", "password");
            initialize("updateChartDataPoint", "password", valuePassword);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateChartDataPoint", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateChartDataPoint", "folder");
            initialize("updateChartDataPoint", "folder", valueFolder);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateChartDataPoint", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateChartDataPoint");
        }
    }
    /**
     * Update a data point in a chart series.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartDataPointInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartDataPoint", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "seriesIndex");
        Integer valuePointIndex = (Integer)getTestValue("Integer", "updateChartDataPoint", "pointIndex");
        DataPoint valueDataPoint = (DataPoint)getTestValue("DataPoint", "updateChartDataPoint", "dataPoint");
        String valuePassword = (String)getTestValue("String", "updateChartDataPoint", "password");
        String valueFolder = (String)getTestValue("String", "updateChartDataPoint", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartDataPoint", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateChartDataPoint", "storage");
            initialize("updateChartDataPoint", "storage", valueStorage);
            Chart response = api.updateChartDataPoint(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valuePointIndex, valueDataPoint, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateChartDataPoint", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateChartDataPoint");
        }
    }
    
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesTest() throws ApiException, Exception {
        initialize("updateChartSeries", null, null);
        Chart response = null;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateChartSeries", "name");
            initialize("updateChartSeries", "name", valueName);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateChartSeries", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateChartSeries", "slideIndex");
            initialize("updateChartSeries", "slideIndex", valueSlideIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateChartSeries", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateChartSeries", "shapeIndex");
            initialize("updateChartSeries", "shapeIndex", valueShapeIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateChartSeries", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidSeriesIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueSeriesIndex = (Integer)invalidizeTestValue("Integer", valueSeriesIndex, "updateChartSeries", "seriesIndex");
            initialize("updateChartSeries", "seriesIndex", valueSeriesIndex);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "seriesIndex", "updateChartSeries", valueSeriesIndex);
        }
        if (needAssertResponse) {
            assertResponse("seriesIndex", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidSeriesTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueSeries = (Series)invalidizeTestValue("Series", valueSeries, "updateChartSeries", "series");
            initialize("updateChartSeries", "series", valueSeries);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "series", "updateChartSeries", valueSeries);
        }
        if (needAssertResponse) {
            assertResponse("series", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateChartSeries", "password");
            initialize("updateChartSeries", "password", valuePassword);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateChartSeries", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateChartSeries", "folder");
            initialize("updateChartSeries", "folder", valueFolder);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateChartSeries", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateChartSeries");
        }
    }
    /**
     * Update a series in a chart.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChartSeriesInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateChartSeries", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateChartSeries", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateChartSeries", "shapeIndex");
        Integer valueSeriesIndex = (Integer)getTestValue("Integer", "updateChartSeries", "seriesIndex");
        Series valueSeries = (Series)getTestValue("Series", "updateChartSeries", "series");
        String valuePassword = (String)getTestValue("String", "updateChartSeries", "password");
        String valueFolder = (String)getTestValue("String", "updateChartSeries", "folder");
        String valueStorage = (String)getTestValue("String", "updateChartSeries", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateChartSeries", "storage");
            initialize("updateChartSeries", "storage", valueStorage);
            Chart response = api.updateChartSeries(valueName, valueSlideIndex, valueShapeIndex, valueSeriesIndex, valueSeries, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateChartSeries", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateChartSeries");
        }
    }
    
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideTest() throws ApiException, Exception {
        initialize("updateLayoutSlide", null, null);
        LayoutSlide response = null;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateLayoutSlide", "name");
            initialize("updateLayoutSlide", "name", valueName);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateLayoutSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateLayoutSlide", "slideIndex");
            initialize("updateLayoutSlide", "slideIndex", valueSlideIndex);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateLayoutSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidSlideDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueSlideDto = (LayoutSlide)invalidizeTestValue("LayoutSlide", valueSlideDto, "updateLayoutSlide", "slideDto");
            initialize("updateLayoutSlide", "slideDto", valueSlideDto);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideDto", "updateLayoutSlide", valueSlideDto);
        }
        if (needAssertResponse) {
            assertResponse("slideDto", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateLayoutSlide", "password");
            initialize("updateLayoutSlide", "password", valuePassword);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateLayoutSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateLayoutSlide", "folder");
            initialize("updateLayoutSlide", "folder", valueFolder);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateLayoutSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateLayoutSlide");
        }
    }
    /**
     * Update a layoutSlide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLayoutSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateLayoutSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateLayoutSlide", "slideIndex");
        LayoutSlide valueSlideDto = (LayoutSlide)getTestValue("LayoutSlide", "updateLayoutSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateLayoutSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateLayoutSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateLayoutSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateLayoutSlide", "storage");
            initialize("updateLayoutSlide", "storage", valueStorage);
            LayoutSlide response = api.updateLayoutSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateLayoutSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateLayoutSlide");
        }
    }
    
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideTest() throws ApiException, Exception {
        initialize("updateNotesSlide", null, null);
        NotesSlide response = null;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateNotesSlide", "name");
            initialize("updateNotesSlide", "name", valueName);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateNotesSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateNotesSlide", "slideIndex");
            initialize("updateNotesSlide", "slideIndex", valueSlideIndex);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateNotesSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueDto = (NotesSlide)invalidizeTestValue("NotesSlide", valueDto, "updateNotesSlide", "dto");
            initialize("updateNotesSlide", "dto", valueDto);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateNotesSlide", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateNotesSlide", "password");
            initialize("updateNotesSlide", "password", valuePassword);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateNotesSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateNotesSlide", "folder");
            initialize("updateNotesSlide", "folder", valueFolder);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateNotesSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateNotesSlide");
        }
    }
    /**
     * Update notes slide properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlide", "slideIndex");
        NotesSlide valueDto = (NotesSlide)getTestValue("NotesSlide", "updateNotesSlide", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateNotesSlide", "storage");
            initialize("updateNotesSlide", "storage", valueStorage);
            NotesSlide response = api.updateNotesSlide(valueName, valueSlideIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateNotesSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateNotesSlide");
        }
    }
    
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphTest() throws ApiException, Exception {
        initialize("updateNotesSlideParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateNotesSlideParagraph", "name");
            initialize("updateNotesSlideParagraph", "name", valueName);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateNotesSlideParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateNotesSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateNotesSlideParagraph", "slideIndex");
            initialize("updateNotesSlideParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateNotesSlideParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateNotesSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateNotesSlideParagraph", "shapeIndex");
            initialize("updateNotesSlideParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateNotesSlideParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateNotesSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateNotesSlideParagraph", "paragraphIndex");
            initialize("updateNotesSlideParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "updateNotesSlideParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "updateNotesSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "updateNotesSlideParagraph", "dto");
            initialize("updateNotesSlideParagraph", "dto", valueDto);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateNotesSlideParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateNotesSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateNotesSlideParagraph", "password");
            initialize("updateNotesSlideParagraph", "password", valuePassword);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateNotesSlideParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateNotesSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateNotesSlideParagraph", "folder");
            initialize("updateNotesSlideParagraph", "folder", valueFolder);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateNotesSlideParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateNotesSlideParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlideParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateNotesSlideParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateNotesSlideParagraph", "storage");
            initialize("updateNotesSlideParagraph", "storage", valueStorage);
            Paragraph response = api.updateNotesSlideParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateNotesSlideParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateNotesSlideParagraph");
        }
    }
    
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionTest() throws ApiException, Exception {
        initialize("updateNotesSlidePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateNotesSlidePortion", "name");
            initialize("updateNotesSlidePortion", "name", valueName);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateNotesSlidePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateNotesSlidePortion", "slideIndex");
            initialize("updateNotesSlidePortion", "slideIndex", valueSlideIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateNotesSlidePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateNotesSlidePortion", "shapeIndex");
            initialize("updateNotesSlidePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateNotesSlidePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateNotesSlidePortion", "paragraphIndex");
            initialize("updateNotesSlidePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "updateNotesSlidePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "updateNotesSlidePortion", "portionIndex");
            initialize("updateNotesSlidePortion", "portionIndex", valuePortionIndex);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "updateNotesSlidePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "updateNotesSlidePortion", "dto");
            initialize("updateNotesSlidePortion", "dto", valueDto);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateNotesSlidePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateNotesSlidePortion", "password");
            initialize("updateNotesSlidePortion", "password", valuePassword);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateNotesSlidePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateNotesSlidePortion", "folder");
            initialize("updateNotesSlidePortion", "folder", valueFolder);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateNotesSlidePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateNotesSlidePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlidePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlidePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateNotesSlidePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateNotesSlidePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlidePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlidePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlidePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateNotesSlidePortion", "storage");
            initialize("updateNotesSlidePortion", "storage", valueStorage);
            Portion response = api.updateNotesSlidePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateNotesSlidePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateNotesSlidePortion");
        }
    }
    
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeTest() throws ApiException, Exception {
        initialize("updateNotesSlideShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateNotesSlideShape", "name");
            initialize("updateNotesSlideShape", "name", valueName);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateNotesSlideShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateNotesSlideShape", "slideIndex");
            initialize("updateNotesSlideShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateNotesSlideShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateNotesSlideShape", "shapeIndex");
            initialize("updateNotesSlideShape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateNotesSlideShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "updateNotesSlideShape", "dto");
            initialize("updateNotesSlideShape", "dto", valueDto);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateNotesSlideShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateNotesSlideShape", "password");
            initialize("updateNotesSlideShape", "password", valuePassword);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateNotesSlideShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateNotesSlideShape", "folder");
            initialize("updateNotesSlideShape", "folder", valueFolder);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateNotesSlideShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateNotesSlideShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotesSlideShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateNotesSlideShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateNotesSlideShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateNotesSlideShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateNotesSlideShape", "password");
        String valueFolder = (String)getTestValue("String", "updateNotesSlideShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateNotesSlideShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateNotesSlideShape", "storage");
            initialize("updateNotesSlideShape", "storage", valueStorage);
            ShapeBase response = api.updateNotesSlideShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateNotesSlideShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateNotesSlideShape");
        }
    }
    
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphTest() throws ApiException, Exception {
        initialize("updateParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateParagraph", "name");
            initialize("updateParagraph", "name", valueName);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateParagraph", "slideIndex");
            initialize("updateParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateParagraph", "shapeIndex");
            initialize("updateParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateParagraph", "paragraphIndex");
            initialize("updateParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "updateParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "updateParagraph", "dto");
            initialize("updateParagraph", "dto", valueDto);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateParagraph", "password");
            initialize("updateParagraph", "password", valuePassword);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateParagraph", "folder");
            initialize("updateParagraph", "folder", valueFolder);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateParagraph");
        }
    }
    /**
     * Update paragraph properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateParagraph", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateParagraph", "storage");
            initialize("updateParagraph", "storage", valueStorage);
            Paragraph response = api.updateParagraph(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateParagraph");
        }
    }
    
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionTest() throws ApiException, Exception {
        initialize("updatePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updatePortion", "name");
            initialize("updatePortion", "name", valueName);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updatePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updatePortion", "slideIndex");
            initialize("updatePortion", "slideIndex", valueSlideIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updatePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updatePortion", "shapeIndex");
            initialize("updatePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updatePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updatePortion", "paragraphIndex");
            initialize("updatePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "updatePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "updatePortion", "portionIndex");
            initialize("updatePortion", "portionIndex", valuePortionIndex);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "updatePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "updatePortion", "dto");
            initialize("updatePortion", "dto", valueDto);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updatePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updatePortion", "password");
            initialize("updatePortion", "password", valuePassword);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updatePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updatePortion", "folder");
            initialize("updatePortion", "folder", valueFolder);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updatePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updatePortion");
        }
    }
    /**
     * Update portion properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updatePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updatePortion", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updatePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updatePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updatePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updatePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updatePortion", "password");
        String valueFolder = (String)getTestValue("String", "updatePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updatePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updatePortion", "storage");
            initialize("updatePortion", "storage", valueStorage);
            Portion response = api.updatePortion(valueName, valueSlideIndex, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updatePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updatePortion");
        }
    }
    
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionTest() throws ApiException, Exception {
        initialize("updateSection", null, null);
        Sections response = null;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSection", "name");
            initialize("updateSection", "name", valueName);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateSection", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidSectionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueSectionIndex = (Integer)invalidizeTestValue("Integer", valueSectionIndex, "updateSection", "sectionIndex");
            initialize("updateSection", "sectionIndex", valueSectionIndex);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionIndex", "updateSection", valueSectionIndex);
        }
        if (needAssertResponse) {
            assertResponse("sectionIndex", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidSectionNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueSectionName = (String)invalidizeTestValue("String", valueSectionName, "updateSection", "sectionName");
            initialize("updateSection", "sectionName", valueSectionName);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "sectionName", "updateSection", valueSectionName);
        }
        if (needAssertResponse) {
            assertResponse("sectionName", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSection", "password");
            initialize("updateSection", "password", valuePassword);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateSection", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSection", "folder");
            initialize("updateSection", "folder", valueFolder);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateSection", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateSection");
        }
    }
    /**
     * Update section name.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSectionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSection", "name");
        Integer valueSectionIndex = (Integer)getTestValue("Integer", "updateSection", "sectionIndex");
        String valueSectionName = (String)getTestValue("String", "updateSection", "sectionName");
        String valuePassword = (String)getTestValue("String", "updateSection", "password");
        String valueFolder = (String)getTestValue("String", "updateSection", "folder");
        String valueStorage = (String)getTestValue("String", "updateSection", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSection", "storage");
            initialize("updateSection", "storage", valueStorage);
            Sections response = api.updateSection(valueName, valueSectionIndex, valueSectionName, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateSection", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateSection");
        }
    }
    
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeTest() throws ApiException, Exception {
        initialize("updateShape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateShape", "name");
            initialize("updateShape", "name", valueName);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateShape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateShape", "slideIndex");
            initialize("updateShape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateShape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateShape", "shapeIndex");
            initialize("updateShape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateShape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "updateShape", "dto");
            initialize("updateShape", "dto", valueDto);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateShape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateShape", "password");
            initialize("updateShape", "password", valuePassword);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateShape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateShape", "folder");
            initialize("updateShape", "folder", valueFolder);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateShape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateShape");
        }
    }
    /**
     * Update shape properties.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateShape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateShape", "slideIndex");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateShape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateShape", "dto");
        String valuePassword = (String)getTestValue("String", "updateShape", "password");
        String valueFolder = (String)getTestValue("String", "updateShape", "folder");
        String valueStorage = (String)getTestValue("String", "updateShape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateShape", "storage");
            initialize("updateShape", "storage", valueStorage);
            ShapeBase response = api.updateShape(valueName, valueSlideIndex, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateShape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateShape");
        }
    }
    
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideTest() throws ApiException, Exception {
        initialize("updateSlide", null, null);
        Slide response = null;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSlide", "name");
            initialize("updateSlide", "name", valueName);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateSlide", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSlide", "slideIndex");
            initialize("updateSlide", "slideIndex", valueSlideIndex);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateSlide", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidSlideDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueSlideDto = (Slide)invalidizeTestValue("Slide", valueSlideDto, "updateSlide", "slideDto");
            initialize("updateSlide", "slideDto", valueSlideDto);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideDto", "updateSlide", valueSlideDto);
        }
        if (needAssertResponse) {
            assertResponse("slideDto", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSlide", "password");
            initialize("updateSlide", "password", valuePassword);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateSlide", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSlide", "folder");
            initialize("updateSlide", "folder", valueFolder);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateSlide", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateSlide");
        }
    }
    /**
     * Update a slide.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSlideInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSlide", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSlide", "slideIndex");
        Slide valueSlideDto = (Slide)getTestValue("Slide", "updateSlide", "slideDto");
        String valuePassword = (String)getTestValue("String", "updateSlide", "password");
        String valueFolder = (String)getTestValue("String", "updateSlide", "folder");
        String valueStorage = (String)getTestValue("String", "updateSlide", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSlide", "storage");
            initialize("updateSlide", "storage", valueStorage);
            Slide response = api.updateSlide(valueName, valueSlideIndex, valueSlideDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateSlide", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateSlide");
        }
    }
    
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeTest() throws ApiException, Exception {
        initialize("updateSubshape", null, null);
        ShapeBase response = null;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSubshape", "name");
            initialize("updateSubshape", "name", valueName);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateSubshape", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateSubshape");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSubshape", "slideIndex");
            initialize("updateSubshape", "slideIndex", valueSlideIndex);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateSubshape", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateSubshape");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "updateSubshape", "path");
            initialize("updateSubshape", "path", valuePath);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "updateSubshape", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "updateSubshape");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateSubshape", "shapeIndex");
            initialize("updateSubshape", "shapeIndex", valueShapeIndex);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateSubshape", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateSubshape");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valueDto = (ShapeBase)invalidizeTestValue("ShapeBase", valueDto, "updateSubshape", "dto");
            initialize("updateSubshape", "dto", valueDto);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateSubshape", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateSubshape");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSubshape", "password");
            initialize("updateSubshape", "password", valuePassword);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateSubshape", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateSubshape");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSubshape", "folder");
            initialize("updateSubshape", "folder", valueFolder);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateSubshape", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateSubshape");
        }
    }
    /**
     * Update shape properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshape", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshape", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshape", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshape", "shapeIndex");
        ShapeBase valueDto = (ShapeBase)getTestValue("ShapeBase", "updateSubshape", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshape", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshape", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshape", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSubshape", "storage");
            initialize("updateSubshape", "storage", valueStorage);
            ShapeBase response = api.updateSubshape(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateSubshape", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateSubshape");
        }
    }
    
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphTest() throws ApiException, Exception {
        initialize("updateSubshapeParagraph", null, null);
        Paragraph response = null;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSubshapeParagraph", "name");
            initialize("updateSubshapeParagraph", "name", valueName);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateSubshapeParagraph", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSubshapeParagraph", "slideIndex");
            initialize("updateSubshapeParagraph", "slideIndex", valueSlideIndex);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateSubshapeParagraph", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "updateSubshapeParagraph", "path");
            initialize("updateSubshapeParagraph", "path", valuePath);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "updateSubshapeParagraph", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateSubshapeParagraph", "shapeIndex");
            initialize("updateSubshapeParagraph", "shapeIndex", valueShapeIndex);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateSubshapeParagraph", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateSubshapeParagraph", "paragraphIndex");
            initialize("updateSubshapeParagraph", "paragraphIndex", valueParagraphIndex);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "updateSubshapeParagraph", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valueDto = (Paragraph)invalidizeTestValue("Paragraph", valueDto, "updateSubshapeParagraph", "dto");
            initialize("updateSubshapeParagraph", "dto", valueDto);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateSubshapeParagraph", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSubshapeParagraph", "password");
            initialize("updateSubshapeParagraph", "password", valuePassword);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateSubshapeParagraph", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSubshapeParagraph", "folder");
            initialize("updateSubshapeParagraph", "folder", valueFolder);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateSubshapeParagraph", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateSubshapeParagraph");
        }
    }
    /**
     * Update paragraph properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapeParagraphInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapeParagraph", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapeParagraph", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapeParagraph", "paragraphIndex");
        Paragraph valueDto = (Paragraph)getTestValue("Paragraph", "updateSubshapeParagraph", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapeParagraph", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapeParagraph", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapeParagraph", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSubshapeParagraph", "storage");
            initialize("updateSubshapeParagraph", "storage", valueStorage);
            Paragraph response = api.updateSubshapeParagraph(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateSubshapeParagraph", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateSubshapeParagraph");
        }
    }
    
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionTest() throws ApiException, Exception {
        initialize("updateSubshapePortion", null, null);
        Portion response = null;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
        assertNotNull(response);
    }

    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valueName = (String)invalidizeTestValue("String", valueName, "updateSubshapePortion", "name");
            initialize("updateSubshapePortion", "name", valueName);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "name", "updateSubshapePortion", valueName);
        }
        if (needAssertResponse) {
            assertResponse("name", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidSlideIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valueSlideIndex = (Integer)invalidizeTestValue("Integer", valueSlideIndex, "updateSubshapePortion", "slideIndex");
            initialize("updateSubshapePortion", "slideIndex", valueSlideIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "slideIndex", "updateSubshapePortion", valueSlideIndex);
        }
        if (needAssertResponse) {
            assertResponse("slideIndex", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "updateSubshapePortion", "path");
            initialize("updateSubshapePortion", "path", valuePath);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "updateSubshapePortion", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidShapeIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valueShapeIndex = (Integer)invalidizeTestValue("Integer", valueShapeIndex, "updateSubshapePortion", "shapeIndex");
            initialize("updateSubshapePortion", "shapeIndex", valueShapeIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "shapeIndex", "updateSubshapePortion", valueShapeIndex);
        }
        if (needAssertResponse) {
            assertResponse("shapeIndex", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidParagraphIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valueParagraphIndex = (Integer)invalidizeTestValue("Integer", valueParagraphIndex, "updateSubshapePortion", "paragraphIndex");
            initialize("updateSubshapePortion", "paragraphIndex", valueParagraphIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "paragraphIndex", "updateSubshapePortion", valueParagraphIndex);
        }
        if (needAssertResponse) {
            assertResponse("paragraphIndex", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidPortionIndexTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valuePortionIndex = (Integer)invalidizeTestValue("Integer", valuePortionIndex, "updateSubshapePortion", "portionIndex");
            initialize("updateSubshapePortion", "portionIndex", valuePortionIndex);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "portionIndex", "updateSubshapePortion", valuePortionIndex);
        }
        if (needAssertResponse) {
            assertResponse("portionIndex", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidDtoTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valueDto = (Portion)invalidizeTestValue("Portion", valueDto, "updateSubshapePortion", "dto");
            initialize("updateSubshapePortion", "dto", valueDto);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "dto", "updateSubshapePortion", valueDto);
        }
        if (needAssertResponse) {
            assertResponse("dto", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidPasswordTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valuePassword = (String)invalidizeTestValue("String", valuePassword, "updateSubshapePortion", "password");
            initialize("updateSubshapePortion", "password", valuePassword);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "password", "updateSubshapePortion", valuePassword);
        }
        if (needAssertResponse) {
            assertResponse("password", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidFolderTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valueFolder = (String)invalidizeTestValue("String", valueFolder, "updateSubshapePortion", "folder");
            initialize("updateSubshapePortion", "folder", valueFolder);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "folder", "updateSubshapePortion", valueFolder);
        }
        if (needAssertResponse) {
            assertResponse("folder", "updateSubshapePortion");
        }
    }
    /**
     * Update portion properties (for smart art and group shapes).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubshapePortionInvalidStorageTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valueName = (String)getTestValue("String", "updateSubshapePortion", "name");
        Integer valueSlideIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "slideIndex");
        String valuePath = (String)getTestValue("String", "updateSubshapePortion", "path");
        Integer valueShapeIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "shapeIndex");
        Integer valueParagraphIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "paragraphIndex");
        Integer valuePortionIndex = (Integer)getTestValue("Integer", "updateSubshapePortion", "portionIndex");
        Portion valueDto = (Portion)getTestValue("Portion", "updateSubshapePortion", "dto");
        String valuePassword = (String)getTestValue("String", "updateSubshapePortion", "password");
        String valueFolder = (String)getTestValue("String", "updateSubshapePortion", "folder");
        String valueStorage = (String)getTestValue("String", "updateSubshapePortion", "storage");
        try {
            valueStorage = (String)invalidizeTestValue("String", valueStorage, "updateSubshapePortion", "storage");
            initialize("updateSubshapePortion", "storage", valueStorage);
            Portion response = api.updateSubshapePortion(valueName, valueSlideIndex, valuePath, valueShapeIndex, valueParagraphIndex, valuePortionIndex, valueDto, valuePassword, valueFolder, valueStorage);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storage", "updateSubshapePortion", valueStorage);
        }
        if (needAssertResponse) {
            assertResponse("storage", "updateSubshapePortion");
        }
    }
    
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException, Exception {
        initialize("uploadFile", null, null);
        FilesUploadResult response = null;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        response = api.uploadFile(valuePath, valueFile, valueStorageName);
        assertNotNull(response);
    }

    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidPathTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valuePath = (String)invalidizeTestValue("String", valuePath, "uploadFile", "path");
            initialize("uploadFile", "path", valuePath);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "path", "uploadFile", valuePath);
        }
        if (needAssertResponse) {
            assertResponse("path", "uploadFile");
        }
    }
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidFileTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valueFile = (byte[])invalidizeTestValue("byte[]", valueFile, "uploadFile", "file");
            initialize("uploadFile", "file", valueFile);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "file", "uploadFile", valueFile);
        }
        if (needAssertResponse) {
            assertResponse("file", "uploadFile");
        }
    }
    /**
     * Upload file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileInvalidStorageNameTest() throws ApiException {
        Boolean needAssertResponse = false;
        String valuePath = (String)getTestValue("String", "uploadFile", "path");
        byte[] valueFile = (byte[])getTestValue("byte[]", "uploadFile", "file");
        String valueStorageName = (String)getTestValue("String", "uploadFile", "storageName");
        try {
            valueStorageName = (String)invalidizeTestValue("String", valueStorageName, "uploadFile", "storageName");
            initialize("uploadFile", "storageName", valueStorageName);
            FilesUploadResult response = api.uploadFile(valuePath, valueFile, valueStorageName);
            needAssertResponse = true;
        } catch (ApiException ex) {
            assertException(ex, "storageName", "uploadFile", valueStorageName);
        }
        if (needAssertResponse) {
            assertResponse("storageName", "uploadFile");
        }
    }
    
}
