/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

package com.aspose.slides.api;

import com.aspose.slides.ApiCallback;
import com.aspose.slides.ApiClient;
import com.aspose.slides.ApiException;
import com.aspose.slides.ApiResponse;
import com.aspose.slides.Configuration;
import com.aspose.slides.FileInfo;
import com.aspose.slides.Pair;
import com.aspose.slides.ProgressRequestBody;
import com.aspose.slides.ProgressResponseBody;
import com.aspose.slides.auth.NeedRepeatRequestException;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.slides.model.ApiInfo;
import com.aspose.slides.model.Chart;
import com.aspose.slides.model.ChartCategory;
import com.aspose.slides.model.ColorScheme;
import com.aspose.slides.model.DataPoint;
import com.aspose.slides.model.DiscUsage;
import com.aspose.slides.model.Document;
import com.aspose.slides.model.DocumentProperties;
import com.aspose.slides.model.DocumentProperty;
import com.aspose.slides.model.DocumentReplaceResult;
import com.aspose.slides.model.Effect;
import com.aspose.slides.model.EntityExists;
import com.aspose.slides.model.ExportOptions;
import java.io.File;
import com.aspose.slides.model.FileVersions;
import com.aspose.slides.model.FilesList;
import com.aspose.slides.model.FilesUploadResult;
import com.aspose.slides.model.FontScheme;
import com.aspose.slides.model.FormatScheme;
import com.aspose.slides.model.HeaderFooter;
import com.aspose.slides.model.IShapeExportOptions;
import com.aspose.slides.model.Images;
import com.aspose.slides.model.InteractiveSequence;
import com.aspose.slides.model.LayoutSlide;
import com.aspose.slides.model.LayoutSlides;
import com.aspose.slides.model.MasterSlide;
import com.aspose.slides.model.MasterSlides;
import com.aspose.slides.model.NotesSlide;
import com.aspose.slides.model.NotesSlideHeaderFooter;
import com.aspose.slides.model.ObjectExist;
import com.aspose.slides.model.OrderedMergeRequest;
import com.aspose.slides.model.Paragraph;
import com.aspose.slides.model.Paragraphs;
import com.aspose.slides.model.Pipeline;
import com.aspose.slides.model.Placeholder;
import com.aspose.slides.model.Placeholders;
import com.aspose.slides.model.Portion;
import com.aspose.slides.model.Portions;
import com.aspose.slides.model.PresentationsMergeRequest;
import com.aspose.slides.model.ProtectionProperties;
import com.aspose.slides.model.Sections;
import com.aspose.slides.model.Series;
import com.aspose.slides.model.ShapeBase;
import com.aspose.slides.model.Shapes;
import com.aspose.slides.model.Slide;
import com.aspose.slides.model.SlideAnimation;
import com.aspose.slides.model.SlideBackground;
import com.aspose.slides.model.SlideComments;
import com.aspose.slides.model.SlideProperties;
import com.aspose.slides.model.SlideReplaceResult;
import com.aspose.slides.model.Slides;
import com.aspose.slides.model.SplitDocumentResult;
import com.aspose.slides.model.StorageExist;
import com.aspose.slides.model.TextItems;
import com.aspose.slides.model.Theme;
import com.aspose.slides.model.ViewProperties;
import com.aspose.slides.model.request.CopyFileRequest;
import com.aspose.slides.model.request.CopyFolderRequest;
import com.aspose.slides.model.request.CreateFolderRequest;
import com.aspose.slides.model.request.DeleteChartCategoryRequest;
import com.aspose.slides.model.request.DeleteChartDataPointRequest;
import com.aspose.slides.model.request.DeleteChartSeriesRequest;
import com.aspose.slides.model.request.DeleteFileRequest;
import com.aspose.slides.model.request.DeleteFolderRequest;
import com.aspose.slides.model.request.DeleteNotesSlideRequest;
import com.aspose.slides.model.request.DeleteNotesSlideParagraphRequest;
import com.aspose.slides.model.request.DeleteNotesSlideParagraphsRequest;
import com.aspose.slides.model.request.DeleteNotesSlidePortionRequest;
import com.aspose.slides.model.request.DeleteNotesSlidePortionsRequest;
import com.aspose.slides.model.request.DeleteNotesSlideShapeRequest;
import com.aspose.slides.model.request.DeleteNotesSlideShapesRequest;
import com.aspose.slides.model.request.DeleteParagraphRequest;
import com.aspose.slides.model.request.DeleteParagraphsRequest;
import com.aspose.slides.model.request.DeletePortionRequest;
import com.aspose.slides.model.request.DeletePortionsRequest;
import com.aspose.slides.model.request.DeleteSectionRequest;
import com.aspose.slides.model.request.DeleteSectionsRequest;
import com.aspose.slides.model.request.DeleteSlideAnimationRequest;
import com.aspose.slides.model.request.DeleteSlideAnimationEffectRequest;
import com.aspose.slides.model.request.DeleteSlideAnimationInteractiveSequenceRequest;
import com.aspose.slides.model.request.DeleteSlideAnimationInteractiveSequenceEffectRequest;
import com.aspose.slides.model.request.DeleteSlideAnimationInteractiveSequencesRequest;
import com.aspose.slides.model.request.DeleteSlideAnimationMainSequenceRequest;
import com.aspose.slides.model.request.DeleteSlideByIndexRequest;
import com.aspose.slides.model.request.DeleteSlideShapeRequest;
import com.aspose.slides.model.request.DeleteSlideShapesRequest;
import com.aspose.slides.model.request.DeleteSlideSubshapeRequest;
import com.aspose.slides.model.request.DeleteSlideSubshapesRequest;
import com.aspose.slides.model.request.DeleteSlidesCleanSlidesListRequest;
import com.aspose.slides.model.request.DeleteSlidesDocumentPropertiesRequest;
import com.aspose.slides.model.request.DeleteSlidesDocumentPropertyRequest;
import com.aspose.slides.model.request.DeleteSlidesSlideBackgroundRequest;
import com.aspose.slides.model.request.DeleteSubshapeParagraphRequest;
import com.aspose.slides.model.request.DeleteSubshapeParagraphsRequest;
import com.aspose.slides.model.request.DeleteSubshapePortionRequest;
import com.aspose.slides.model.request.DeleteSubshapePortionsRequest;
import com.aspose.slides.model.request.DownloadFileRequest;
import com.aspose.slides.model.request.GetDiscUsageRequest;
import com.aspose.slides.model.request.GetFileVersionsRequest;
import com.aspose.slides.model.request.GetFilesListRequest;
import com.aspose.slides.model.request.GetLayoutSlideRequest;
import com.aspose.slides.model.request.GetLayoutSlidesListRequest;
import com.aspose.slides.model.request.GetMasterSlideRequest;
import com.aspose.slides.model.request.GetMasterSlidesListRequest;
import com.aspose.slides.model.request.GetNotesSlideRequest;
import com.aspose.slides.model.request.GetNotesSlideExistsRequest;
import com.aspose.slides.model.request.GetNotesSlideHeaderFooterRequest;
import com.aspose.slides.model.request.GetNotesSlideShapeRequest;
import com.aspose.slides.model.request.GetNotesSlideShapeParagraphRequest;
import com.aspose.slides.model.request.GetNotesSlideShapeParagraphsRequest;
import com.aspose.slides.model.request.GetNotesSlideShapePortionRequest;
import com.aspose.slides.model.request.GetNotesSlideShapePortionsRequest;
import com.aspose.slides.model.request.GetNotesSlideShapesRequest;
import com.aspose.slides.model.request.GetNotesSlideWithFormatRequest;
import com.aspose.slides.model.request.GetParagraphPortionRequest;
import com.aspose.slides.model.request.GetParagraphPortionsRequest;
import com.aspose.slides.model.request.GetSectionsRequest;
import com.aspose.slides.model.request.GetSlideAnimationRequest;
import com.aspose.slides.model.request.GetSlideHeaderFooterRequest;
import com.aspose.slides.model.request.GetSlideShapeRequest;
import com.aspose.slides.model.request.GetSlideShapeParagraphRequest;
import com.aspose.slides.model.request.GetSlideShapeParagraphsRequest;
import com.aspose.slides.model.request.GetSlideShapesRequest;
import com.aspose.slides.model.request.GetSlideSubshapeRequest;
import com.aspose.slides.model.request.GetSlideSubshapeParagraphRequest;
import com.aspose.slides.model.request.GetSlideSubshapeParagraphsRequest;
import com.aspose.slides.model.request.GetSlideSubshapesRequest;
import com.aspose.slides.model.request.GetSlidesDocumentRequest;
import com.aspose.slides.model.request.GetSlidesDocumentPropertiesRequest;
import com.aspose.slides.model.request.GetSlidesDocumentPropertyRequest;
import com.aspose.slides.model.request.GetSlidesImageWithDefaultFormatRequest;
import com.aspose.slides.model.request.GetSlidesImageWithFormatRequest;
import com.aspose.slides.model.request.GetSlidesImagesRequest;
import com.aspose.slides.model.request.GetSlidesPlaceholderRequest;
import com.aspose.slides.model.request.GetSlidesPlaceholdersRequest;
import com.aspose.slides.model.request.GetSlidesPresentationTextItemsRequest;
import com.aspose.slides.model.request.GetSlidesProtectionPropertiesRequest;
import com.aspose.slides.model.request.GetSlidesSlideRequest;
import com.aspose.slides.model.request.GetSlidesSlideBackgroundRequest;
import com.aspose.slides.model.request.GetSlidesSlideCommentsRequest;
import com.aspose.slides.model.request.GetSlidesSlideImagesRequest;
import com.aspose.slides.model.request.GetSlidesSlidePropertiesRequest;
import com.aspose.slides.model.request.GetSlidesSlideTextItemsRequest;
import com.aspose.slides.model.request.GetSlidesSlidesListRequest;
import com.aspose.slides.model.request.GetSlidesThemeRequest;
import com.aspose.slides.model.request.GetSlidesThemeColorSchemeRequest;
import com.aspose.slides.model.request.GetSlidesThemeFontSchemeRequest;
import com.aspose.slides.model.request.GetSlidesThemeFormatSchemeRequest;
import com.aspose.slides.model.request.GetSlidesViewPropertiesRequest;
import com.aspose.slides.model.request.GetSubshapeParagraphPortionRequest;
import com.aspose.slides.model.request.GetSubshapeParagraphPortionsRequest;
import com.aspose.slides.model.request.MoveFileRequest;
import com.aspose.slides.model.request.MoveFolderRequest;
import com.aspose.slides.model.request.ObjectExistsRequest;
import com.aspose.slides.model.request.PostAddNewParagraphRequest;
import com.aspose.slides.model.request.PostAddNewPortionRequest;
import com.aspose.slides.model.request.PostAddNewShapeRequest;
import com.aspose.slides.model.request.PostAddNewSubshapeRequest;
import com.aspose.slides.model.request.PostAddNewSubshapeParagraphRequest;
import com.aspose.slides.model.request.PostAddNewSubshapePortionRequest;
import com.aspose.slides.model.request.PostAddNotesSlideRequest;
import com.aspose.slides.model.request.PostAlignShapesRequest;
import com.aspose.slides.model.request.PostChartCategoryRequest;
import com.aspose.slides.model.request.PostChartDataPointRequest;
import com.aspose.slides.model.request.PostChartSeriesRequest;
import com.aspose.slides.model.request.PostCopyLayoutSlideFromSourcePresentationRequest;
import com.aspose.slides.model.request.PostCopyMasterSlideFromSourcePresentationRequest;
import com.aspose.slides.model.request.PostExportImageWithDefaultFormatRequest;
import com.aspose.slides.model.request.PostExportImageWithFormatRequest;
import com.aspose.slides.model.request.PostExportImagesFromRequestWithFormatRequest;
import com.aspose.slides.model.request.PostExportImagesWithDefaultFormatRequest;
import com.aspose.slides.model.request.PostExportImagesWithFormatRequest;
import com.aspose.slides.model.request.PostExportShapeRequest;
import com.aspose.slides.model.request.PostExportSlideRequest;
import com.aspose.slides.model.request.PostGetNotesSlideRequest;
import com.aspose.slides.model.request.PostGetNotesSlideExistsRequest;
import com.aspose.slides.model.request.PostGetNotesSlideWithFormatRequest;
import com.aspose.slides.model.request.PostImagesFromRequestWithDefaultFormatRequest;
import com.aspose.slides.model.request.PostNotesSlideAddNewParagraphRequest;
import com.aspose.slides.model.request.PostNotesSlideAddNewPortionRequest;
import com.aspose.slides.model.request.PostNotesSlideAddNewShapeRequest;
import com.aspose.slides.model.request.PostNotesSlideShapeSaveAsRequest;
import com.aspose.slides.model.request.PostPresentationMergeRequest;
import com.aspose.slides.model.request.PostPresentationReplaceTextRequest;
import com.aspose.slides.model.request.PostPresentationSplitRequest;
import com.aspose.slides.model.request.PostSectionRequest;
import com.aspose.slides.model.request.PostSectionMoveRequest;
import com.aspose.slides.model.request.PostShapeSaveAsRequest;
import com.aspose.slides.model.request.PostSlideAnimationEffectRequest;
import com.aspose.slides.model.request.PostSlideAnimationInteractiveSequenceRequest;
import com.aspose.slides.model.request.PostSlideAnimationInteractiveSequenceEffectRequest;
import com.aspose.slides.model.request.PostSlideReplaceTextRequest;
import com.aspose.slides.model.request.PostSlideSaveAsRequest;
import com.aspose.slides.model.request.PostSlidesAddRequest;
import com.aspose.slides.model.request.PostSlidesConvertRequest;
import com.aspose.slides.model.request.PostSlidesCopyRequest;
import com.aspose.slides.model.request.PostSlidesDocumentRequest;
import com.aspose.slides.model.request.PostSlidesDocumentFromHtmlRequest;
import com.aspose.slides.model.request.PostSlidesDocumentFromPdfRequest;
import com.aspose.slides.model.request.PostSlidesDocumentFromSourceRequest;
import com.aspose.slides.model.request.PostSlidesDocumentFromTemplateRequest;
import com.aspose.slides.model.request.PostSlidesMergeRequest;
import com.aspose.slides.model.request.PostSlidesPipelineRequest;
import com.aspose.slides.model.request.PostSlidesPresentationReplaceTextRequest;
import com.aspose.slides.model.request.PostSlidesReorderRequest;
import com.aspose.slides.model.request.PostSlidesReorderManyRequest;
import com.aspose.slides.model.request.PostSlidesSaveAsRequest;
import com.aspose.slides.model.request.PostSlidesSetDocumentPropertiesRequest;
import com.aspose.slides.model.request.PostSlidesSlideReplaceTextRequest;
import com.aspose.slides.model.request.PostSlidesSplitRequest;
import com.aspose.slides.model.request.PostSubshapeSaveAsRequest;
import com.aspose.slides.model.request.PutChartCategoryRequest;
import com.aspose.slides.model.request.PutChartDataPointRequest;
import com.aspose.slides.model.request.PutChartSeriesRequest;
import com.aspose.slides.model.request.PutExportShapeRequest;
import com.aspose.slides.model.request.PutExportSlideRequest;
import com.aspose.slides.model.request.PutLayoutSlideRequest;
import com.aspose.slides.model.request.PutNotesSlideHeaderFooterRequest;
import com.aspose.slides.model.request.PutNotesSlideShapeSaveAsRequest;
import com.aspose.slides.model.request.PutPresentationMergeRequest;
import com.aspose.slides.model.request.PutPresentationSplitRequest;
import com.aspose.slides.model.request.PutSectionRequest;
import com.aspose.slides.model.request.PutSectionsRequest;
import com.aspose.slides.model.request.PutSetParagraphPortionPropertiesRequest;
import com.aspose.slides.model.request.PutSetParagraphPropertiesRequest;
import com.aspose.slides.model.request.PutSetSubshapeParagraphPortionPropertiesRequest;
import com.aspose.slides.model.request.PutSetSubshapeParagraphPropertiesRequest;
import com.aspose.slides.model.request.PutShapeSaveAsRequest;
import com.aspose.slides.model.request.PutSlideAnimationRequest;
import com.aspose.slides.model.request.PutSlideAnimationEffectRequest;
import com.aspose.slides.model.request.PutSlideAnimationInteractiveSequenceEffectRequest;
import com.aspose.slides.model.request.PutSlideHeaderFooterRequest;
import com.aspose.slides.model.request.PutSlideSaveAsRequest;
import com.aspose.slides.model.request.PutSlideShapeInfoRequest;
import com.aspose.slides.model.request.PutSlideSubshapeInfoRequest;
import com.aspose.slides.model.request.PutSlidesConvertRequest;
import com.aspose.slides.model.request.PutSlidesDocumentFromHtmlRequest;
import com.aspose.slides.model.request.PutSlidesHeaderFooterRequest;
import com.aspose.slides.model.request.PutSlidesMergeRequest;
import com.aspose.slides.model.request.PutSlidesProtectionPropertiesRequest;
import com.aspose.slides.model.request.PutSlidesSaveAsRequest;
import com.aspose.slides.model.request.PutSlidesSetDocumentPropertyRequest;
import com.aspose.slides.model.request.PutSlidesSlideRequest;
import com.aspose.slides.model.request.PutSlidesSlideBackgroundRequest;
import com.aspose.slides.model.request.PutSlidesSlideBackgroundColorRequest;
import com.aspose.slides.model.request.PutSlidesSlidePropertiesRequest;
import com.aspose.slides.model.request.PutSlidesSlideSizeRequest;
import com.aspose.slides.model.request.PutSlidesViewPropertiesRequest;
import com.aspose.slides.model.request.PutSubshapeSaveAsRequest;
import com.aspose.slides.model.request.PutUpdateNotesSlideRequest;
import com.aspose.slides.model.request.PutUpdateNotesSlideShapeRequest;
import com.aspose.slides.model.request.PutUpdateNotesSlideShapeParagraphRequest;
import com.aspose.slides.model.request.PutUpdateNotesSlideShapePortionRequest;
import com.aspose.slides.model.request.StorageExistsRequest;
import com.aspose.slides.model.request.UploadFileRequest;
import com.aspose.slides.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SlidesApi {
    public SlidesApi(Configuration configuration) {
        apiClient = new ApiClient(configuration);
    }

    public SlidesApi(String appSid, String appKey) {
        this(new Configuration(appSid, appKey));
    }

    /**
     * Build call for copyFile
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFile(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFile(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        try {
            copyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        } catch (NeedRepeatRequestException e) {
            copyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }
    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = copyFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy file (asynchronously)
     * 
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for copyFile
     * @param request Request for copyFile. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call copyFileCall(CopyFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return copyFileCall(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId(), progressListener, progressRequestListener);
    }

    /**
     * Copy file
     * 
     * @param request Request for copyFile. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void copyFile(CopyFileRequest request) throws ApiException {
        copyFile(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId());
    }

    /**
     * Copy file
     * 
     * @param request Request for copyFile. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> copyFileWithHttpInfo(CopyFileRequest request) throws ApiException {
        return copyFileWithHttpInfo(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId());
    }

    /**
     * Copy file (asynchronously)
     * 
     * @param request Request for copyFile. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call copyFileAsync(CopyFileRequest request, final ApiCallback<Void> callback) throws ApiException {
        return copyFileAsync(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId(), callback);
    }
    /**
     * Build call for copyFolder
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFolder(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFolder(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        try {
            copyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        } catch (NeedRepeatRequestException e) {
            copyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }
    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = copyFolderCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy folder (asynchronously)
     * 
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for copyFolder
     * @param request Request for copyFolder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call copyFolderCall(CopyFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return copyFolderCall(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Copy folder
     * 
     * @param request Request for copyFolder. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void copyFolder(CopyFolderRequest request) throws ApiException {
        copyFolder(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName());
    }

    /**
     * Copy folder
     * 
     * @param request Request for copyFolder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> copyFolderWithHttpInfo(CopyFolderRequest request) throws ApiException {
        return copyFolderWithHttpInfo(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName());
    }

    /**
     * Copy folder (asynchronously)
     * 
     * @param request Request for copyFolder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call copyFolderAsync(CopyFolderRequest request, final ApiCallback<Void> callback) throws ApiException {
        return copyFolderAsync(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), callback);
    }
    /**
     * Build call for createFolder
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFolderCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createFolder(String path, String storageName) throws ApiException {
        try {
            createFolderWithHttpInfo(path, storageName);
        } catch (NeedRepeatRequestException e) {
            createFolderWithHttpInfo(path, storageName);
        }
    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createFolderWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = createFolderCall(path, storageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create the folder (asynchronously)
     * 
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFolderAsync(String path, String storageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFolderCall(path, storageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for createFolder
     * @param request Request for createFolder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call createFolderCall(CreateFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createFolderCall(request.getPath(), request.getStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Create the folder
     * 
     * @param request Request for createFolder. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void createFolder(CreateFolderRequest request) throws ApiException {
        createFolder(request.getPath(), request.getStorageName());
    }

    /**
     * Create the folder
     * 
     * @param request Request for createFolder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> createFolderWithHttpInfo(CreateFolderRequest request) throws ApiException {
        return createFolderWithHttpInfo(request.getPath(), request.getStorageName());
    }

    /**
     * Create the folder (asynchronously)
     * 
     * @param request Request for createFolder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call createFolderAsync(CreateFolderRequest request, final ApiCallback<Void> callback) throws ApiException {
        return createFolderAsync(request.getPath(), request.getStorageName(), callback);
    }
    /**
     * Build call for deleteChartCategory
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChartCategoryCall(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteChartCategory(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteChartCategory(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteChartCategory(Async)");
        }
        // verify the required parameter 'categoryIndex' is set
        if (categoryIndex == null) {
            throw new ApiException("Missing the required parameter 'categoryIndex' when calling deleteChartCategory(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "categoryIndex" + "\\}", apiClient.objectToString(categoryIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a category from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart deleteChartCategory(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = deleteChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = deleteChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a category from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> deleteChartCategoryWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a category from a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChartCategoryAsync(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteChartCategory
     * @param request Request for deleteChartCategory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteChartCategoryCall(DeleteChartCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteChartCategoryCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete a category from a chart.
     * 
     * @param request Request for deleteChartCategory. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart deleteChartCategory(DeleteChartCategoryRequest request) throws ApiException {
        return deleteChartCategory(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a category from a chart.
     * 
     * @param request Request for deleteChartCategory. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> deleteChartCategoryWithHttpInfo(DeleteChartCategoryRequest request) throws ApiException {
        return deleteChartCategoryWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a category from a chart. (asynchronously)
     * 
     * @param request Request for deleteChartCategory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteChartCategoryAsync(DeleteChartCategoryRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return deleteChartCategoryAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteChartDataPoint
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChartDataPointCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'pointIndex' is set
        if (pointIndex == null) {
            throw new ApiException("Missing the required parameter 'pointIndex' when calling deleteChartDataPoint(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex)).replaceAll("\\{" + "pointIndex" + "\\}", apiClient.objectToString(pointIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a data point from a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart deleteChartDataPoint(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = deleteChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = deleteChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a data point from a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> deleteChartDataPointWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a data point from a chart series. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChartDataPointAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteChartDataPoint
     * @param request Request for deleteChartDataPoint. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteChartDataPointCall(DeleteChartDataPointRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteChartDataPointCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete a data point from a chart series.
     * 
     * @param request Request for deleteChartDataPoint. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart deleteChartDataPoint(DeleteChartDataPointRequest request) throws ApiException {
        return deleteChartDataPoint(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a data point from a chart series.
     * 
     * @param request Request for deleteChartDataPoint. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> deleteChartDataPointWithHttpInfo(DeleteChartDataPointRequest request) throws ApiException {
        return deleteChartDataPointWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a data point from a chart series. (asynchronously)
     * 
     * @param request Request for deleteChartDataPoint. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteChartDataPointAsync(DeleteChartDataPointRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return deleteChartDataPointAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteChartSeries
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChartSeriesCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteChartSeries(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteChartSeries(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteChartSeries(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling deleteChartSeries(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a series from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart deleteChartSeries(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = deleteChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = deleteChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a series from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> deleteChartSeriesWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a series from a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChartSeriesAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteChartSeries
     * @param request Request for deleteChartSeries. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteChartSeriesCall(DeleteChartSeriesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteChartSeriesCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete a series from a chart.
     * 
     * @param request Request for deleteChartSeries. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart deleteChartSeries(DeleteChartSeriesRequest request) throws ApiException {
        return deleteChartSeries(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a series from a chart.
     * 
     * @param request Request for deleteChartSeries. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> deleteChartSeriesWithHttpInfo(DeleteChartSeriesRequest request) throws ApiException {
        return deleteChartSeriesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a series from a chart. (asynchronously)
     * 
     * @param request Request for deleteChartSeries. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteChartSeriesAsync(DeleteChartSeriesRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return deleteChartSeriesAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteFile
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFile(String path, String storageName, String versionId) throws ApiException {
        try {
            deleteFileWithHttpInfo(path, storageName, versionId);
        } catch (NeedRepeatRequestException e) {
            deleteFileWithHttpInfo(path, storageName, versionId);
        }
    }

    /**
     * Delete file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileCall(path, storageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete file (asynchronously)
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileAsync(String path, String storageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for deleteFile
     * @param request Request for deleteFile. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteFileCall(DeleteFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteFileCall(request.getPath(), request.getStorageName(), request.getVersionId(), progressListener, progressRequestListener);
    }

    /**
     * Delete file
     * 
     * @param request Request for deleteFile. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void deleteFile(DeleteFileRequest request) throws ApiException {
        deleteFile(request.getPath(), request.getStorageName(), request.getVersionId());
    }

    /**
     * Delete file
     * 
     * @param request Request for deleteFile. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteFileWithHttpInfo(DeleteFileRequest request) throws ApiException {
        return deleteFileWithHttpInfo(request.getPath(), request.getStorageName(), request.getVersionId());
    }

    /**
     * Delete file (asynchronously)
     * 
     * @param request Request for deleteFile. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteFileAsync(DeleteFileRequest request, final ApiCallback<Void> callback) throws ApiException {
        return deleteFileAsync(request.getPath(), request.getStorageName(), request.getVersionId(), callback);
    }
    /**
     * Build call for deleteFolder
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFolderCall(String path, String storageName, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "recursive", recursive);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFolder(String path, String storageName, Boolean recursive) throws ApiException {
        try {
            deleteFolderWithHttpInfo(path, storageName, recursive);
        } catch (NeedRepeatRequestException e) {
            deleteFolderWithHttpInfo(path, storageName, recursive);
        }
    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFolderWithHttpInfo(String path, String storageName, Boolean recursive) throws ApiException {
        com.squareup.okhttp.Call call = deleteFolderCall(path, storageName, recursive, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete folder (asynchronously)
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFolderAsync(String path, String storageName, Boolean recursive, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFolderCall(path, storageName, recursive, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for deleteFolder
     * @param request Request for deleteFolder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteFolderCall(DeleteFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteFolderCall(request.getPath(), request.getStorageName(), request.getRecursive(), progressListener, progressRequestListener);
    }

    /**
     * Delete folder
     * 
     * @param request Request for deleteFolder. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void deleteFolder(DeleteFolderRequest request) throws ApiException {
        deleteFolder(request.getPath(), request.getStorageName(), request.getRecursive());
    }

    /**
     * Delete folder
     * 
     * @param request Request for deleteFolder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteFolderWithHttpInfo(DeleteFolderRequest request) throws ApiException {
        return deleteFolderWithHttpInfo(request.getPath(), request.getStorageName(), request.getRecursive());
    }

    /**
     * Delete folder (asynchronously)
     * 
     * @param request Request for deleteFolder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteFolderAsync(DeleteFolderRequest request, final ApiCallback<Void> callback) throws ApiException {
        return deleteFolderAsync(request.getPath(), request.getStorageName(), request.getRecursive(), callback);
    }
    /**
     * Build call for deleteNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slide deleteNotesSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slide> resp = deleteNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slide> resp = deleteNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slide> deleteNotesSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Slide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteNotesSlide
     * @param request Request for deleteNotesSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideCall(DeleteNotesSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteNotesSlideCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove notes slide.
     * 
     * @param request Request for deleteNotesSlide. (required)
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slide deleteNotesSlide(DeleteNotesSlideRequest request) throws ApiException {
        return deleteNotesSlide(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove notes slide.
     * 
     * @param request Request for deleteNotesSlide. (required)
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slide> deleteNotesSlideWithHttpInfo(DeleteNotesSlideRequest request) throws ApiException {
        return deleteNotesSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove notes slide. (asynchronously)
     * 
     * @param request Request for deleteNotesSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideAsync(DeleteNotesSlideRequest request, final ApiCallback<Slide> callback) throws ApiException {
        return deleteNotesSlideAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteNotesSlideParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlideParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlideParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteNotesSlideParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteNotesSlideParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteNotesSlideParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteNotesSlideParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlideParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlideParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteNotesSlideParagraph
     * @param request Request for deleteNotesSlideParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideParagraphCall(DeleteNotesSlideParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteNotesSlideParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a paragraph.
     * 
     * @param request Request for deleteNotesSlideParagraph. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs deleteNotesSlideParagraph(DeleteNotesSlideParagraphRequest request) throws ApiException {
        return deleteNotesSlideParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a paragraph.
     * 
     * @param request Request for deleteNotesSlideParagraph. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> deleteNotesSlideParagraphWithHttpInfo(DeleteNotesSlideParagraphRequest request) throws ApiException {
        return deleteNotesSlideParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a paragraph. (asynchronously)
     * 
     * @param request Request for deleteNotesSlideParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideParagraphAsync(DeleteNotesSlideParagraphRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return deleteNotesSlideParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteNotesSlideParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideParagraphsCall(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlideParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlideParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteNotesSlideParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "paragraphs", paragraphs);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteNotesSlideParagraphs(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteNotesSlideParagraphsWithHttpInfo(name, slideIndex, shapeIndex, paragraphs, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteNotesSlideParagraphsWithHttpInfo(name, slideIndex, shapeIndex, paragraphs, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteNotesSlideParagraphsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlideParagraphsCall(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of paragraphs. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideParagraphsAsync(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlideParagraphsCall(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteNotesSlideParagraphs
     * @param request Request for deleteNotesSlideParagraphs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideParagraphsCall(DeleteNotesSlideParagraphsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteNotesSlideParagraphsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param request Request for deleteNotesSlideParagraphs. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs deleteNotesSlideParagraphs(DeleteNotesSlideParagraphsRequest request) throws ApiException {
        return deleteNotesSlideParagraphs(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param request Request for deleteNotesSlideParagraphs. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> deleteNotesSlideParagraphsWithHttpInfo(DeleteNotesSlideParagraphsRequest request) throws ApiException {
        return deleteNotesSlideParagraphsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of paragraphs. (asynchronously)
     * 
     * @param request Request for deleteNotesSlideParagraphs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideParagraphsAsync(DeleteNotesSlideParagraphsRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return deleteNotesSlideParagraphsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteNotesSlidePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlidePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlidePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlidePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteNotesSlidePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteNotesSlidePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling deleteNotesSlidePortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deleteNotesSlidePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = deleteNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deleteNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deleteNotesSlidePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlidePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteNotesSlidePortion
     * @param request Request for deleteNotesSlidePortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlidePortionCall(DeleteNotesSlidePortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteNotesSlidePortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a portion.
     * 
     * @param request Request for deleteNotesSlidePortion. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions deleteNotesSlidePortion(DeleteNotesSlidePortionRequest request) throws ApiException {
        return deleteNotesSlidePortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a portion.
     * 
     * @param request Request for deleteNotesSlidePortion. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> deleteNotesSlidePortionWithHttpInfo(DeleteNotesSlidePortionRequest request) throws ApiException {
        return deleteNotesSlidePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a portion. (asynchronously)
     * 
     * @param request Request for deleteNotesSlidePortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlidePortionAsync(DeleteNotesSlidePortionRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return deleteNotesSlidePortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteNotesSlidePortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlidePortionsCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlidePortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlidePortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteNotesSlidePortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteNotesSlidePortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "portions", portions);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deleteNotesSlidePortions(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = deleteNotesSlidePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deleteNotesSlidePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deleteNotesSlidePortionsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlidePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of portions. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlidePortionsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlidePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteNotesSlidePortions
     * @param request Request for deleteNotesSlidePortions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlidePortionsCall(DeleteNotesSlidePortionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteNotesSlidePortionsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of portions.
     * 
     * @param request Request for deleteNotesSlidePortions. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions deleteNotesSlidePortions(DeleteNotesSlidePortionsRequest request) throws ApiException {
        return deleteNotesSlidePortions(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of portions.
     * 
     * @param request Request for deleteNotesSlidePortions. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> deleteNotesSlidePortionsWithHttpInfo(DeleteNotesSlidePortionsRequest request) throws ApiException {
        return deleteNotesSlidePortionsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of portions. (asynchronously)
     * 
     * @param request Request for deleteNotesSlidePortions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlidePortionsAsync(DeleteNotesSlidePortionsRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return deleteNotesSlidePortionsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteNotesSlideShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideShapeCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteNotesSlideShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteNotesSlideShape(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteNotesSlideShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlideShapeCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideShapeAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlideShapeCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteNotesSlideShape
     * @param request Request for deleteNotesSlideShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideShapeCall(DeleteNotesSlideShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteNotesSlideShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a shape.
     * 
     * @param request Request for deleteNotesSlideShape. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes deleteNotesSlideShape(DeleteNotesSlideShapeRequest request) throws ApiException {
        return deleteNotesSlideShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a shape.
     * 
     * @param request Request for deleteNotesSlideShape. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> deleteNotesSlideShapeWithHttpInfo(DeleteNotesSlideShapeRequest request) throws ApiException {
        return deleteNotesSlideShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a shape. (asynchronously)
     * 
     * @param request Request for deleteNotesSlideShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideShapeAsync(DeleteNotesSlideShapeRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return deleteNotesSlideShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteNotesSlideShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideShapesCall(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlideShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlideShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteNotesSlideShapes(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteNotesSlideShapesWithHttpInfo(name, slideIndex, shapes, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteNotesSlideShapesWithHttpInfo(name, slideIndex, shapes, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteNotesSlideShapesWithHttpInfo(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlideShapesCall(name, slideIndex, shapes, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of shapes. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideShapesAsync(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlideShapesCall(name, slideIndex, shapes, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteNotesSlideShapes
     * @param request Request for deleteNotesSlideShapes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideShapesCall(DeleteNotesSlideShapesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteNotesSlideShapesCall(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of shapes.
     * 
     * @param request Request for deleteNotesSlideShapes. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes deleteNotesSlideShapes(DeleteNotesSlideShapesRequest request) throws ApiException {
        return deleteNotesSlideShapes(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of shapes.
     * 
     * @param request Request for deleteNotesSlideShapes. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> deleteNotesSlideShapesWithHttpInfo(DeleteNotesSlideShapesRequest request) throws ApiException {
        return deleteNotesSlideShapesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of shapes. (asynchronously)
     * 
     * @param request Request for deleteNotesSlideShapes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteNotesSlideShapesAsync(DeleteNotesSlideShapesRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return deleteNotesSlideShapesAsync(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteParagraph
     * @param request Request for deleteParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteParagraphCall(DeleteParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a paragraph.
     * 
     * @param request Request for deleteParagraph. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs deleteParagraph(DeleteParagraphRequest request) throws ApiException {
        return deleteParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a paragraph.
     * 
     * @param request Request for deleteParagraph. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> deleteParagraphWithHttpInfo(DeleteParagraphRequest request) throws ApiException {
        return deleteParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a paragraph. (asynchronously)
     * 
     * @param request Request for deleteParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteParagraphAsync(DeleteParagraphRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return deleteParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphsCall(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "paragraphs", paragraphs);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteParagraphs(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteParagraphsWithHttpInfo(name, slideIndex, shapeIndex, paragraphs, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteParagraphsWithHttpInfo(name, slideIndex, shapeIndex, paragraphs, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteParagraphsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteParagraphsCall(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of paragraphs. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphsAsync(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphsCall(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteParagraphs
     * @param request Request for deleteParagraphs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteParagraphsCall(DeleteParagraphsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteParagraphsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param request Request for deleteParagraphs. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs deleteParagraphs(DeleteParagraphsRequest request) throws ApiException {
        return deleteParagraphs(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param request Request for deleteParagraphs. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> deleteParagraphsWithHttpInfo(DeleteParagraphsRequest request) throws ApiException {
        return deleteParagraphsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of paragraphs. (asynchronously)
     * 
     * @param request Request for deleteParagraphs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteParagraphsAsync(DeleteParagraphsRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return deleteParagraphsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deletePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deletePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deletePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deletePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling deletePortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deletePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = deletePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deletePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deletePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deletePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deletePortion
     * @param request Request for deletePortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deletePortionCall(DeletePortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deletePortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a portion.
     * 
     * @param request Request for deletePortion. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions deletePortion(DeletePortionRequest request) throws ApiException {
        return deletePortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a portion.
     * 
     * @param request Request for deletePortion. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> deletePortionWithHttpInfo(DeletePortionRequest request) throws ApiException {
        return deletePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a portion. (asynchronously)
     * 
     * @param request Request for deletePortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deletePortionAsync(DeletePortionRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return deletePortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deletePortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortionsCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deletePortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deletePortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deletePortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "portions", portions);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deletePortions(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = deletePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deletePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deletePortionsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deletePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of portions. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortionsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deletePortions
     * @param request Request for deletePortions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deletePortionsCall(DeletePortionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deletePortionsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of portions.
     * 
     * @param request Request for deletePortions. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions deletePortions(DeletePortionsRequest request) throws ApiException {
        return deletePortions(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of portions.
     * 
     * @param request Request for deletePortions. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> deletePortionsWithHttpInfo(DeletePortionsRequest request) throws ApiException {
        return deletePortionsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of portions. (asynchronously)
     * 
     * @param request Request for deletePortions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deletePortionsAsync(DeletePortionsRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return deletePortionsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSection
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSectionCall(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSection(Async)");
        }
        // verify the required parameter 'sectionIndex' is set
        if (sectionIndex == null) {
            throw new ApiException("Missing the required parameter 'sectionIndex' when calling deleteSection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections/{sectionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "sectionIndex" + "\\}", apiClient.objectToString(sectionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "withSlides", withSlides);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a presentation section.
     * 
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections deleteSection(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = deleteSectionWithHttpInfo(name, sectionIndex, withSlides, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = deleteSectionWithHttpInfo(name, sectionIndex, withSlides, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a presentation section.
     * 
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> deleteSectionWithHttpInfo(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSectionCall(name, sectionIndex, withSlides, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a presentation section. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSectionAsync(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSectionCall(name, sectionIndex, withSlides, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSection
     * @param request Request for deleteSection. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSectionCall(DeleteSectionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSectionCall(request.getName(), request.getSectionIndex(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete a presentation section.
     * 
     * @param request Request for deleteSection. (required)
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Sections deleteSection(DeleteSectionRequest request) throws ApiException {
        return deleteSection(request.getName(), request.getSectionIndex(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a presentation section.
     * 
     * @param request Request for deleteSection. (required)
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Sections> deleteSectionWithHttpInfo(DeleteSectionRequest request) throws ApiException {
        return deleteSectionWithHttpInfo(request.getName(), request.getSectionIndex(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a presentation section. (asynchronously)
     * 
     * @param request Request for deleteSection. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSectionAsync(DeleteSectionRequest request, final ApiCallback<Sections> callback) throws ApiException {
        return deleteSectionAsync(request.getName(), request.getSectionIndex(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSections
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSectionsCall(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSections(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sections", sections);
        apiClient.addQueryParameter(queryParams, "withSlides", withSlides);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete presentation sections.
     * 
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections deleteSections(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = deleteSectionsWithHttpInfo(name, sections, withSlides, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = deleteSectionsWithHttpInfo(name, sections, withSlides, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete presentation sections.
     * 
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> deleteSectionsWithHttpInfo(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSectionsCall(name, sections, withSlides, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete presentation sections. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSectionsAsync(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSectionsCall(name, sections, withSlides, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSections
     * @param request Request for deleteSections. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSectionsCall(DeleteSectionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSectionsCall(request.getName(), request.getSections(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete presentation sections.
     * 
     * @param request Request for deleteSections. (required)
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Sections deleteSections(DeleteSectionsRequest request) throws ApiException {
        return deleteSections(request.getName(), request.getSections(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete presentation sections.
     * 
     * @param request Request for deleteSections. (required)
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Sections> deleteSectionsWithHttpInfo(DeleteSectionsRequest request) throws ApiException {
        return deleteSectionsWithHttpInfo(request.getName(), request.getSections(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete presentation sections. (asynchronously)
     * 
     * @param request Request for deleteSections. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSectionsAsync(DeleteSectionsRequest request, final ApiCallback<Sections> callback) throws ApiException {
        return deleteSectionsAsync(request.getName(), request.getSections(), request.getWithSlides(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideAnimation
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideAnimation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove animation from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimation(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove animation from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove animation from a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideAnimation
     * @param request Request for deleteSlideAnimation. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationCall(DeleteSlideAnimationRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteAnimationCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove animation from a slide.
     * 
     * @param request Request for deleteSlideAnimation. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation deleteSlideAnimation(DeleteSlideAnimationRequest request) throws ApiException {
        return deleteAnimation(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove animation from a slide.
     * 
     * @param request Request for deleteSlideAnimation. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> deleteSlideAnimationWithHttpInfo(DeleteSlideAnimationRequest request) throws ApiException {
        return deleteAnimationWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove animation from a slide. (asynchronously)
     * 
     * @param request Request for deleteSlideAnimation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationAsync(DeleteSlideAnimationRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return deleteAnimationAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationEffectCall(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling deleteSlideAnimationEffect(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an effect from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationEffect(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an effect from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationEffectWithHttpInfo(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationEffectCall(name, slideIndex, effectIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an effect from slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationEffectAsync(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationEffectCall(name, slideIndex, effectIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideAnimationEffect
     * @param request Request for deleteSlideAnimationEffect. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationEffectCall(DeleteSlideAnimationEffectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteAnimationEffectCall(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove an effect from slide animation.
     * 
     * @param request Request for deleteSlideAnimationEffect. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation deleteSlideAnimationEffect(DeleteSlideAnimationEffectRequest request) throws ApiException {
        return deleteAnimationEffect(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove an effect from slide animation.
     * 
     * @param request Request for deleteSlideAnimationEffect. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> deleteSlideAnimationEffectWithHttpInfo(DeleteSlideAnimationEffectRequest request) throws ApiException {
        return deleteAnimationEffectWithHttpInfo(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove an effect from slide animation. (asynchronously)
     * 
     * @param request Request for deleteSlideAnimationEffect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationEffectAsync(DeleteSlideAnimationEffectRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return deleteAnimationEffectAsync(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideAnimationInteractiveSequence
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceCall(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling deleteSlideAnimationInteractiveSequence(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an interactive sequence from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationInteractiveSequence(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequenceIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequenceIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an interactive sequence from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationInteractiveSequenceWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceCall(name, slideIndex, sequenceIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an interactive sequence from slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceAsync(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceCall(name, slideIndex, sequenceIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideAnimationInteractiveSequence
     * @param request Request for deleteSlideAnimationInteractiveSequence. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationInteractiveSequenceCall(DeleteSlideAnimationInteractiveSequenceRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteAnimationInteractiveSequenceCall(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove an interactive sequence from slide animation.
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequence. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation deleteSlideAnimationInteractiveSequence(DeleteSlideAnimationInteractiveSequenceRequest request) throws ApiException {
        return deleteAnimationInteractiveSequence(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove an interactive sequence from slide animation.
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequence. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> deleteSlideAnimationInteractiveSequenceWithHttpInfo(DeleteSlideAnimationInteractiveSequenceRequest request) throws ApiException {
        return deleteAnimationInteractiveSequenceWithHttpInfo(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove an interactive sequence from slide animation. (asynchronously)
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequence. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationInteractiveSequenceAsync(DeleteSlideAnimationInteractiveSequenceRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return deleteAnimationInteractiveSequenceAsync(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling deleteSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling deleteSlideAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationInteractiveSequenceEffect(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an effect from slide animation interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideAnimationInteractiveSequenceEffect
     * @param request Request for deleteSlideAnimationInteractiveSequenceEffect. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationInteractiveSequenceEffectCall(DeleteSlideAnimationInteractiveSequenceEffectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteAnimationInteractiveSequenceEffectCall(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequenceEffect. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation deleteSlideAnimationInteractiveSequenceEffect(DeleteSlideAnimationInteractiveSequenceEffectRequest request) throws ApiException {
        return deleteAnimationInteractiveSequenceEffect(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequenceEffect. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> deleteSlideAnimationInteractiveSequenceEffectWithHttpInfo(DeleteSlideAnimationInteractiveSequenceEffectRequest request) throws ApiException {
        return deleteAnimationInteractiveSequenceEffectWithHttpInfo(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove an effect from slide animation interactive sequence. (asynchronously)
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequenceEffect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationInteractiveSequenceEffectAsync(DeleteSlideAnimationInteractiveSequenceEffectRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return deleteAnimationInteractiveSequenceEffectAsync(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideAnimationInteractiveSequences
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequencesCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideAnimationInteractiveSequences(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideAnimationInteractiveSequences(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clear all interactive sequences from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationInteractiveSequences(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequencesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequencesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clear all interactive sequences from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationInteractiveSequencesWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequencesCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clear all interactive sequences from slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequencesAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequencesCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideAnimationInteractiveSequences
     * @param request Request for deleteSlideAnimationInteractiveSequences. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationInteractiveSequencesCall(DeleteSlideAnimationInteractiveSequencesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteAnimationInteractiveSequencesCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Clear all interactive sequences from slide animation.
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequences. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation deleteSlideAnimationInteractiveSequences(DeleteSlideAnimationInteractiveSequencesRequest request) throws ApiException {
        return deleteAnimationInteractiveSequences(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Clear all interactive sequences from slide animation.
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequences. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> deleteSlideAnimationInteractiveSequencesWithHttpInfo(DeleteSlideAnimationInteractiveSequencesRequest request) throws ApiException {
        return deleteAnimationInteractiveSequencesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Clear all interactive sequences from slide animation. (asynchronously)
     * 
     * @param request Request for deleteSlideAnimationInteractiveSequences. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationInteractiveSequencesAsync(DeleteSlideAnimationInteractiveSequencesRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return deleteAnimationInteractiveSequencesAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideAnimationMainSequence
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationMainSequenceCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideAnimationMainSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideAnimationMainSequence(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clear main sequence in slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationMainSequence(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationMainSequenceWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationMainSequenceWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clear main sequence in slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationMainSequenceWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationMainSequenceCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clear main sequence in slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationMainSequenceAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationMainSequenceCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideAnimationMainSequence
     * @param request Request for deleteSlideAnimationMainSequence. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationMainSequenceCall(DeleteSlideAnimationMainSequenceRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteAnimationMainSequenceCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Clear main sequence in slide animation.
     * 
     * @param request Request for deleteSlideAnimationMainSequence. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation deleteSlideAnimationMainSequence(DeleteSlideAnimationMainSequenceRequest request) throws ApiException {
        return deleteAnimationMainSequence(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Clear main sequence in slide animation.
     * 
     * @param request Request for deleteSlideAnimationMainSequence. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> deleteSlideAnimationMainSequenceWithHttpInfo(DeleteSlideAnimationMainSequenceRequest request) throws ApiException {
        return deleteAnimationMainSequenceWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Clear main sequence in slide animation. (asynchronously)
     * 
     * @param request Request for deleteSlideAnimationMainSequence. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideAnimationMainSequenceAsync(DeleteSlideAnimationMainSequenceRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return deleteAnimationMainSequenceAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideByIndex
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideByIndex(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideByIndex(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a presentation slide by index.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides deleteSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = deleteSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = deleteSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a presentation slide by index.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> deleteSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a presentation slide by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideByIndex
     * @param request Request for deleteSlideByIndex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideByIndexCall(DeleteSlideByIndexRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSlideCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete a presentation slide by index.
     * 
     * @param request Request for deleteSlideByIndex. (required)
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slides deleteSlideByIndex(DeleteSlideByIndexRequest request) throws ApiException {
        return deleteSlide(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a presentation slide by index.
     * 
     * @param request Request for deleteSlideByIndex. (required)
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slides> deleteSlideByIndexWithHttpInfo(DeleteSlideByIndexRequest request) throws ApiException {
        return deleteSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete a presentation slide by index. (asynchronously)
     * 
     * @param request Request for deleteSlideByIndex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideByIndexAsync(DeleteSlideByIndexRequest request, final ApiCallback<Slides> callback) throws ApiException {
        return deleteSlideAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShapeCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSlideShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteShape(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteShapeCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShapeAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShapeCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideShape
     * @param request Request for deleteSlideShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideShapeCall(DeleteSlideShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a shape.
     * 
     * @param request Request for deleteSlideShape. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes deleteSlideShape(DeleteSlideShapeRequest request) throws ApiException {
        return deleteShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a shape.
     * 
     * @param request Request for deleteSlideShape. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> deleteSlideShapeWithHttpInfo(DeleteSlideShapeRequest request) throws ApiException {
        return deleteShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a shape. (asynchronously)
     * 
     * @param request Request for deleteSlideShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideShapeAsync(DeleteSlideShapeRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return deleteShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShapesCall(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteShapes(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteShapesWithHttpInfo(name, slideIndex, shapes, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteShapesWithHttpInfo(name, slideIndex, shapes, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteShapesWithHttpInfo(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteShapesCall(name, slideIndex, shapes, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of shapes. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShapesAsync(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShapesCall(name, slideIndex, shapes, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideShapes
     * @param request Request for deleteSlideShapes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideShapesCall(DeleteSlideShapesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteShapesCall(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of shapes.
     * 
     * @param request Request for deleteSlideShapes. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes deleteSlideShapes(DeleteSlideShapesRequest request) throws ApiException {
        return deleteShapes(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of shapes.
     * 
     * @param request Request for deleteSlideShapes. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> deleteSlideShapesWithHttpInfo(DeleteSlideShapesRequest request) throws ApiException {
        return deleteShapesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of shapes. (asynchronously)
     * 
     * @param request Request for deleteSlideShapes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideShapesAsync(DeleteSlideShapesRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return deleteShapesAsync(request.getName(), request.getSlideIndex(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideSubshape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapeCall(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideSubshape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideSubshape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSlideSubshape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a shape (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteSubshape(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a shape (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteSubshapeWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubshapeCall(name, slideIndex, path, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a shape (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapeAsync(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubshapeCall(name, slideIndex, path, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideSubshape
     * @param request Request for deleteSlideSubshape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideSubshapeCall(DeleteSlideSubshapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSubshapeCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a shape (for smart art and group shapes).
     * 
     * @param request Request for deleteSlideSubshape. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes deleteSlideSubshape(DeleteSlideSubshapeRequest request) throws ApiException {
        return deleteSubshape(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a shape (for smart art and group shapes).
     * 
     * @param request Request for deleteSlideSubshape. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> deleteSlideSubshapeWithHttpInfo(DeleteSlideSubshapeRequest request) throws ApiException {
        return deleteSubshapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a shape (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for deleteSlideSubshape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideSubshapeAsync(DeleteSlideSubshapeRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return deleteSubshapeAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlideSubshapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapesCall(String name, Integer slideIndex, String path, List<Integer> shapes, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideSubshapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideSubshapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of shapes (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteSubshapes(String name, Integer slideIndex, String path, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteSubshapesWithHttpInfo(name, slideIndex, path, shapes, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteSubshapesWithHttpInfo(name, slideIndex, path, shapes, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of shapes (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteSubshapesWithHttpInfo(String name, Integer slideIndex, String path, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubshapesCall(name, slideIndex, path, shapes, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of shapes (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapesAsync(String name, Integer slideIndex, String path, List<Integer> shapes, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubshapesCall(name, slideIndex, path, shapes, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlideSubshapes
     * @param request Request for deleteSlideSubshapes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideSubshapesCall(DeleteSlideSubshapesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSubshapesCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of shapes (for smart art and group shapes).
     * 
     * @param request Request for deleteSlideSubshapes. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes deleteSlideSubshapes(DeleteSlideSubshapesRequest request) throws ApiException {
        return deleteSubshapes(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of shapes (for smart art and group shapes).
     * 
     * @param request Request for deleteSlideSubshapes. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> deleteSlideSubshapesWithHttpInfo(DeleteSlideSubshapesRequest request) throws ApiException {
        return deleteSubshapesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of shapes (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for deleteSlideSubshapes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlideSubshapesAsync(DeleteSlideSubshapesRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return deleteSubshapesAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlidesCleanSlidesList
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSlidesCall(String name, List<Integer> slides, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlidesCleanSlidesList(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "slides", slides);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete presentation slides.
     * 
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides deleteSlides(String name, List<Integer> slides, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = deleteSlidesWithHttpInfo(name, slides, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = deleteSlidesWithHttpInfo(name, slides, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete presentation slides.
     * 
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> deleteSlidesWithHttpInfo(String name, List<Integer> slides, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSlidesCall(name, slides, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete presentation slides. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSlidesAsync(String name, List<Integer> slides, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSlidesCall(name, slides, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlidesCleanSlidesList
     * @param request Request for deleteSlidesCleanSlidesList. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesCleanSlidesListCall(DeleteSlidesCleanSlidesListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSlidesCall(request.getName(), request.getSlides(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete presentation slides.
     * 
     * @param request Request for deleteSlidesCleanSlidesList. (required)
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slides deleteSlidesCleanSlidesList(DeleteSlidesCleanSlidesListRequest request) throws ApiException {
        return deleteSlides(request.getName(), request.getSlides(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete presentation slides.
     * 
     * @param request Request for deleteSlidesCleanSlidesList. (required)
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slides> deleteSlidesCleanSlidesListWithHttpInfo(DeleteSlidesCleanSlidesListRequest request) throws ApiException {
        return deleteSlidesWithHttpInfo(request.getName(), request.getSlides(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete presentation slides. (asynchronously)
     * 
     * @param request Request for deleteSlidesCleanSlidesList. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesCleanSlidesListAsync(DeleteSlidesCleanSlidesListRequest request, final ApiCallback<Slides> callback) throws ApiException {
        return deleteSlidesAsync(request.getName(), request.getSlides(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlidesDocumentProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlidesDocumentProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clean document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties deleteDocumentProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clean document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> deleteDocumentPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clean document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlidesDocumentProperties
     * @param request Request for deleteSlidesDocumentProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesDocumentPropertiesCall(DeleteSlidesDocumentPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteDocumentPropertiesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Clean document properties.
     * 
     * @param request Request for deleteSlidesDocumentProperties. (required)
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentProperties deleteSlidesDocumentProperties(DeleteSlidesDocumentPropertiesRequest request) throws ApiException {
        return deleteDocumentProperties(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Clean document properties.
     * 
     * @param request Request for deleteSlidesDocumentProperties. (required)
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentProperties> deleteSlidesDocumentPropertiesWithHttpInfo(DeleteSlidesDocumentPropertiesRequest request) throws ApiException {
        return deleteDocumentPropertiesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Clean document properties. (asynchronously)
     * 
     * @param request Request for deleteSlidesDocumentProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesDocumentPropertiesAsync(DeleteSlidesDocumentPropertiesRequest request, final ApiCallback<DocumentProperties> callback) throws ApiException {
        return deleteDocumentPropertiesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlidesDocumentProperty
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertyCall(String name, String propertyName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlidesDocumentProperty(Async)");
        }
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deleteSlidesDocumentProperty(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "propertyName" + "\\}", apiClient.objectToString(propertyName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties deleteDocumentProperty(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> deleteDocumentPropertyWithHttpInfo(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentPropertyCall(name, propertyName, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete document property. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertyAsync(String name, String propertyName, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentPropertyCall(name, propertyName, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlidesDocumentProperty
     * @param request Request for deleteSlidesDocumentProperty. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesDocumentPropertyCall(DeleteSlidesDocumentPropertyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteDocumentPropertyCall(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Delete document property.
     * 
     * @param request Request for deleteSlidesDocumentProperty. (required)
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentProperties deleteSlidesDocumentProperty(DeleteSlidesDocumentPropertyRequest request) throws ApiException {
        return deleteDocumentProperty(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete document property.
     * 
     * @param request Request for deleteSlidesDocumentProperty. (required)
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentProperties> deleteSlidesDocumentPropertyWithHttpInfo(DeleteSlidesDocumentPropertyRequest request) throws ApiException {
        return deleteDocumentPropertyWithHttpInfo(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Delete document property. (asynchronously)
     * 
     * @param request Request for deleteSlidesDocumentProperty. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesDocumentPropertyAsync(DeleteSlidesDocumentPropertyRequest request, final ApiCallback<DocumentProperties> callback) throws ApiException {
        return deleteDocumentPropertyAsync(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSlidesSlideBackground
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBackgroundCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlidesSlideBackground(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlidesSlideBackground(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove background from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground deleteBackground(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = deleteBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = deleteBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove background from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> deleteBackgroundWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteBackgroundCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove background from a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBackgroundAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBackgroundCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSlidesSlideBackground
     * @param request Request for deleteSlidesSlideBackground. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesSlideBackgroundCall(DeleteSlidesSlideBackgroundRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteBackgroundCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove background from a slide.
     * 
     * @param request Request for deleteSlidesSlideBackground. (required)
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideBackground deleteSlidesSlideBackground(DeleteSlidesSlideBackgroundRequest request) throws ApiException {
        return deleteBackground(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove background from a slide.
     * 
     * @param request Request for deleteSlidesSlideBackground. (required)
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideBackground> deleteSlidesSlideBackgroundWithHttpInfo(DeleteSlidesSlideBackgroundRequest request) throws ApiException {
        return deleteBackgroundWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove background from a slide. (asynchronously)
     * 
     * @param request Request for deleteSlidesSlideBackground. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSlidesSlideBackgroundAsync(DeleteSlidesSlideBackgroundRequest request, final ApiCallback<SlideBackground> callback) throws ApiException {
        return deleteBackgroundAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSubshapeParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapeParagraphCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSubshapeParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSubshapeParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSubshapeParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteSubshapeParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a paragraph (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteSubshapeParagraph(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a paragraph (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteSubshapeParagraphWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubshapeParagraphCall(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a paragraph (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapeParagraphAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubshapeParagraphCall(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSubshapeParagraph
     * @param request Request for deleteSubshapeParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapeParagraphCall(DeleteSubshapeParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSubshapeParagraphCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a paragraph (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapeParagraph. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs deleteSubshapeParagraph(DeleteSubshapeParagraphRequest request) throws ApiException {
        return deleteSubshapeParagraph(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a paragraph (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapeParagraph. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> deleteSubshapeParagraphWithHttpInfo(DeleteSubshapeParagraphRequest request) throws ApiException {
        return deleteSubshapeParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a paragraph (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for deleteSubshapeParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapeParagraphAsync(DeleteSubshapeParagraphRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return deleteSubshapeParagraphAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSubshapeParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapeParagraphsCall(String name, Integer slideIndex, String path, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSubshapeParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSubshapeParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSubshapeParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "paragraphs", paragraphs);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteSubshapeParagraphs(String name, Integer slideIndex, String path, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteSubshapeParagraphsWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphs, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteSubshapeParagraphsWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphs, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteSubshapeParagraphsWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubshapeParagraphsCall(name, slideIndex, path, shapeIndex, paragraphs, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapeParagraphsAsync(String name, Integer slideIndex, String path, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubshapeParagraphsCall(name, slideIndex, path, shapeIndex, paragraphs, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSubshapeParagraphs
     * @param request Request for deleteSubshapeParagraphs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapeParagraphsCall(DeleteSubshapeParagraphsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSubshapeParagraphsCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapeParagraphs. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs deleteSubshapeParagraphs(DeleteSubshapeParagraphsRequest request) throws ApiException {
        return deleteSubshapeParagraphs(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapeParagraphs. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> deleteSubshapeParagraphsWithHttpInfo(DeleteSubshapeParagraphsRequest request) throws ApiException {
        return deleteSubshapeParagraphsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of paragraphs (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for deleteSubshapeParagraphs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapeParagraphsAsync(DeleteSubshapeParagraphsRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return deleteSubshapeParagraphsAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphs(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSubshapePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapePortionCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSubshapePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSubshapePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSubshapePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteSubshapePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling deleteSubshapePortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a portion (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deleteSubshapePortion(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = deleteSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deleteSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a portion (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deleteSubshapePortionWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a portion (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapePortionAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSubshapePortion
     * @param request Request for deleteSubshapePortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapePortionCall(DeleteSubshapePortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSubshapePortionCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a portion (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapePortion. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions deleteSubshapePortion(DeleteSubshapePortionRequest request) throws ApiException {
        return deleteSubshapePortion(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a portion (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapePortion. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> deleteSubshapePortionWithHttpInfo(DeleteSubshapePortionRequest request) throws ApiException {
        return deleteSubshapePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a portion (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for deleteSubshapePortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapePortionAsync(DeleteSubshapePortionRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return deleteSubshapePortionAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for deleteSubshapePortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapePortionsCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSubshapePortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSubshapePortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSubshapePortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteSubshapePortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "portions", portions);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of portions (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deleteSubshapePortions(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = deleteSubshapePortionsWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portions, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deleteSubshapePortionsWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portions, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove a range of portions (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deleteSubshapePortionsWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubshapePortionsCall(name, slideIndex, path, shapeIndex, paragraphIndex, portions, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of portions (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubshapePortionsAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubshapePortionsCall(name, slideIndex, path, shapeIndex, paragraphIndex, portions, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for deleteSubshapePortions
     * @param request Request for deleteSubshapePortions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapePortionsCall(DeleteSubshapePortionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return deleteSubshapePortionsCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Remove a range of portions (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapePortions. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions deleteSubshapePortions(DeleteSubshapePortionsRequest request) throws ApiException {
        return deleteSubshapePortions(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of portions (for smart art and group shapes).
     * 
     * @param request Request for deleteSubshapePortions. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> deleteSubshapePortionsWithHttpInfo(DeleteSubshapePortionsRequest request) throws ApiException {
        return deleteSubshapePortionsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Remove a range of portions (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for deleteSubshapePortions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call deleteSubshapePortionsAsync(DeleteSubshapePortionsRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return deleteSubshapePortionsAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortions(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for downloadFile
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Download file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadFile(String path, String storageName, String versionId) throws ApiException {
        try {
            ApiResponse<File> resp = downloadFileWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadFileWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        }
    }

    /**
     * Download file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileCall(path, storageName, versionId, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Download file (asynchronously)
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(String path, String storageName, String versionId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for downloadFile
     * @param request Request for downloadFile. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call downloadFileCall(DownloadFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadFileCall(request.getPath(), request.getStorageName(), request.getVersionId(), progressListener, progressRequestListener);
    }

    /**
     * Download file
     * 
     * @param request Request for downloadFile. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File downloadFile(DownloadFileRequest request) throws ApiException {
        return downloadFile(request.getPath(), request.getStorageName(), request.getVersionId());
    }

    /**
     * Download file
     * 
     * @param request Request for downloadFile. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> downloadFileWithHttpInfo(DownloadFileRequest request) throws ApiException {
        return downloadFileWithHttpInfo(request.getPath(), request.getStorageName(), request.getVersionId());
    }

    /**
     * Download file (asynchronously)
     * 
     * @param request Request for downloadFile. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call downloadFileAsync(DownloadFileRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadFileAsync(request.getPath(), request.getStorageName(), request.getVersionId(), callback);
    }
    /**
     * Build call for getDiscUsage
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/disc"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name 
     * @return DiscUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscUsage getDiscUsage(String storageName) throws ApiException {
        try {
            ApiResponse<DiscUsage> resp = getDiscUsageWithHttpInfo(storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DiscUsage> resp = getDiscUsageWithHttpInfo(storageName);
            return resp.getData();
        }
    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name 
     * @return ApiResponse&lt;DiscUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscUsage> getDiscUsageWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getDiscUsageCall(storageName, null, null);
        Type returnType = new TypeToken<DiscUsage>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get disc usage (asynchronously)
     * 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageAsync(String storageName, final ApiCallback<DiscUsage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscUsageCall(storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DiscUsage>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getDiscUsage
     * @param request Request for getDiscUsage. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getDiscUsageCall(GetDiscUsageRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getDiscUsageCall(request.getStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Get disc usage
     * 
     * @param request Request for getDiscUsage. (required)
     * @return DiscUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DiscUsage getDiscUsage(GetDiscUsageRequest request) throws ApiException {
        return getDiscUsage(request.getStorageName());
    }

    /**
     * Get disc usage
     * 
     * @param request Request for getDiscUsage. (required)
     * @return ApiResponse&lt;DiscUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DiscUsage> getDiscUsageWithHttpInfo(GetDiscUsageRequest request) throws ApiException {
        return getDiscUsageWithHttpInfo(request.getStorageName());
    }

    /**
     * Get disc usage (asynchronously)
     * 
     * @param request Request for getDiscUsage. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getDiscUsageAsync(GetDiscUsageRequest request, final ApiCallback<DiscUsage> callback) throws ApiException {
        return getDiscUsageAsync(request.getStorageName(), callback);
    }
    /**
     * Build call for getFileVersions
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/version/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @return FileVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileVersions getFileVersions(String path, String storageName) throws ApiException {
        try {
            ApiResponse<FileVersions> resp = getFileVersionsWithHttpInfo(path, storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FileVersions> resp = getFileVersionsWithHttpInfo(path, storageName);
            return resp.getData();
        }
    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @return ApiResponse&lt;FileVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileVersions> getFileVersionsWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFileVersionsCall(path, storageName, null, null);
        Type returnType = new TypeToken<FileVersions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get file versions (asynchronously)
     * 
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsAsync(String path, String storageName, final ApiCallback<FileVersions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileVersionsCall(path, storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FileVersions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getFileVersions
     * @param request Request for getFileVersions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getFileVersionsCall(GetFileVersionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getFileVersionsCall(request.getPath(), request.getStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Get file versions
     * 
     * @param request Request for getFileVersions. (required)
     * @return FileVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public FileVersions getFileVersions(GetFileVersionsRequest request) throws ApiException {
        return getFileVersions(request.getPath(), request.getStorageName());
    }

    /**
     * Get file versions
     * 
     * @param request Request for getFileVersions. (required)
     * @return ApiResponse&lt;FileVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FileVersions> getFileVersionsWithHttpInfo(GetFileVersionsRequest request) throws ApiException {
        return getFileVersionsWithHttpInfo(request.getPath(), request.getStorageName());
    }

    /**
     * Get file versions (asynchronously)
     * 
     * @param request Request for getFileVersions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getFileVersionsAsync(GetFileVersionsRequest request, final ApiCallback<FileVersions> callback) throws ApiException {
        return getFileVersionsAsync(request.getPath(), request.getStorageName(), callback);
    }
    /**
     * Build call for getFilesList
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @return FilesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesList getFilesList(String path, String storageName) throws ApiException {
        try {
            ApiResponse<FilesList> resp = getFilesListWithHttpInfo(path, storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FilesList> resp = getFilesListWithHttpInfo(path, storageName);
            return resp.getData();
        }
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @return ApiResponse&lt;FilesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesList> getFilesListWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListCall(path, storageName, null, null);
        Type returnType = new TypeToken<FilesList>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all files and folders within a folder (asynchronously)
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListAsync(String path, String storageName, final ApiCallback<FilesList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListCall(path, storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FilesList>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getFilesList
     * @param request Request for getFilesList. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getFilesListCall(GetFilesListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getFilesListCall(request.getPath(), request.getStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param request Request for getFilesList. (required)
     * @return FilesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public FilesList getFilesList(GetFilesListRequest request) throws ApiException {
        return getFilesList(request.getPath(), request.getStorageName());
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param request Request for getFilesList. (required)
     * @return ApiResponse&lt;FilesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FilesList> getFilesListWithHttpInfo(GetFilesListRequest request) throws ApiException {
        return getFilesListWithHttpInfo(request.getPath(), request.getStorageName());
    }

    /**
     * Get all files and folders within a folder (asynchronously)
     * 
     * @param request Request for getFilesList. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getFilesListAsync(GetFilesListRequest request, final ApiCallback<FilesList> callback) throws ApiException {
        return getFilesListAsync(request.getPath(), request.getStorageName(), callback);
    }
    /**
     * Build call for getLayoutSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLayoutSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getLayoutSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation layoutSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlide getLayoutSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlide> resp = getLayoutSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlide> resp = getLayoutSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation layoutSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlide> getLayoutSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getLayoutSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation layoutSlide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<LayoutSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLayoutSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getLayoutSlide
     * @param request Request for getLayoutSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getLayoutSlideCall(GetLayoutSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getLayoutSlideCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation layoutSlide info.
     * 
     * @param request Request for getLayoutSlide. (required)
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public LayoutSlide getLayoutSlide(GetLayoutSlideRequest request) throws ApiException {
        return getLayoutSlide(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation layoutSlide info.
     * 
     * @param request Request for getLayoutSlide. (required)
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<LayoutSlide> getLayoutSlideWithHttpInfo(GetLayoutSlideRequest request) throws ApiException {
        return getLayoutSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation layoutSlide info. (asynchronously)
     * 
     * @param request Request for getLayoutSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getLayoutSlideAsync(GetLayoutSlideRequest request, final ApiCallback<LayoutSlide> callback) throws ApiException {
        return getLayoutSlideAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getLayoutSlidesList
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlidesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLayoutSlidesList(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation layoutSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlides getLayoutSlides(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlides> resp = getLayoutSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlides> resp = getLayoutSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation layoutSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlides> getLayoutSlidesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getLayoutSlidesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation layoutSlides info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlidesAsync(String name, String password, String folder, String storage, final ApiCallback<LayoutSlides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLayoutSlidesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getLayoutSlidesList
     * @param request Request for getLayoutSlidesList. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getLayoutSlidesListCall(GetLayoutSlidesListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getLayoutSlidesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation layoutSlides info.
     * 
     * @param request Request for getLayoutSlidesList. (required)
     * @return LayoutSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public LayoutSlides getLayoutSlidesList(GetLayoutSlidesListRequest request) throws ApiException {
        return getLayoutSlides(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation layoutSlides info.
     * 
     * @param request Request for getLayoutSlidesList. (required)
     * @return ApiResponse&lt;LayoutSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<LayoutSlides> getLayoutSlidesListWithHttpInfo(GetLayoutSlidesListRequest request) throws ApiException {
        return getLayoutSlidesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation layoutSlides info. (asynchronously)
     * 
     * @param request Request for getLayoutSlidesList. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getLayoutSlidesListAsync(GetLayoutSlidesListRequest request, final ApiCallback<LayoutSlides> callback) throws ApiException {
        return getLayoutSlidesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getMasterSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMasterSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMasterSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getMasterSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/masterSlides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation masterSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return MasterSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MasterSlide getMasterSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<MasterSlide> resp = getMasterSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<MasterSlide> resp = getMasterSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation masterSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;MasterSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MasterSlide> getMasterSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getMasterSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation masterSlide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMasterSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<MasterSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMasterSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getMasterSlide
     * @param request Request for getMasterSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getMasterSlideCall(GetMasterSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getMasterSlideCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation masterSlide info.
     * 
     * @param request Request for getMasterSlide. (required)
     * @return MasterSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public MasterSlide getMasterSlide(GetMasterSlideRequest request) throws ApiException {
        return getMasterSlide(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation masterSlide info.
     * 
     * @param request Request for getMasterSlide. (required)
     * @return ApiResponse&lt;MasterSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MasterSlide> getMasterSlideWithHttpInfo(GetMasterSlideRequest request) throws ApiException {
        return getMasterSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation masterSlide info. (asynchronously)
     * 
     * @param request Request for getMasterSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getMasterSlideAsync(GetMasterSlideRequest request, final ApiCallback<MasterSlide> callback) throws ApiException {
        return getMasterSlideAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getMasterSlidesList
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMasterSlidesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMasterSlidesList(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/masterSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation masterSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return MasterSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MasterSlides getMasterSlides(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<MasterSlides> resp = getMasterSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<MasterSlides> resp = getMasterSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation masterSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;MasterSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MasterSlides> getMasterSlidesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getMasterSlidesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<MasterSlides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation masterSlides info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMasterSlidesAsync(String name, String password, String folder, String storage, final ApiCallback<MasterSlides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMasterSlidesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<MasterSlides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getMasterSlidesList
     * @param request Request for getMasterSlidesList. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getMasterSlidesListCall(GetMasterSlidesListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getMasterSlidesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation masterSlides info.
     * 
     * @param request Request for getMasterSlidesList. (required)
     * @return MasterSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public MasterSlides getMasterSlidesList(GetMasterSlidesListRequest request) throws ApiException {
        return getMasterSlides(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation masterSlides info.
     * 
     * @param request Request for getMasterSlidesList. (required)
     * @return ApiResponse&lt;MasterSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MasterSlides> getMasterSlidesListWithHttpInfo(GetMasterSlidesListRequest request) throws ApiException {
        return getMasterSlidesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation masterSlides info. (asynchronously)
     * 
     * @param request Request for getMasterSlidesList. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getMasterSlidesListAsync(GetMasterSlidesListRequest request, final ApiCallback<MasterSlides> callback) throws ApiException {
        return getMasterSlidesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read notes slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide getNotesSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = getNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = getNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read notes slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> getNotesSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read notes slide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlide
     * @param request Request for getNotesSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideCall(GetNotesSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlideCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read notes slide info.
     * 
     * @param request Request for getNotesSlide. (required)
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public NotesSlide getNotesSlide(GetNotesSlideRequest request) throws ApiException {
        return getNotesSlide(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read notes slide info.
     * 
     * @param request Request for getNotesSlide. (required)
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<NotesSlide> getNotesSlideWithHttpInfo(GetNotesSlideRequest request) throws ApiException {
        return getNotesSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read notes slide info. (asynchronously)
     * 
     * @param request Request for getNotesSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideAsync(GetNotesSlideRequest request, final ApiCallback<NotesSlide> callback) throws ApiException {
        return getNotesSlideAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideExists
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideExists(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideExists(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/exist"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return EntityExists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityExists notesSlideExists(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<EntityExists> resp = notesSlideExistsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<EntityExists> resp = notesSlideExistsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;EntityExists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityExists> notesSlideExistsWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = notesSlideExistsCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get info whether a notes slide exists. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<EntityExists> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notesSlideExistsCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideExists
     * @param request Request for getNotesSlideExists. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideExistsCall(GetNotesSlideExistsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return notesSlideExistsCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param request Request for getNotesSlideExists. (required)
     * @return EntityExists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public EntityExists getNotesSlideExists(GetNotesSlideExistsRequest request) throws ApiException {
        return notesSlideExists(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param request Request for getNotesSlideExists. (required)
     * @return ApiResponse&lt;EntityExists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EntityExists> getNotesSlideExistsWithHttpInfo(GetNotesSlideExistsRequest request) throws ApiException {
        return notesSlideExistsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get info whether a notes slide exists. (asynchronously)
     * 
     * @param request Request for getNotesSlideExists. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideExistsAsync(GetNotesSlideExistsRequest request, final ApiCallback<EntityExists> callback) throws ApiException {
        return notesSlideExistsAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideHeaderFooterCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideHeaderFooter(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get header/footer info for the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlideHeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlideHeaderFooter getNotesSlideHeaderFooter(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlideHeaderFooter> resp = getNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlideHeaderFooter> resp = getNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get header/footer info for the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlideHeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlideHeaderFooter> getNotesSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideHeaderFooterCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get header/footer info for the notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideHeaderFooterAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<NotesSlideHeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideHeaderFooterCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideHeaderFooter
     * @param request Request for getNotesSlideHeaderFooter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideHeaderFooterCall(GetNotesSlideHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlideHeaderFooterCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Get header/footer info for the notes slide.
     * 
     * @param request Request for getNotesSlideHeaderFooter. (required)
     * @return NotesSlideHeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public NotesSlideHeaderFooter getNotesSlideHeaderFooter(GetNotesSlideHeaderFooterRequest request) throws ApiException {
        return getNotesSlideHeaderFooter(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get header/footer info for the notes slide.
     * 
     * @param request Request for getNotesSlideHeaderFooter. (required)
     * @return ApiResponse&lt;NotesSlideHeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<NotesSlideHeaderFooter> getNotesSlideHeaderFooterWithHttpInfo(GetNotesSlideHeaderFooterRequest request) throws ApiException {
        return getNotesSlideHeaderFooterWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get header/footer info for the notes slide. (asynchronously)
     * 
     * @param request Request for getNotesSlideHeaderFooter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideHeaderFooterAsync(GetNotesSlideHeaderFooterRequest request, final ApiCallback<NotesSlideHeaderFooter> callback) throws ApiException {
        return getNotesSlideHeaderFooterAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideShapeCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getNotesSlideShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase getNotesSlideShape(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = getNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = getNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> getNotesSlideShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideShapeCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shape info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideShapeAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideShapeCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideShape
     * @param request Request for getNotesSlideShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapeCall(GetNotesSlideShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlideShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide shape info.
     * 
     * @param request Request for getNotesSlideShape. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase getNotesSlideShape(GetNotesSlideShapeRequest request) throws ApiException {
        return getNotesSlideShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shape info.
     * 
     * @param request Request for getNotesSlideShape. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> getNotesSlideShapeWithHttpInfo(GetNotesSlideShapeRequest request) throws ApiException {
        return getNotesSlideShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shape info. (asynchronously)
     * 
     * @param request Request for getNotesSlideShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapeAsync(GetNotesSlideShapeRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return getNotesSlideShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideShapeParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getNotesSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getNotesSlideShapeParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph getNotesSlideParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = getNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = getNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> getNotesSlideParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraph info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideShapeParagraph
     * @param request Request for getNotesSlideShapeParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapeParagraphCall(GetNotesSlideShapeParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlideParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read shape paragraph info.
     * 
     * @param request Request for getNotesSlideShapeParagraph. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph getNotesSlideShapeParagraph(GetNotesSlideShapeParagraphRequest request) throws ApiException {
        return getNotesSlideParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraph info.
     * 
     * @param request Request for getNotesSlideShapeParagraph. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> getNotesSlideShapeParagraphWithHttpInfo(GetNotesSlideShapeParagraphRequest request) throws ApiException {
        return getNotesSlideParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraph info. (asynchronously)
     * 
     * @param request Request for getNotesSlideShapeParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapeParagraphAsync(GetNotesSlideShapeParagraphRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return getNotesSlideParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideShapeParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideParagraphsCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideShapeParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideShapeParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getNotesSlideShapeParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs getNotesSlideParagraphs(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = getNotesSlideParagraphsWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = getNotesSlideParagraphsWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> getNotesSlideParagraphsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideParagraphsCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraphs info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideParagraphsAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideParagraphsCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideShapeParagraphs
     * @param request Request for getNotesSlideShapeParagraphs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapeParagraphsCall(GetNotesSlideShapeParagraphsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlideParagraphsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param request Request for getNotesSlideShapeParagraphs. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs getNotesSlideShapeParagraphs(GetNotesSlideShapeParagraphsRequest request) throws ApiException {
        return getNotesSlideParagraphs(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param request Request for getNotesSlideShapeParagraphs. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> getNotesSlideShapeParagraphsWithHttpInfo(GetNotesSlideShapeParagraphsRequest request) throws ApiException {
        return getNotesSlideParagraphsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraphs info. (asynchronously)
     * 
     * @param request Request for getNotesSlideShapeParagraphs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapeParagraphsAsync(GetNotesSlideShapeParagraphsRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return getNotesSlideParagraphsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideShapePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlidePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getNotesSlideShapePortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion getNotesSlidePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = getNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = getNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> getNotesSlidePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portion info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlidePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideShapePortion
     * @param request Request for getNotesSlideShapePortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapePortionCall(GetNotesSlideShapePortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlidePortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read paragraph portion info.
     * 
     * @param request Request for getNotesSlideShapePortion. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion getNotesSlideShapePortion(GetNotesSlideShapePortionRequest request) throws ApiException {
        return getNotesSlidePortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portion info.
     * 
     * @param request Request for getNotesSlideShapePortion. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> getNotesSlideShapePortionWithHttpInfo(GetNotesSlideShapePortionRequest request) throws ApiException {
        return getNotesSlidePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portion info. (asynchronously)
     * 
     * @param request Request for getNotesSlideShapePortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapePortionAsync(GetNotesSlideShapePortionRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return getNotesSlidePortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideShapePortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlidePortionsCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideShapePortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideShapePortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getNotesSlideShapePortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getNotesSlideShapePortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions getNotesSlidePortions(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = getNotesSlidePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = getNotesSlidePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> getNotesSlidePortionsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlidePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portions info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlidePortionsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlidePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideShapePortions
     * @param request Request for getNotesSlideShapePortions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapePortionsCall(GetNotesSlideShapePortionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlidePortionsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read paragraph portions info.
     * 
     * @param request Request for getNotesSlideShapePortions. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions getNotesSlideShapePortions(GetNotesSlideShapePortionsRequest request) throws ApiException {
        return getNotesSlidePortions(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portions info.
     * 
     * @param request Request for getNotesSlideShapePortions. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> getNotesSlideShapePortionsWithHttpInfo(GetNotesSlideShapePortionsRequest request) throws ApiException {
        return getNotesSlidePortionsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portions info. (asynchronously)
     * 
     * @param request Request for getNotesSlideShapePortions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapePortionsAsync(GetNotesSlideShapePortionsRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return getNotesSlidePortionsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideShapesCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes getNotesSlideShapes(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = getNotesSlideShapesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = getNotesSlideShapesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> getNotesSlideShapesWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideShapesCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shapes info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideShapesAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideShapesCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideShapes
     * @param request Request for getNotesSlideShapes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapesCall(GetNotesSlideShapesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlideShapesCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide shapes info.
     * 
     * @param request Request for getNotesSlideShapes. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes getNotesSlideShapes(GetNotesSlideShapesRequest request) throws ApiException {
        return getNotesSlideShapes(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shapes info.
     * 
     * @param request Request for getNotesSlideShapes. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> getNotesSlideShapesWithHttpInfo(GetNotesSlideShapesRequest request) throws ApiException {
        return getNotesSlideShapesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shapes info. (asynchronously)
     * 
     * @param request Request for getNotesSlideShapes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideShapesAsync(GetNotesSlideShapesRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return getNotesSlideShapesAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getNotesSlideWithFormat
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideCall(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideWithFormat(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideWithFormat(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getNotesSlideWithFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadNotesSlide(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadNotesSlideWithHttpInfo(name, slideIndex, format, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadNotesSlideWithHttpInfo(name, slideIndex, format, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadNotesSlideWithHttpInfo(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadNotesSlideCall(name, slideIndex, format, width, height, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert notes slide to the specified image format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideAsync(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadNotesSlideCall(name, slideIndex, format, width, height, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getNotesSlideWithFormat
     * @param request Request for getNotesSlideWithFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideWithFormatCall(GetNotesSlideWithFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadNotesSlideCall(request.getName(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param request Request for getNotesSlideWithFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File getNotesSlideWithFormat(GetNotesSlideWithFormatRequest request) throws ApiException {
        return downloadNotesSlide(request.getName(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param request Request for getNotesSlideWithFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> getNotesSlideWithFormatWithHttpInfo(GetNotesSlideWithFormatRequest request) throws ApiException {
        return downloadNotesSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Convert notes slide to the specified image format. (asynchronously)
     * 
     * @param request Request for getNotesSlideWithFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getNotesSlideWithFormatAsync(GetNotesSlideWithFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadNotesSlideAsync(request.getName(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for getParagraphPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getParagraphPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getParagraphPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getParagraphPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getParagraphPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getParagraphPortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion getPortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = getPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = getPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> getPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portion info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getParagraphPortion
     * @param request Request for getParagraphPortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getParagraphPortionCall(GetParagraphPortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getPortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read paragraph portion info.
     * 
     * @param request Request for getParagraphPortion. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion getParagraphPortion(GetParagraphPortionRequest request) throws ApiException {
        return getPortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portion info.
     * 
     * @param request Request for getParagraphPortion. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> getParagraphPortionWithHttpInfo(GetParagraphPortionRequest request) throws ApiException {
        return getPortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portion info. (asynchronously)
     * 
     * @param request Request for getParagraphPortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getParagraphPortionAsync(GetParagraphPortionRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return getPortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getParagraphPortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortionsCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getParagraphPortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getParagraphPortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getParagraphPortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getParagraphPortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions getPortions(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = getPortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = getPortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> getPortionsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPortionsCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portions info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortionsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortionsCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getParagraphPortions
     * @param request Request for getParagraphPortions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getParagraphPortionsCall(GetParagraphPortionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getPortionsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read paragraph portions info.
     * 
     * @param request Request for getParagraphPortions. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions getParagraphPortions(GetParagraphPortionsRequest request) throws ApiException {
        return getPortions(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portions info.
     * 
     * @param request Request for getParagraphPortions. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> getParagraphPortionsWithHttpInfo(GetParagraphPortionsRequest request) throws ApiException {
        return getPortionsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portions info. (asynchronously)
     * 
     * @param request Request for getParagraphPortions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getParagraphPortionsAsync(GetParagraphPortionsRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return getPortionsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSections
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionsCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSections(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation sections info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections getSections(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = getSectionsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = getSectionsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation sections info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> getSectionsWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSectionsCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation sections info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSectionsAsync(String name, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionsCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSections
     * @param request Request for getSections. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSectionsCall(GetSectionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSectionsCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation sections info.
     * 
     * @param request Request for getSections. (required)
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Sections getSections(GetSectionsRequest request) throws ApiException {
        return getSections(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation sections info.
     * 
     * @param request Request for getSections. (required)
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Sections> getSectionsWithHttpInfo(GetSectionsRequest request) throws ApiException {
        return getSectionsWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation sections info. (asynchronously)
     * 
     * @param request Request for getSections. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSectionsAsync(GetSectionsRequest request, final ApiCallback<Sections> callback) throws ApiException {
        return getSectionsAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideAnimation
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnimationCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideAnimation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeIndex", shapeIndex);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide animation effects.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation getAnimation(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = getAnimationWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = getAnimationWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide animation effects.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> getAnimationWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getAnimationCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide animation effects. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnimationAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnimationCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideAnimation
     * @param request Request for getSlideAnimation. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideAnimationCall(GetSlideAnimationRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getAnimationCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide animation effects.
     * 
     * @param request Request for getSlideAnimation. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation getSlideAnimation(GetSlideAnimationRequest request) throws ApiException {
        return getAnimation(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide animation effects.
     * 
     * @param request Request for getSlideAnimation. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> getSlideAnimationWithHttpInfo(GetSlideAnimationRequest request) throws ApiException {
        return getAnimationWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide animation effects. (asynchronously)
     * 
     * @param request Request for getSlideAnimation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideAnimationAsync(GetSlideAnimationRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return getAnimationAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideHeaderFooterCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideHeaderFooter(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get footer info for the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return HeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HeaderFooter getSlideHeaderFooter(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<HeaderFooter> resp = getSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<HeaderFooter> resp = getSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get footer info for the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;HeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HeaderFooter> getSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideHeaderFooterCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get footer info for the slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideHeaderFooterAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<HeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideHeaderFooterCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideHeaderFooter
     * @param request Request for getSlideHeaderFooter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideHeaderFooterCall(GetSlideHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSlideHeaderFooterCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Get footer info for the slide.
     * 
     * @param request Request for getSlideHeaderFooter. (required)
     * @return HeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public HeaderFooter getSlideHeaderFooter(GetSlideHeaderFooterRequest request) throws ApiException {
        return getSlideHeaderFooter(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get footer info for the slide.
     * 
     * @param request Request for getSlideHeaderFooter. (required)
     * @return ApiResponse&lt;HeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<HeaderFooter> getSlideHeaderFooterWithHttpInfo(GetSlideHeaderFooterRequest request) throws ApiException {
        return getSlideHeaderFooterWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get footer info for the slide. (asynchronously)
     * 
     * @param request Request for getSlideHeaderFooter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideHeaderFooterAsync(GetSlideHeaderFooterRequest request, final ApiCallback<HeaderFooter> callback) throws ApiException {
        return getSlideHeaderFooterAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShapeCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSlideShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase getShape(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = getShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = getShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> getShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getShapeCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shape info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShapeAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShapeCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideShape
     * @param request Request for getSlideShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapeCall(GetSlideShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide shape info.
     * 
     * @param request Request for getSlideShape. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase getSlideShape(GetSlideShapeRequest request) throws ApiException {
        return getShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shape info.
     * 
     * @param request Request for getSlideShape. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> getSlideShapeWithHttpInfo(GetSlideShapeRequest request) throws ApiException {
        return getShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shape info. (asynchronously)
     * 
     * @param request Request for getSlideShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapeAsync(GetSlideShapeRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return getShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideShapeParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getSlideShapeParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph getParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = getParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = getParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> getParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraph info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideShapeParagraph
     * @param request Request for getSlideShapeParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapeParagraphCall(GetSlideShapeParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read shape paragraph info.
     * 
     * @param request Request for getSlideShapeParagraph. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph getSlideShapeParagraph(GetSlideShapeParagraphRequest request) throws ApiException {
        return getParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraph info.
     * 
     * @param request Request for getSlideShapeParagraph. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> getSlideShapeParagraphWithHttpInfo(GetSlideShapeParagraphRequest request) throws ApiException {
        return getParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraph info. (asynchronously)
     * 
     * @param request Request for getSlideShapeParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapeParagraphAsync(GetSlideShapeParagraphRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return getParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideShapeParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphsCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideShapeParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideShapeParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSlideShapeParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs getParagraphs(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = getParagraphsWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = getParagraphsWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> getParagraphsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getParagraphsCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraphs info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParagraphsAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphsCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideShapeParagraphs
     * @param request Request for getSlideShapeParagraphs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapeParagraphsCall(GetSlideShapeParagraphsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getParagraphsCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param request Request for getSlideShapeParagraphs. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs getSlideShapeParagraphs(GetSlideShapeParagraphsRequest request) throws ApiException {
        return getParagraphs(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param request Request for getSlideShapeParagraphs. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> getSlideShapeParagraphsWithHttpInfo(GetSlideShapeParagraphsRequest request) throws ApiException {
        return getParagraphsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraphs info. (asynchronously)
     * 
     * @param request Request for getSlideShapeParagraphs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapeParagraphsAsync(GetSlideShapeParagraphsRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return getParagraphsAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShapesCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes getShapes(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = getShapesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = getShapesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> getShapesWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getShapesCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shapes info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShapesAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShapesCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideShapes
     * @param request Request for getSlideShapes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapesCall(GetSlideShapesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getShapesCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide shapes info.
     * 
     * @param request Request for getSlideShapes. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes getSlideShapes(GetSlideShapesRequest request) throws ApiException {
        return getShapes(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shapes info.
     * 
     * @param request Request for getSlideShapes. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> getSlideShapesWithHttpInfo(GetSlideShapesRequest request) throws ApiException {
        return getShapesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shapes info. (asynchronously)
     * 
     * @param request Request for getSlideShapes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideShapesAsync(GetSlideShapesRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return getShapesAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideSubshape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubshapeCall(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideSubshape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideSubshape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSlideSubshape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shape info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase getSubshape(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = getSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = getSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide shape info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> getSubshapeWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSubshapeCall(name, slideIndex, path, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shape info (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubshapeAsync(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubshapeCall(name, slideIndex, path, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideSubshape
     * @param request Request for getSlideSubshape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapeCall(GetSlideSubshapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSubshapeCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide shape info (for smart art and group shapes).
     * 
     * @param request Request for getSlideSubshape. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase getSlideSubshape(GetSlideSubshapeRequest request) throws ApiException {
        return getSubshape(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shape info (for smart art and group shapes).
     * 
     * @param request Request for getSlideSubshape. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> getSlideSubshapeWithHttpInfo(GetSlideSubshapeRequest request) throws ApiException {
        return getSubshapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shape info (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for getSlideSubshape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapeAsync(GetSlideSubshapeRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return getSubshapeAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideSubshapeParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubshapeParagraphCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideSubshapeParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideSubshapeParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSlideSubshapeParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getSlideSubshapeParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraph info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph getSubshapeParagraph(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = getSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = getSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraph info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> getSubshapeParagraphWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSubshapeParagraphCall(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraph info (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubshapeParagraphAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubshapeParagraphCall(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideSubshapeParagraph
     * @param request Request for getSlideSubshapeParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapeParagraphCall(GetSlideSubshapeParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSubshapeParagraphCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read shape paragraph info (for smart art and group shapes).
     * 
     * @param request Request for getSlideSubshapeParagraph. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph getSlideSubshapeParagraph(GetSlideSubshapeParagraphRequest request) throws ApiException {
        return getSubshapeParagraph(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraph info (for smart art and group shapes).
     * 
     * @param request Request for getSlideSubshapeParagraph. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> getSlideSubshapeParagraphWithHttpInfo(GetSlideSubshapeParagraphRequest request) throws ApiException {
        return getSubshapeParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraph info (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for getSlideSubshapeParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapeParagraphAsync(GetSlideSubshapeParagraphRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return getSubshapeParagraphAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideSubshapeParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubshapeParagraphsCall(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideSubshapeParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideSubshapeParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSlideSubshapeParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs getSubshapeParagraphs(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = getSubshapeParagraphsWithHttpInfo(name, slideIndex, path, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = getSubshapeParagraphsWithHttpInfo(name, slideIndex, path, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> getSubshapeParagraphsWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSubshapeParagraphsCall(name, slideIndex, path, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubshapeParagraphsAsync(String name, Integer slideIndex, String path, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubshapeParagraphsCall(name, slideIndex, path, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideSubshapeParagraphs
     * @param request Request for getSlideSubshapeParagraphs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapeParagraphsCall(GetSlideSubshapeParagraphsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSubshapeParagraphsCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes).
     * 
     * @param request Request for getSlideSubshapeParagraphs. (required)
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraphs getSlideSubshapeParagraphs(GetSlideSubshapeParagraphsRequest request) throws ApiException {
        return getSubshapeParagraphs(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes).
     * 
     * @param request Request for getSlideSubshapeParagraphs. (required)
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraphs> getSlideSubshapeParagraphsWithHttpInfo(GetSlideSubshapeParagraphsRequest request) throws ApiException {
        return getSubshapeParagraphsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read shape paragraphs info (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for getSlideSubshapeParagraphs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapeParagraphsAsync(GetSlideSubshapeParagraphsRequest request, final ApiCallback<Paragraphs> callback) throws ApiException {
        return getSubshapeParagraphsAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlideSubshapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubshapesCall(String name, Integer slideIndex, String path, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideSubshapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideSubshapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes getSubshapes(String name, Integer slideIndex, String path, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = getSubshapesWithHttpInfo(name, slideIndex, path, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = getSubshapesWithHttpInfo(name, slideIndex, path, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> getSubshapesWithHttpInfo(String name, Integer slideIndex, String path, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSubshapesCall(name, slideIndex, path, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shapes info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubshapesAsync(String name, Integer slideIndex, String path, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubshapesCall(name, slideIndex, path, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlideSubshapes
     * @param request Request for getSlideSubshapes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapesCall(GetSlideSubshapesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSubshapesCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide shapes info.
     * 
     * @param request Request for getSlideSubshapes. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes getSlideSubshapes(GetSlideSubshapesRequest request) throws ApiException {
        return getSubshapes(request.getName(), request.getSlideIndex(), request.getPath(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shapes info.
     * 
     * @param request Request for getSlideSubshapes. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> getSlideSubshapesWithHttpInfo(GetSlideSubshapesRequest request) throws ApiException {
        return getSubshapesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide shapes info. (asynchronously)
     * 
     * @param request Request for getSlideSubshapes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlideSubshapesAsync(GetSlideSubshapesRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return getSubshapesAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesApiInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApiInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/info"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get API info.
     * 
     * @return ApiInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiInfo getApiInfo() throws ApiException {
        try {
            ApiResponse<ApiInfo> resp = getApiInfoWithHttpInfo();
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ApiInfo> resp = getApiInfoWithHttpInfo();
            return resp.getData();
        }
    }

    /**
     * Get API info.
     * 
     * @return ApiResponse&lt;ApiInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiInfo> getApiInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getApiInfoCall(null, null);
        Type returnType = new TypeToken<ApiInfo>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get API info. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApiInfoAsync(final ApiCallback<ApiInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApiInfoCall(progressListener, progressRequestListener);
        Type returnType = new TypeToken<ApiInfo>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesApiInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesApiInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getApiInfoCall(progressListener, progressRequestListener);
    }

    /**
     * Get API info.
     * 
     * @return ApiInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiInfo getSlidesApiInfo() throws ApiException {
        return getApiInfo();
    }

    /**
     * Get API info.
     * 
     * @return ApiResponse&lt;ApiInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ApiInfo> getSlidesApiInfoWithHttpInfo() throws ApiException {
        return getApiInfoWithHttpInfo();
    }

    /**
     * Get API info. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesApiInfoAsync(final ApiCallback<ApiInfo> callback) throws ApiException {
        return getApiInfoAsync(callback);
    }
    /**
     * Build call for getSlidesDocument
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Documentstorage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPresentationCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesDocument(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Documentstorage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document getPresentation(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = getPresentationWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = getPresentationWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Documentstorage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> getPresentationWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPresentationCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Documentstorage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPresentationAsync(String name, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPresentationCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesDocument
     * @param request Request for getSlidesDocument. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesDocumentCall(GetSlidesDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getPresentationCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation info.
     * 
     * @param request Request for getSlidesDocument. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document getSlidesDocument(GetSlidesDocumentRequest request) throws ApiException {
        return getPresentation(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation info.
     * 
     * @param request Request for getSlidesDocument. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> getSlidesDocumentWithHttpInfo(GetSlidesDocumentRequest request) throws ApiException {
        return getPresentationWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation info. (asynchronously)
     * 
     * @param request Request for getSlidesDocument. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesDocumentAsync(GetSlidesDocumentRequest request, final ApiCallback<Document> callback) throws ApiException {
        return getPresentationAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesDocumentProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesDocumentProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties getDocumentProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = getDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = getDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> getDocumentPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesDocumentProperties
     * @param request Request for getSlidesDocumentProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesDocumentPropertiesCall(GetSlidesDocumentPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getDocumentPropertiesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation document properties.
     * 
     * @param request Request for getSlidesDocumentProperties. (required)
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentProperties getSlidesDocumentProperties(GetSlidesDocumentPropertiesRequest request) throws ApiException {
        return getDocumentProperties(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation document properties.
     * 
     * @param request Request for getSlidesDocumentProperties. (required)
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentProperties> getSlidesDocumentPropertiesWithHttpInfo(GetSlidesDocumentPropertiesRequest request) throws ApiException {
        return getDocumentPropertiesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation document properties. (asynchronously)
     * 
     * @param request Request for getSlidesDocumentProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesDocumentPropertiesAsync(GetSlidesDocumentPropertiesRequest request, final ApiCallback<DocumentProperties> callback) throws ApiException {
        return getDocumentPropertiesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesDocumentProperty
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyCall(String name, String propertyName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesDocumentProperty(Async)");
        }
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getSlidesDocumentProperty(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "propertyName" + "\\}", apiClient.objectToString(propertyName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperty getDocumentProperty(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperty> resp = getDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperty> resp = getDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperty> getDocumentPropertyWithHttpInfo(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertyCall(name, propertyName, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation document property. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyAsync(String name, String propertyName, String password, String folder, String storage, final ApiCallback<DocumentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertyCall(name, propertyName, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesDocumentProperty
     * @param request Request for getSlidesDocumentProperty. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesDocumentPropertyCall(GetSlidesDocumentPropertyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getDocumentPropertyCall(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation document property.
     * 
     * @param request Request for getSlidesDocumentProperty. (required)
     * @return DocumentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentProperty getSlidesDocumentProperty(GetSlidesDocumentPropertyRequest request) throws ApiException {
        return getDocumentProperty(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation document property.
     * 
     * @param request Request for getSlidesDocumentProperty. (required)
     * @return ApiResponse&lt;DocumentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentProperty> getSlidesDocumentPropertyWithHttpInfo(GetSlidesDocumentPropertyRequest request) throws ApiException {
        return getDocumentPropertyWithHttpInfo(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation document property. (asynchronously)
     * 
     * @param request Request for getSlidesDocumentProperty. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesDocumentPropertyAsync(GetSlidesDocumentPropertyRequest request, final ApiCallback<DocumentProperty> callback) throws ApiException {
        return getDocumentPropertyAsync(request.getName(), request.getPropertyName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesImageWithDefaultFormat
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatCall(String name, Integer index, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesImageWithDefaultFormat(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling getSlidesImageWithDefaultFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image binary data.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImageDefaultFormat(String name, Integer index, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageDefaultFormatWithHttpInfo(name, index, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageDefaultFormatWithHttpInfo(name, index, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get image binary data.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageDefaultFormatWithHttpInfo(String name, Integer index, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageDefaultFormatCall(name, index, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image binary data. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatAsync(String name, Integer index, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageDefaultFormatCall(name, index, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesImageWithDefaultFormat
     * @param request Request for getSlidesImageWithDefaultFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesImageWithDefaultFormatCall(GetSlidesImageWithDefaultFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImageDefaultFormatCall(request.getName(), request.getIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Get image binary data.
     * 
     * @param request Request for getSlidesImageWithDefaultFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File getSlidesImageWithDefaultFormat(GetSlidesImageWithDefaultFormatRequest request) throws ApiException {
        return downloadImageDefaultFormat(request.getName(), request.getIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get image binary data.
     * 
     * @param request Request for getSlidesImageWithDefaultFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> getSlidesImageWithDefaultFormatWithHttpInfo(GetSlidesImageWithDefaultFormatRequest request) throws ApiException {
        return downloadImageDefaultFormatWithHttpInfo(request.getName(), request.getIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get image binary data. (asynchronously)
     * 
     * @param request Request for getSlidesImageWithDefaultFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesImageWithDefaultFormatAsync(GetSlidesImageWithDefaultFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImageDefaultFormatAsync(request.getName(), request.getIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesImageWithFormat
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageCall(String name, Integer index, ImageExportFormat format, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesImageWithFormat(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling getSlidesImageWithFormat(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getSlidesImageWithFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/{index}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image in specified format.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImage(String name, Integer index, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageWithHttpInfo(name, index, format, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageWithHttpInfo(name, index, format, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get image in specified format.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageWithHttpInfo(String name, Integer index, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageCall(name, index, format, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image in specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageAsync(String name, Integer index, ImageExportFormat format, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageCall(name, index, format, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesImageWithFormat
     * @param request Request for getSlidesImageWithFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesImageWithFormatCall(GetSlidesImageWithFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImageCall(request.getName(), request.getIndex(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Get image in specified format.
     * 
     * @param request Request for getSlidesImageWithFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File getSlidesImageWithFormat(GetSlidesImageWithFormatRequest request) throws ApiException {
        return downloadImage(request.getName(), request.getIndex(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get image in specified format.
     * 
     * @param request Request for getSlidesImageWithFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> getSlidesImageWithFormatWithHttpInfo(GetSlidesImageWithFormatRequest request) throws ApiException {
        return downloadImageWithHttpInfo(request.getName(), request.getIndex(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get image in specified format. (asynchronously)
     * 
     * @param request Request for getSlidesImageWithFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesImageWithFormatAsync(GetSlidesImageWithFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImageAsync(request.getName(), request.getIndex(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesImages
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPresentationImagesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesImages(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation images info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Images
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Images getPresentationImages(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Images> resp = getPresentationImagesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Images> resp = getPresentationImagesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation images info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Images&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Images> getPresentationImagesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPresentationImagesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Images>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation images info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPresentationImagesAsync(String name, String password, String folder, String storage, final ApiCallback<Images> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPresentationImagesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Images>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesImages
     * @param request Request for getSlidesImages. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesImagesCall(GetSlidesImagesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getPresentationImagesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation images info.
     * 
     * @param request Request for getSlidesImages. (required)
     * @return Images
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Images getSlidesImages(GetSlidesImagesRequest request) throws ApiException {
        return getPresentationImages(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation images info.
     * 
     * @param request Request for getSlidesImages. (required)
     * @return ApiResponse&lt;Images&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Images> getSlidesImagesWithHttpInfo(GetSlidesImagesRequest request) throws ApiException {
        return getPresentationImagesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation images info. (asynchronously)
     * 
     * @param request Request for getSlidesImages. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesImagesAsync(GetSlidesImagesRequest request, final ApiCallback<Images> callback) throws ApiException {
        return getPresentationImagesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesPlaceholder
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaceholderCall(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesPlaceholder(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesPlaceholder(Async)");
        }
        // verify the required parameter 'placeholderIndex' is set
        if (placeholderIndex == null) {
            throw new ApiException("Missing the required parameter 'placeholderIndex' when calling getSlidesPlaceholder(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/placeholders/{placeholderIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "placeholderIndex" + "\\}", apiClient.objectToString(placeholderIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide placeholder info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Placeholder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Placeholder getPlaceholder(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Placeholder> resp = getPlaceholderWithHttpInfo(name, slideIndex, placeholderIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Placeholder> resp = getPlaceholderWithHttpInfo(name, slideIndex, placeholderIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide placeholder info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Placeholder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Placeholder> getPlaceholderWithHttpInfo(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPlaceholderCall(name, slideIndex, placeholderIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Placeholder>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide placeholder info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaceholderAsync(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage, final ApiCallback<Placeholder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaceholderCall(name, slideIndex, placeholderIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Placeholder>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesPlaceholder
     * @param request Request for getSlidesPlaceholder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesPlaceholderCall(GetSlidesPlaceholderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getPlaceholderCall(request.getName(), request.getSlideIndex(), request.getPlaceholderIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide placeholder info.
     * 
     * @param request Request for getSlidesPlaceholder. (required)
     * @return Placeholder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Placeholder getSlidesPlaceholder(GetSlidesPlaceholderRequest request) throws ApiException {
        return getPlaceholder(request.getName(), request.getSlideIndex(), request.getPlaceholderIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide placeholder info.
     * 
     * @param request Request for getSlidesPlaceholder. (required)
     * @return ApiResponse&lt;Placeholder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Placeholder> getSlidesPlaceholderWithHttpInfo(GetSlidesPlaceholderRequest request) throws ApiException {
        return getPlaceholderWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPlaceholderIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide placeholder info. (asynchronously)
     * 
     * @param request Request for getSlidesPlaceholder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesPlaceholderAsync(GetSlidesPlaceholderRequest request, final ApiCallback<Placeholder> callback) throws ApiException {
        return getPlaceholderAsync(request.getName(), request.getSlideIndex(), request.getPlaceholderIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesPlaceholders
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaceholdersCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesPlaceholders(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesPlaceholders(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/placeholders"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide placeholders info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Placeholders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Placeholders getPlaceholders(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Placeholders> resp = getPlaceholdersWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Placeholders> resp = getPlaceholdersWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide placeholders info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Placeholders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Placeholders> getPlaceholdersWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPlaceholdersCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Placeholders>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide placeholders info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaceholdersAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Placeholders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaceholdersCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Placeholders>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesPlaceholders
     * @param request Request for getSlidesPlaceholders. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesPlaceholdersCall(GetSlidesPlaceholdersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getPlaceholdersCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide placeholders info.
     * 
     * @param request Request for getSlidesPlaceholders. (required)
     * @return Placeholders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Placeholders getSlidesPlaceholders(GetSlidesPlaceholdersRequest request) throws ApiException {
        return getPlaceholders(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide placeholders info.
     * 
     * @param request Request for getSlidesPlaceholders. (required)
     * @return ApiResponse&lt;Placeholders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Placeholders> getSlidesPlaceholdersWithHttpInfo(GetSlidesPlaceholdersRequest request) throws ApiException {
        return getPlaceholdersWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide placeholders info. (asynchronously)
     * 
     * @param request Request for getSlidesPlaceholders. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesPlaceholdersAsync(GetSlidesPlaceholdersRequest request, final ApiCallback<Placeholders> callback) throws ApiException {
        return getPlaceholdersAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesPresentationTextItems
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPresentationTextItemsCall(String name, Boolean withEmpty, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesPresentationTextItems(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "withEmpty", withEmpty);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Extract presentation text items.
     * 
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TextItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItems getPresentationTextItems(String name, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TextItems> resp = getPresentationTextItemsWithHttpInfo(name, withEmpty, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TextItems> resp = getPresentationTextItemsWithHttpInfo(name, withEmpty, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Extract presentation text items.
     * 
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TextItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItems> getPresentationTextItemsWithHttpInfo(String name, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPresentationTextItemsCall(name, withEmpty, password, folder, storage, null, null);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Extract presentation text items. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPresentationTextItemsAsync(String name, Boolean withEmpty, String password, String folder, String storage, final ApiCallback<TextItems> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPresentationTextItemsCall(name, withEmpty, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesPresentationTextItems
     * @param request Request for getSlidesPresentationTextItems. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesPresentationTextItemsCall(GetSlidesPresentationTextItemsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getPresentationTextItemsCall(request.getName(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Extract presentation text items.
     * 
     * @param request Request for getSlidesPresentationTextItems. (required)
     * @return TextItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public TextItems getSlidesPresentationTextItems(GetSlidesPresentationTextItemsRequest request) throws ApiException {
        return getPresentationTextItems(request.getName(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Extract presentation text items.
     * 
     * @param request Request for getSlidesPresentationTextItems. (required)
     * @return ApiResponse&lt;TextItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TextItems> getSlidesPresentationTextItemsWithHttpInfo(GetSlidesPresentationTextItemsRequest request) throws ApiException {
        return getPresentationTextItemsWithHttpInfo(request.getName(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Extract presentation text items. (asynchronously)
     * 
     * @param request Request for getSlidesPresentationTextItems. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesPresentationTextItemsAsync(GetSlidesPresentationTextItemsRequest request, final ApiCallback<TextItems> callback) throws ApiException {
        return getPresentationTextItemsAsync(request.getName(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesProtectionProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProtectionPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesProtectionProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/protectionProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ProtectionProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProtectionProperties getProtectionProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ProtectionProperties> resp = getProtectionPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ProtectionProperties> resp = getProtectionPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ProtectionProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProtectionProperties> getProtectionPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getProtectionPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation protection properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProtectionPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<ProtectionProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProtectionPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesProtectionProperties
     * @param request Request for getSlidesProtectionProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesProtectionPropertiesCall(GetSlidesProtectionPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getProtectionPropertiesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation protection properties.
     * 
     * @param request Request for getSlidesProtectionProperties. (required)
     * @return ProtectionProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ProtectionProperties getSlidesProtectionProperties(GetSlidesProtectionPropertiesRequest request) throws ApiException {
        return getProtectionProperties(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation protection properties.
     * 
     * @param request Request for getSlidesProtectionProperties. (required)
     * @return ApiResponse&lt;ProtectionProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProtectionProperties> getSlidesProtectionPropertiesWithHttpInfo(GetSlidesProtectionPropertiesRequest request) throws ApiException {
        return getProtectionPropertiesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation protection properties. (asynchronously)
     * 
     * @param request Request for getSlidesProtectionProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesProtectionPropertiesAsync(GetSlidesProtectionPropertiesRequest request, final ApiCallback<ProtectionProperties> callback) throws ApiException {
        return getProtectionPropertiesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slide getSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slide> resp = getSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slide> resp = getSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slide> getSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Slide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesSlide
     * @param request Request for getSlidesSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideCall(GetSlidesSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSlideCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation slide info.
     * 
     * @param request Request for getSlidesSlide. (required)
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slide getSlidesSlide(GetSlidesSlideRequest request) throws ApiException {
        return getSlide(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slide info.
     * 
     * @param request Request for getSlidesSlide. (required)
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slide> getSlidesSlideWithHttpInfo(GetSlidesSlideRequest request) throws ApiException {
        return getSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slide info. (asynchronously)
     * 
     * @param request Request for getSlidesSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideAsync(GetSlidesSlideRequest request, final ApiCallback<Slide> callback) throws ApiException {
        return getSlideAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesSlideBackground
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBackgroundCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesSlideBackground(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesSlideBackground(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide background info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground getBackground(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = getBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = getBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide background info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> getBackgroundWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getBackgroundCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide background info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackgroundAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackgroundCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesSlideBackground
     * @param request Request for getSlidesSlideBackground. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideBackgroundCall(GetSlidesSlideBackgroundRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getBackgroundCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide background info.
     * 
     * @param request Request for getSlidesSlideBackground. (required)
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideBackground getSlidesSlideBackground(GetSlidesSlideBackgroundRequest request) throws ApiException {
        return getBackground(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide background info.
     * 
     * @param request Request for getSlidesSlideBackground. (required)
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideBackground> getSlidesSlideBackgroundWithHttpInfo(GetSlidesSlideBackgroundRequest request) throws ApiException {
        return getBackgroundWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide background info. (asynchronously)
     * 
     * @param request Request for getSlidesSlideBackground. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideBackgroundAsync(GetSlidesSlideBackgroundRequest request, final ApiCallback<SlideBackground> callback) throws ApiException {
        return getBackgroundAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesSlideComments
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentsCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesSlideComments(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesSlideComments(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slide comments.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideComments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideComments getComments(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideComments> resp = getCommentsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideComments> resp = getCommentsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slide comments.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideComments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideComments> getCommentsWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getCommentsCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slide comments. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentsAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideComments> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesSlideComments
     * @param request Request for getSlidesSlideComments. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideCommentsCall(GetSlidesSlideCommentsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getCommentsCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation slide comments.
     * 
     * @param request Request for getSlidesSlideComments. (required)
     * @return SlideComments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideComments getSlidesSlideComments(GetSlidesSlideCommentsRequest request) throws ApiException {
        return getComments(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slide comments.
     * 
     * @param request Request for getSlidesSlideComments. (required)
     * @return ApiResponse&lt;SlideComments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideComments> getSlidesSlideCommentsWithHttpInfo(GetSlidesSlideCommentsRequest request) throws ApiException {
        return getCommentsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slide comments. (asynchronously)
     * 
     * @param request Request for getSlidesSlideComments. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideCommentsAsync(GetSlidesSlideCommentsRequest request, final ApiCallback<SlideComments> callback) throws ApiException {
        return getCommentsAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesSlideImages
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideImagesCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesSlideImages(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesSlideImages(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide images info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Images
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Images getSlideImages(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Images> resp = getSlideImagesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Images> resp = getSlideImagesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide images info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Images&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Images> getSlideImagesWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideImagesCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Images>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide images info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideImagesAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Images> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideImagesCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Images>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesSlideImages
     * @param request Request for getSlidesSlideImages. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideImagesCall(GetSlidesSlideImagesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSlideImagesCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide images info.
     * 
     * @param request Request for getSlidesSlideImages. (required)
     * @return Images
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Images getSlidesSlideImages(GetSlidesSlideImagesRequest request) throws ApiException {
        return getSlideImages(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide images info.
     * 
     * @param request Request for getSlidesSlideImages. (required)
     * @return ApiResponse&lt;Images&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Images> getSlidesSlideImagesWithHttpInfo(GetSlidesSlideImagesRequest request) throws ApiException {
        return getSlideImagesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide images info. (asynchronously)
     * 
     * @param request Request for getSlidesSlideImages. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideImagesAsync(GetSlidesSlideImagesRequest request, final ApiCallback<Images> callback) throws ApiException {
        return getSlideImagesAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesSlideProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlidePropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesSlideProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slideProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideProperties getSlideProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideProperties> resp = getSlidePropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideProperties> resp = getSlidePropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideProperties> getSlidePropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlidePropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slide properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlidePropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<SlideProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlidePropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesSlideProperties
     * @param request Request for getSlidesSlideProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlidePropertiesCall(GetSlidesSlidePropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSlidePropertiesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation slide properties.
     * 
     * @param request Request for getSlidesSlideProperties. (required)
     * @return SlideProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideProperties getSlidesSlideProperties(GetSlidesSlidePropertiesRequest request) throws ApiException {
        return getSlideProperties(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slide properties.
     * 
     * @param request Request for getSlidesSlideProperties. (required)
     * @return ApiResponse&lt;SlideProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideProperties> getSlidesSlidePropertiesWithHttpInfo(GetSlidesSlidePropertiesRequest request) throws ApiException {
        return getSlidePropertiesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slide properties. (asynchronously)
     * 
     * @param request Request for getSlidesSlideProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlidePropertiesAsync(GetSlidesSlidePropertiesRequest request, final ApiCallback<SlideProperties> callback) throws ApiException {
        return getSlidePropertiesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesSlideTextItems
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideTextItemsCall(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesSlideTextItems(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesSlideTextItems(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "withEmpty", withEmpty);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Extract slide text items.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TextItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItems getSlideTextItems(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TextItems> resp = getSlideTextItemsWithHttpInfo(name, slideIndex, withEmpty, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TextItems> resp = getSlideTextItemsWithHttpInfo(name, slideIndex, withEmpty, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Extract slide text items.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TextItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItems> getSlideTextItemsWithHttpInfo(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideTextItemsCall(name, slideIndex, withEmpty, password, folder, storage, null, null);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Extract slide text items. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideTextItemsAsync(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage, final ApiCallback<TextItems> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideTextItemsCall(name, slideIndex, withEmpty, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesSlideTextItems
     * @param request Request for getSlidesSlideTextItems. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideTextItemsCall(GetSlidesSlideTextItemsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSlideTextItemsCall(request.getName(), request.getSlideIndex(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Extract slide text items.
     * 
     * @param request Request for getSlidesSlideTextItems. (required)
     * @return TextItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public TextItems getSlidesSlideTextItems(GetSlidesSlideTextItemsRequest request) throws ApiException {
        return getSlideTextItems(request.getName(), request.getSlideIndex(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Extract slide text items.
     * 
     * @param request Request for getSlidesSlideTextItems. (required)
     * @return ApiResponse&lt;TextItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TextItems> getSlidesSlideTextItemsWithHttpInfo(GetSlidesSlideTextItemsRequest request) throws ApiException {
        return getSlideTextItemsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Extract slide text items. (asynchronously)
     * 
     * @param request Request for getSlidesSlideTextItems. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlideTextItemsAsync(GetSlidesSlideTextItemsRequest request, final ApiCallback<TextItems> callback) throws ApiException {
        return getSlideTextItemsAsync(request.getName(), request.getSlideIndex(), request.getWithEmpty(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesSlidesList
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlidesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesSlidesList(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides getSlides(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = getSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = getSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> getSlidesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlidesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slides info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlidesAsync(String name, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlidesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesSlidesList
     * @param request Request for getSlidesSlidesList. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlidesListCall(GetSlidesSlidesListRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSlidesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation slides info.
     * 
     * @param request Request for getSlidesSlidesList. (required)
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slides getSlidesSlidesList(GetSlidesSlidesListRequest request) throws ApiException {
        return getSlides(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slides info.
     * 
     * @param request Request for getSlidesSlidesList. (required)
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slides> getSlidesSlidesListWithHttpInfo(GetSlidesSlidesListRequest request) throws ApiException {
        return getSlidesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation slides info. (asynchronously)
     * 
     * @param request Request for getSlidesSlidesList. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesSlidesListAsync(GetSlidesSlidesListRequest request, final ApiCallback<Slides> callback) throws ApiException {
        return getSlidesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesTheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesTheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesTheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Theme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Theme getTheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Theme> resp = getThemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Theme> resp = getThemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Theme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Theme> getThemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getThemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Theme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Theme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Theme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesTheme
     * @param request Request for getSlidesTheme. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeCall(GetSlidesThemeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getThemeCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide theme info.
     * 
     * @param request Request for getSlidesTheme. (required)
     * @return Theme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Theme getSlidesTheme(GetSlidesThemeRequest request) throws ApiException {
        return getTheme(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme info.
     * 
     * @param request Request for getSlidesTheme. (required)
     * @return ApiResponse&lt;Theme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Theme> getSlidesThemeWithHttpInfo(GetSlidesThemeRequest request) throws ApiException {
        return getThemeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme info. (asynchronously)
     * 
     * @param request Request for getSlidesTheme. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeAsync(GetSlidesThemeRequest request, final ApiCallback<Theme> callback) throws ApiException {
        return getThemeAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesThemeColorScheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getColorSchemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesThemeColorScheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesThemeColorScheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme/colorScheme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme color scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ColorScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColorScheme getColorScheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ColorScheme> resp = getColorSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ColorScheme> resp = getColorSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme color scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ColorScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColorScheme> getColorSchemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getColorSchemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<ColorScheme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme color scheme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getColorSchemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<ColorScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getColorSchemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ColorScheme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesThemeColorScheme
     * @param request Request for getSlidesThemeColorScheme. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeColorSchemeCall(GetSlidesThemeColorSchemeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getColorSchemeCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide theme color scheme info.
     * 
     * @param request Request for getSlidesThemeColorScheme. (required)
     * @return ColorScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ColorScheme getSlidesThemeColorScheme(GetSlidesThemeColorSchemeRequest request) throws ApiException {
        return getColorScheme(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme color scheme info.
     * 
     * @param request Request for getSlidesThemeColorScheme. (required)
     * @return ApiResponse&lt;ColorScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ColorScheme> getSlidesThemeColorSchemeWithHttpInfo(GetSlidesThemeColorSchemeRequest request) throws ApiException {
        return getColorSchemeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme color scheme info. (asynchronously)
     * 
     * @param request Request for getSlidesThemeColorScheme. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeColorSchemeAsync(GetSlidesThemeColorSchemeRequest request, final ApiCallback<ColorScheme> callback) throws ApiException {
        return getColorSchemeAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesThemeFontScheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFontSchemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesThemeFontScheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesThemeFontScheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme/fontScheme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme font scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return FontScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontScheme getFontScheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<FontScheme> resp = getFontSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontScheme> resp = getFontSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme font scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;FontScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontScheme> getFontSchemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getFontSchemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<FontScheme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme font scheme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFontSchemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<FontScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFontSchemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontScheme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesThemeFontScheme
     * @param request Request for getSlidesThemeFontScheme. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeFontSchemeCall(GetSlidesThemeFontSchemeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getFontSchemeCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide theme font scheme info.
     * 
     * @param request Request for getSlidesThemeFontScheme. (required)
     * @return FontScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public FontScheme getSlidesThemeFontScheme(GetSlidesThemeFontSchemeRequest request) throws ApiException {
        return getFontScheme(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme font scheme info.
     * 
     * @param request Request for getSlidesThemeFontScheme. (required)
     * @return ApiResponse&lt;FontScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FontScheme> getSlidesThemeFontSchemeWithHttpInfo(GetSlidesThemeFontSchemeRequest request) throws ApiException {
        return getFontSchemeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme font scheme info. (asynchronously)
     * 
     * @param request Request for getSlidesThemeFontScheme. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeFontSchemeAsync(GetSlidesThemeFontSchemeRequest request, final ApiCallback<FontScheme> callback) throws ApiException {
        return getFontSchemeAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesThemeFormatScheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormatSchemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesThemeFormatScheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlidesThemeFormatScheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme/formatScheme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme format scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return FormatScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormatScheme getFormatScheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<FormatScheme> resp = getFormatSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FormatScheme> resp = getFormatSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme format scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;FormatScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormatScheme> getFormatSchemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getFormatSchemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<FormatScheme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme format scheme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormatSchemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<FormatScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormatSchemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FormatScheme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesThemeFormatScheme
     * @param request Request for getSlidesThemeFormatScheme. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeFormatSchemeCall(GetSlidesThemeFormatSchemeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getFormatSchemeCall(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read slide theme format scheme info.
     * 
     * @param request Request for getSlidesThemeFormatScheme. (required)
     * @return FormatScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public FormatScheme getSlidesThemeFormatScheme(GetSlidesThemeFormatSchemeRequest request) throws ApiException {
        return getFormatScheme(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme format scheme info.
     * 
     * @param request Request for getSlidesThemeFormatScheme. (required)
     * @return ApiResponse&lt;FormatScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FormatScheme> getSlidesThemeFormatSchemeWithHttpInfo(GetSlidesThemeFormatSchemeRequest request) throws ApiException {
        return getFormatSchemeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read slide theme format scheme info. (asynchronously)
     * 
     * @param request Request for getSlidesThemeFormatScheme. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesThemeFormatSchemeAsync(GetSlidesThemeFormatSchemeRequest request, final ApiCallback<FormatScheme> callback) throws ApiException {
        return getFormatSchemeAsync(request.getName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSlidesViewProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViewPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlidesViewProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/viewProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ViewProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewProperties getViewProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ViewProperties> resp = getViewPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ViewProperties> resp = getViewPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ViewProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewProperties> getViewPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getViewPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViewPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<ViewProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViewPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSlidesViewProperties
     * @param request Request for getSlidesViewProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesViewPropertiesCall(GetSlidesViewPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getViewPropertiesCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read presentation document properties.
     * 
     * @param request Request for getSlidesViewProperties. (required)
     * @return ViewProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ViewProperties getSlidesViewProperties(GetSlidesViewPropertiesRequest request) throws ApiException {
        return getViewProperties(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation document properties.
     * 
     * @param request Request for getSlidesViewProperties. (required)
     * @return ApiResponse&lt;ViewProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ViewProperties> getSlidesViewPropertiesWithHttpInfo(GetSlidesViewPropertiesRequest request) throws ApiException {
        return getViewPropertiesWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read presentation document properties. (asynchronously)
     * 
     * @param request Request for getSlidesViewProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSlidesViewPropertiesAsync(GetSlidesViewPropertiesRequest request, final ApiCallback<ViewProperties> callback) throws ApiException {
        return getViewPropertiesAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSubshapeParagraphPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubshapePortionCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSubshapeParagraphPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSubshapeParagraphPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSubshapeParagraphPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getSubshapeParagraphPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getSubshapeParagraphPortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portion info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion getSubshapePortion(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = getSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = getSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portion info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> getSubshapePortionWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portion info (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubshapePortionAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSubshapeParagraphPortion
     * @param request Request for getSubshapeParagraphPortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSubshapeParagraphPortionCall(GetSubshapeParagraphPortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSubshapePortionCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read paragraph portion info (for smart art and group shapes).
     * 
     * @param request Request for getSubshapeParagraphPortion. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion getSubshapeParagraphPortion(GetSubshapeParagraphPortionRequest request) throws ApiException {
        return getSubshapePortion(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portion info (for smart art and group shapes).
     * 
     * @param request Request for getSubshapeParagraphPortion. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> getSubshapeParagraphPortionWithHttpInfo(GetSubshapeParagraphPortionRequest request) throws ApiException {
        return getSubshapePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portion info (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for getSubshapeParagraphPortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSubshapeParagraphPortionAsync(GetSubshapeParagraphPortionRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return getSubshapePortionAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for getSubshapeParagraphPortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubshapePortionsCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSubshapeParagraphPortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSubshapeParagraphPortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSubshapeParagraphPortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getSubshapeParagraphPortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portions info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions getSubshapePortions(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = getSubshapePortionsWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = getSubshapePortionsWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portions info (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> getSubshapePortionsWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSubshapePortionsCall(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portions info (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubshapePortionsAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubshapePortionsCall(name, slideIndex, path, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for getSubshapeParagraphPortions
     * @param request Request for getSubshapeParagraphPortions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSubshapeParagraphPortionsCall(GetSubshapeParagraphPortionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getSubshapePortionsCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Read paragraph portions info (for smart art and group shapes).
     * 
     * @param request Request for getSubshapeParagraphPortions. (required)
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portions getSubshapeParagraphPortions(GetSubshapeParagraphPortionsRequest request) throws ApiException {
        return getSubshapePortions(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portions info (for smart art and group shapes).
     * 
     * @param request Request for getSubshapeParagraphPortions. (required)
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portions> getSubshapeParagraphPortionsWithHttpInfo(GetSubshapeParagraphPortionsRequest request) throws ApiException {
        return getSubshapePortionsWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Read paragraph portions info (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for getSubshapeParagraphPortions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call getSubshapeParagraphPortionsAsync(GetSubshapeParagraphPortionsRequest request, final ApiCallback<Portions> callback) throws ApiException {
        return getSubshapePortionsAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for moveFile
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFile(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFile(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        try {
            moveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        } catch (NeedRepeatRequestException e) {
            moveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }
    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = moveFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move file (asynchronously)
     * 
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for moveFile
     * @param request Request for moveFile. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call moveFileCall(MoveFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return moveFileCall(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId(), progressListener, progressRequestListener);
    }

    /**
     * Move file
     * 
     * @param request Request for moveFile. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void moveFile(MoveFileRequest request) throws ApiException {
        moveFile(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId());
    }

    /**
     * Move file
     * 
     * @param request Request for moveFile. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> moveFileWithHttpInfo(MoveFileRequest request) throws ApiException {
        return moveFileWithHttpInfo(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId());
    }

    /**
     * Move file (asynchronously)
     * 
     * @param request Request for moveFile. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call moveFileAsync(MoveFileRequest request, final ApiCallback<Void> callback) throws ApiException {
        return moveFileAsync(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), request.getVersionId(), callback);
    }
    /**
     * Build call for moveFolder
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFolder(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFolder(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        try {
            moveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        } catch (NeedRepeatRequestException e) {
            moveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }
    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = moveFolderCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move folder (asynchronously)
     * 
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for moveFolder
     * @param request Request for moveFolder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call moveFolderCall(MoveFolderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return moveFolderCall(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Move folder
     * 
     * @param request Request for moveFolder. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void moveFolder(MoveFolderRequest request) throws ApiException {
        moveFolder(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName());
    }

    /**
     * Move folder
     * 
     * @param request Request for moveFolder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> moveFolderWithHttpInfo(MoveFolderRequest request) throws ApiException {
        return moveFolderWithHttpInfo(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName());
    }

    /**
     * Move folder (asynchronously)
     * 
     * @param request Request for moveFolder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call moveFolderAsync(MoveFolderRequest request, final ApiCallback<Void> callback) throws ApiException {
        return moveFolderAsync(request.getSrcPath(), request.getDestPath(), request.getSrcStorageName(), request.getDestStorageName(), callback);
    }
    /**
     * Build call for objectExists
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call objectExistsCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/exist/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @return ObjectExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectExist objectExists(String path, String storageName, String versionId) throws ApiException {
        try {
            ApiResponse<ObjectExist> resp = objectExistsWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ObjectExist> resp = objectExistsWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        }
    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @return ApiResponse&lt;ObjectExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectExist> objectExistsWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = objectExistsCall(path, storageName, versionId, null, null);
        Type returnType = new TypeToken<ObjectExist>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Check if file or folder exists (asynchronously)
     * 
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call objectExistsAsync(String path, String storageName, String versionId, final ApiCallback<ObjectExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = objectExistsCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ObjectExist>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for objectExists
     * @param request Request for objectExists. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call objectExistsCall(ObjectExistsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return objectExistsCall(request.getPath(), request.getStorageName(), request.getVersionId(), progressListener, progressRequestListener);
    }

    /**
     * Check if file or folder exists
     * 
     * @param request Request for objectExists. (required)
     * @return ObjectExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ObjectExist objectExists(ObjectExistsRequest request) throws ApiException {
        return objectExists(request.getPath(), request.getStorageName(), request.getVersionId());
    }

    /**
     * Check if file or folder exists
     * 
     * @param request Request for objectExists. (required)
     * @return ApiResponse&lt;ObjectExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ObjectExist> objectExistsWithHttpInfo(ObjectExistsRequest request) throws ApiException {
        return objectExistsWithHttpInfo(request.getPath(), request.getStorageName(), request.getVersionId());
    }

    /**
     * Check if file or folder exists (asynchronously)
     * 
     * @param request Request for objectExists. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call objectExistsAsync(ObjectExistsRequest request, final ApiCallback<ObjectExist> callback) throws ApiException {
        return objectExistsAsync(request.getPath(), request.getStorageName(), request.getVersionId(), callback);
    }
    /**
     * Build call for postAddNewParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAddNewParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAddNewParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postAddNewParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postAddNewParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph createParagraph(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = createParagraphWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = createParagraphWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> createParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createParagraphCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createParagraphCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAddNewParagraph
     * @param request Request for postAddNewParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewParagraphCall(PostAddNewParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Creates new paragraph.
     * 
     * @param request Request for postAddNewParagraph. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph postAddNewParagraph(PostAddNewParagraphRequest request) throws ApiException {
        return createParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new paragraph.
     * 
     * @param request Request for postAddNewParagraph. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> postAddNewParagraphWithHttpInfo(PostAddNewParagraphRequest request) throws ApiException {
        return createParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new paragraph. (asynchronously)
     * 
     * @param request Request for postAddNewParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewParagraphAsync(PostAddNewParagraphRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return createParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postAddNewPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAddNewPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAddNewPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postAddNewPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling postAddNewPortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postAddNewPortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion createPortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = createPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = createPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> createPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createPortionCall(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortionCall(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAddNewPortion
     * @param request Request for postAddNewPortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewPortionCall(PostAddNewPortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createPortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Creates new portion.
     * 
     * @param request Request for postAddNewPortion. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion postAddNewPortion(PostAddNewPortionRequest request) throws ApiException {
        return createPortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new portion.
     * 
     * @param request Request for postAddNewPortion. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> postAddNewPortionWithHttpInfo(PostAddNewPortionRequest request) throws ApiException {
        return createPortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new portion. (asynchronously)
     * 
     * @param request Request for postAddNewPortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewPortionAsync(PostAddNewPortionRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return createPortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postAddNewShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createShapeCall(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAddNewShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAddNewShape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeToClone", shapeToClone);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase createShape(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = createShapeWithHttpInfo(name, slideIndex, dto, shapeToClone, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = createShapeWithHttpInfo(name, slideIndex, dto, shapeToClone, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> createShapeWithHttpInfo(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createShapeCall(name, slideIndex, dto, shapeToClone, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create new shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createShapeAsync(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createShapeCall(name, slideIndex, dto, shapeToClone, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAddNewShape
     * @param request Request for postAddNewShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewShapeCall(PostAddNewShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createShapeCall(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create new shape.
     * 
     * @param request Request for postAddNewShape. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase postAddNewShape(PostAddNewShapeRequest request) throws ApiException {
        return createShape(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create new shape.
     * 
     * @param request Request for postAddNewShape. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> postAddNewShapeWithHttpInfo(PostAddNewShapeRequest request) throws ApiException {
        return createShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create new shape. (asynchronously)
     * 
     * @param request Request for postAddNewShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewShapeAsync(PostAddNewShapeRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return createShapeAsync(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postAddNewSubshape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSubshapeCall(String name, Integer slideIndex, String path, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAddNewSubshape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAddNewSubshape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeToClone", shapeToClone);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create new shape (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase createSubshape(String name, Integer slideIndex, String path, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = createSubshapeWithHttpInfo(name, slideIndex, path, dto, shapeToClone, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = createSubshapeWithHttpInfo(name, slideIndex, path, dto, shapeToClone, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create new shape (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> createSubshapeWithHttpInfo(String name, Integer slideIndex, String path, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSubshapeCall(name, slideIndex, path, dto, shapeToClone, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create new shape (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubshapeAsync(String name, Integer slideIndex, String path, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubshapeCall(name, slideIndex, path, dto, shapeToClone, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAddNewSubshape
     * @param request Request for postAddNewSubshape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewSubshapeCall(PostAddNewSubshapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createSubshapeCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create new shape (for smart art and group shapes).
     * 
     * @param request Request for postAddNewSubshape. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase postAddNewSubshape(PostAddNewSubshapeRequest request) throws ApiException {
        return createSubshape(request.getName(), request.getSlideIndex(), request.getPath(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create new shape (for smart art and group shapes).
     * 
     * @param request Request for postAddNewSubshape. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> postAddNewSubshapeWithHttpInfo(PostAddNewSubshapeRequest request) throws ApiException {
        return createSubshapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create new shape (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for postAddNewSubshape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewSubshapeAsync(PostAddNewSubshapeRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return createSubshapeAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postAddNewSubshapeParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSubshapeParagraphCall(String name, Integer slideIndex, String path, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAddNewSubshapeParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAddNewSubshapeParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postAddNewSubshapeParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postAddNewSubshapeParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new paragraph (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph createSubshapeParagraph(String name, Integer slideIndex, String path, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = createSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = createSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates new paragraph (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> createSubshapeParagraphWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSubshapeParagraphCall(name, slideIndex, path, shapeIndex, dto, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new paragraph (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubshapeParagraphAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubshapeParagraphCall(name, slideIndex, path, shapeIndex, dto, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAddNewSubshapeParagraph
     * @param request Request for postAddNewSubshapeParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewSubshapeParagraphCall(PostAddNewSubshapeParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createSubshapeParagraphCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Creates new paragraph (for smart art and group shapes).
     * 
     * @param request Request for postAddNewSubshapeParagraph. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph postAddNewSubshapeParagraph(PostAddNewSubshapeParagraphRequest request) throws ApiException {
        return createSubshapeParagraph(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new paragraph (for smart art and group shapes).
     * 
     * @param request Request for postAddNewSubshapeParagraph. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> postAddNewSubshapeParagraphWithHttpInfo(PostAddNewSubshapeParagraphRequest request) throws ApiException {
        return createSubshapeParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new paragraph (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for postAddNewSubshapeParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewSubshapeParagraphAsync(PostAddNewSubshapeParagraphRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return createSubshapeParagraphAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postAddNewSubshapePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSubshapePortionCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAddNewSubshapePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAddNewSubshapePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postAddNewSubshapePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling postAddNewSubshapePortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postAddNewSubshapePortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new portion (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion createSubshapePortion(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = createSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, dto, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = createSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, dto, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates new portion (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> createSubshapePortionWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, dto, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new portion (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubshapePortionAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, dto, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAddNewSubshapePortion
     * @param request Request for postAddNewSubshapePortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewSubshapePortionCall(PostAddNewSubshapePortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createSubshapePortionCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Creates new portion (for smart art and group shapes).
     * 
     * @param request Request for postAddNewSubshapePortion. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion postAddNewSubshapePortion(PostAddNewSubshapePortionRequest request) throws ApiException {
        return createSubshapePortion(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new portion (for smart art and group shapes).
     * 
     * @param request Request for postAddNewSubshapePortion. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> postAddNewSubshapePortionWithHttpInfo(PostAddNewSubshapePortionRequest request) throws ApiException {
        return createSubshapePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new portion (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for postAddNewSubshapePortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNewSubshapePortionAsync(PostAddNewSubshapePortionRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return createSubshapePortionAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postAddNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideCall(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAddNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAddNotesSlide(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postAddNotesSlide(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add new notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide createNotesSlide(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = createNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = createNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add new notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> createNotesSlideWithHttpInfo(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createNotesSlideCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add new notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideAsync(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNotesSlideCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAddNotesSlide
     * @param request Request for postAddNotesSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNotesSlideCall(PostAddNotesSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createNotesSlideCall(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Add new notes slide.
     * 
     * @param request Request for postAddNotesSlide. (required)
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public NotesSlide postAddNotesSlide(PostAddNotesSlideRequest request) throws ApiException {
        return createNotesSlide(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add new notes slide.
     * 
     * @param request Request for postAddNotesSlide. (required)
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<NotesSlide> postAddNotesSlideWithHttpInfo(PostAddNotesSlideRequest request) throws ApiException {
        return createNotesSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add new notes slide. (asynchronously)
     * 
     * @param request Request for postAddNotesSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAddNotesSlideAsync(PostAddNotesSlideRequest request, final ApiCallback<NotesSlide> callback) throws ApiException {
        return createNotesSlideAsync(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postAlignShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call alignShapesCall(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postAlignShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postAlignShapes(Async)");
        }
        // verify the required parameter 'alignmentType' is set
        if (alignmentType == null) {
            throw new ApiException("Missing the required parameter 'alignmentType' when calling postAlignShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/align/{alignmentType}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "alignmentType" + "\\}", apiClient.objectToString(alignmentType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "alignToSlide", alignToSlide);
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes alignShapes(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = alignShapesWithHttpInfo(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = alignShapesWithHttpInfo(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> alignShapesWithHttpInfo(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = alignShapesCall(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alignShapesAsync(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alignShapesCall(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postAlignShapes
     * @param request Request for postAlignShapes. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAlignShapesCall(PostAlignShapesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return alignShapesCall(request.getName(), request.getSlideIndex(), request.getAlignmentType(), request.getAlignToSlide(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param request Request for postAlignShapes. (required)
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Shapes postAlignShapes(PostAlignShapesRequest request) throws ApiException {
        return alignShapes(request.getName(), request.getSlideIndex(), request.getAlignmentType(), request.getAlignToSlide(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param request Request for postAlignShapes. (required)
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Shapes> postAlignShapesWithHttpInfo(PostAlignShapesRequest request) throws ApiException {
        return alignShapesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getAlignmentType(), request.getAlignToSlide(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other. (asynchronously)
     * 
     * @param request Request for postAlignShapes. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postAlignShapesAsync(PostAlignShapesRequest request, final ApiCallback<Shapes> callback) throws ApiException {
        return alignShapesAsync(request.getName(), request.getSlideIndex(), request.getAlignmentType(), request.getAlignToSlide(), request.getShapes(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postChartCategory
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChartCategoryCall(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postChartCategory(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postChartCategory(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postChartCategory(Async)");
        }
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling postChartCategory(Async)");
        }
        Object postBody = category;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add a new category to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart createChartCategory(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = createChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, category, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = createChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, category, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add a new category to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> createChartCategoryWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createChartCategoryCall(name, slideIndex, shapeIndex, category, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add a new category to a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChartCategoryAsync(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChartCategoryCall(name, slideIndex, shapeIndex, category, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postChartCategory
     * @param request Request for postChartCategory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postChartCategoryCall(PostChartCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createChartCategoryCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Add a new category to a chart.
     * 
     * @param request Request for postChartCategory. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart postChartCategory(PostChartCategoryRequest request) throws ApiException {
        return createChartCategory(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add a new category to a chart.
     * 
     * @param request Request for postChartCategory. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> postChartCategoryWithHttpInfo(PostChartCategoryRequest request) throws ApiException {
        return createChartCategoryWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add a new category to a chart. (asynchronously)
     * 
     * @param request Request for postChartCategory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postChartCategoryAsync(PostChartCategoryRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return createChartCategoryAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postChartDataPoint
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChartDataPointCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postChartDataPoint(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postChartDataPoint(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postChartDataPoint(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling postChartDataPoint(Async)");
        }
        // verify the required parameter 'dataPoint' is set
        if (dataPoint == null) {
            throw new ApiException("Missing the required parameter 'dataPoint' when calling postChartDataPoint(Async)");
        }
        Object postBody = dataPoint;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add a new data point to a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart createChartDataPoint(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = createChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = createChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add a new data point to a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> createChartDataPointWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add a new data point to a chart series. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChartDataPointAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postChartDataPoint
     * @param request Request for postChartDataPoint. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postChartDataPointCall(PostChartDataPointRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createChartDataPointCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Add a new data point to a chart series.
     * 
     * @param request Request for postChartDataPoint. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart postChartDataPoint(PostChartDataPointRequest request) throws ApiException {
        return createChartDataPoint(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add a new data point to a chart series.
     * 
     * @param request Request for postChartDataPoint. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> postChartDataPointWithHttpInfo(PostChartDataPointRequest request) throws ApiException {
        return createChartDataPointWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add a new data point to a chart series. (asynchronously)
     * 
     * @param request Request for postChartDataPoint. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postChartDataPointAsync(PostChartDataPointRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return createChartDataPointAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postChartSeries
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChartSeriesCall(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postChartSeries(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postChartSeries(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postChartSeries(Async)");
        }
        // verify the required parameter 'series' is set
        if (series == null) {
            throw new ApiException("Missing the required parameter 'series' when calling postChartSeries(Async)");
        }
        Object postBody = series;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add a new series to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart createChartSeries(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = createChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, series, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = createChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, series, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add a new series to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> createChartSeriesWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createChartSeriesCall(name, slideIndex, shapeIndex, series, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add a new series to a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChartSeriesAsync(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChartSeriesCall(name, slideIndex, shapeIndex, series, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postChartSeries
     * @param request Request for postChartSeries. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postChartSeriesCall(PostChartSeriesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createChartSeriesCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Add a new series to a chart.
     * 
     * @param request Request for postChartSeries. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart postChartSeries(PostChartSeriesRequest request) throws ApiException {
        return createChartSeries(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add a new series to a chart.
     * 
     * @param request Request for postChartSeries. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> postChartSeriesWithHttpInfo(PostChartSeriesRequest request) throws ApiException {
        return createChartSeriesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add a new series to a chart. (asynchronously)
     * 
     * @param request Request for postChartSeries. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postChartSeriesAsync(PostChartSeriesRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return createChartSeriesAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postCopyLayoutSlideFromSourcePresentation
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyLayoutSlideCall(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCopyLayoutSlideFromSourcePresentation(Async)");
        }
        // verify the required parameter 'cloneFrom' is set
        if (cloneFrom == null) {
            throw new ApiException("Missing the required parameter 'cloneFrom' when calling postCopyLayoutSlideFromSourcePresentation(Async)");
        }
        // verify the required parameter 'cloneFromPosition' is set
        if (cloneFromPosition == null) {
            throw new ApiException("Missing the required parameter 'cloneFromPosition' when calling postCopyLayoutSlideFromSourcePresentation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "cloneFrom", cloneFrom);
        apiClient.addQueryParameter(queryParams, "cloneFromPosition", cloneFromPosition);
        apiClient.addQueryParameter(queryParams, "cloneFromStorage", cloneFromStorage);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (cloneFromPassword != null)
        headerParams.put("cloneFromPassword", apiClient.parameterToString(cloneFromPassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy layoutSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlide copyLayoutSlide(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlide> resp = copyLayoutSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlide> resp = copyLayoutSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Copy layoutSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlide> copyLayoutSlideWithHttpInfo(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = copyLayoutSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Copy layoutSlide from source presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyLayoutSlideAsync(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage, final ApiCallback<LayoutSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyLayoutSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postCopyLayoutSlideFromSourcePresentation
     * @param request Request for postCopyLayoutSlideFromSourcePresentation. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postCopyLayoutSlideFromSourcePresentationCall(PostCopyLayoutSlideFromSourcePresentationRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return copyLayoutSlideCall(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Copy layoutSlide from source presentation.
     * 
     * @param request Request for postCopyLayoutSlideFromSourcePresentation. (required)
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public LayoutSlide postCopyLayoutSlideFromSourcePresentation(PostCopyLayoutSlideFromSourcePresentationRequest request) throws ApiException {
        return copyLayoutSlide(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Copy layoutSlide from source presentation.
     * 
     * @param request Request for postCopyLayoutSlideFromSourcePresentation. (required)
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<LayoutSlide> postCopyLayoutSlideFromSourcePresentationWithHttpInfo(PostCopyLayoutSlideFromSourcePresentationRequest request) throws ApiException {
        return copyLayoutSlideWithHttpInfo(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Copy layoutSlide from source presentation. (asynchronously)
     * 
     * @param request Request for postCopyLayoutSlideFromSourcePresentation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postCopyLayoutSlideFromSourcePresentationAsync(PostCopyLayoutSlideFromSourcePresentationRequest request, final ApiCallback<LayoutSlide> callback) throws ApiException {
        return copyLayoutSlideAsync(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postCopyMasterSlideFromSourcePresentation
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyMasterSlideCall(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCopyMasterSlideFromSourcePresentation(Async)");
        }
        // verify the required parameter 'cloneFrom' is set
        if (cloneFrom == null) {
            throw new ApiException("Missing the required parameter 'cloneFrom' when calling postCopyMasterSlideFromSourcePresentation(Async)");
        }
        // verify the required parameter 'cloneFromPosition' is set
        if (cloneFromPosition == null) {
            throw new ApiException("Missing the required parameter 'cloneFromPosition' when calling postCopyMasterSlideFromSourcePresentation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/masterSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "cloneFrom", cloneFrom);
        apiClient.addQueryParameter(queryParams, "cloneFromPosition", cloneFromPosition);
        apiClient.addQueryParameter(queryParams, "cloneFromStorage", cloneFromStorage);
        apiClient.addQueryParameter(queryParams, "applyToAll", applyToAll);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (cloneFromPassword != null)
        headerParams.put("cloneFromPassword", apiClient.parameterToString(cloneFromPassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy masterSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return MasterSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MasterSlide copyMasterSlide(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<MasterSlide> resp = copyMasterSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<MasterSlide> resp = copyMasterSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Copy masterSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;MasterSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MasterSlide> copyMasterSlideWithHttpInfo(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = copyMasterSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage, null, null);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Copy masterSlide from source presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyMasterSlideAsync(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage, final ApiCallback<MasterSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyMasterSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postCopyMasterSlideFromSourcePresentation
     * @param request Request for postCopyMasterSlideFromSourcePresentation. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postCopyMasterSlideFromSourcePresentationCall(PostCopyMasterSlideFromSourcePresentationRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return copyMasterSlideCall(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getApplyToAll(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Copy masterSlide from source presentation.
     * 
     * @param request Request for postCopyMasterSlideFromSourcePresentation. (required)
     * @return MasterSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public MasterSlide postCopyMasterSlideFromSourcePresentation(PostCopyMasterSlideFromSourcePresentationRequest request) throws ApiException {
        return copyMasterSlide(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getApplyToAll(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Copy masterSlide from source presentation.
     * 
     * @param request Request for postCopyMasterSlideFromSourcePresentation. (required)
     * @return ApiResponse&lt;MasterSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<MasterSlide> postCopyMasterSlideFromSourcePresentationWithHttpInfo(PostCopyMasterSlideFromSourcePresentationRequest request) throws ApiException {
        return copyMasterSlideWithHttpInfo(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getApplyToAll(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Copy masterSlide from source presentation. (asynchronously)
     * 
     * @param request Request for postCopyMasterSlideFromSourcePresentation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postCopyMasterSlideFromSourcePresentationAsync(PostCopyMasterSlideFromSourcePresentationRequest request, final ApiCallback<MasterSlide> callback) throws ApiException {
        return copyMasterSlideAsync(request.getName(), request.getCloneFrom(), request.getCloneFromPosition(), request.getCloneFromPassword(), request.getCloneFromStorage(), request.getApplyToAll(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postExportImageWithDefaultFormat
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatOnlineCall(byte[] document, Integer index, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postExportImageWithDefaultFormat(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling postExportImageWithDefaultFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/{index}"
            .replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image binary data.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImageDefaultFormatOnline(byte[] document, Integer index, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageDefaultFormatOnlineWithHttpInfo(document, index, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageDefaultFormatOnlineWithHttpInfo(document, index, password);
            return resp.getData();
        }
    }

    /**
     * Get image binary data.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageDefaultFormatOnlineWithHttpInfo(byte[] document, Integer index, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageDefaultFormatOnlineCall(document, index, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image binary data. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatOnlineAsync(byte[] document, Integer index, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageDefaultFormatOnlineCall(document, index, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postExportImageWithDefaultFormat
     * @param request Request for postExportImageWithDefaultFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImageWithDefaultFormatCall(PostExportImageWithDefaultFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImageDefaultFormatOnlineCall(request.getDocument(), request.getIndex(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Get image binary data.
     * 
     * @param request Request for postExportImageWithDefaultFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postExportImageWithDefaultFormat(PostExportImageWithDefaultFormatRequest request) throws ApiException {
        return downloadImageDefaultFormatOnline(request.getDocument(), request.getIndex(), request.getPassword());
    }

    /**
     * Get image binary data.
     * 
     * @param request Request for postExportImageWithDefaultFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postExportImageWithDefaultFormatWithHttpInfo(PostExportImageWithDefaultFormatRequest request) throws ApiException {
        return downloadImageDefaultFormatOnlineWithHttpInfo(request.getDocument(), request.getIndex(), request.getPassword());
    }

    /**
     * Get image binary data. (asynchronously)
     * 
     * @param request Request for postExportImageWithDefaultFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImageWithDefaultFormatAsync(PostExportImageWithDefaultFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImageDefaultFormatOnlineAsync(request.getDocument(), request.getIndex(), request.getPassword(), callback);
    }
    /**
     * Build call for postExportImageWithFormat
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageOnlineCall(byte[] document, Integer index, ImageExportFormat format, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postExportImageWithFormat(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling postExportImageWithFormat(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postExportImageWithFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/{index}/{format}"
            .replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image in specified format.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImageOnline(byte[] document, Integer index, ImageExportFormat format, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageOnlineWithHttpInfo(document, index, format, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageOnlineWithHttpInfo(document, index, format, password);
            return resp.getData();
        }
    }

    /**
     * Get image in specified format.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageOnlineWithHttpInfo(byte[] document, Integer index, ImageExportFormat format, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageOnlineCall(document, index, format, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image in specified format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageOnlineAsync(byte[] document, Integer index, ImageExportFormat format, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageOnlineCall(document, index, format, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postExportImageWithFormat
     * @param request Request for postExportImageWithFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImageWithFormatCall(PostExportImageWithFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImageOnlineCall(request.getDocument(), request.getIndex(), request.getFormat(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Get image in specified format.
     * 
     * @param request Request for postExportImageWithFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postExportImageWithFormat(PostExportImageWithFormatRequest request) throws ApiException {
        return downloadImageOnline(request.getDocument(), request.getIndex(), request.getFormat(), request.getPassword());
    }

    /**
     * Get image in specified format.
     * 
     * @param request Request for postExportImageWithFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postExportImageWithFormatWithHttpInfo(PostExportImageWithFormatRequest request) throws ApiException {
        return downloadImageOnlineWithHttpInfo(request.getDocument(), request.getIndex(), request.getFormat(), request.getPassword());
    }

    /**
     * Get image in specified format. (asynchronously)
     * 
     * @param request Request for postExportImageWithFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImageWithFormatAsync(PostExportImageWithFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImageOnlineAsync(request.getDocument(), request.getIndex(), request.getFormat(), request.getPassword(), callback);
    }
    /**
     * Build call for postExportImagesFromRequestWithFormat
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesOnlineCall(byte[] document, ImageExportFormat format, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postExportImagesFromRequestWithFormat(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postExportImagesFromRequestWithFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/download/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images in specified format. 
     * 
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImagesOnline(byte[] document, ImageExportFormat format, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesOnlineWithHttpInfo(document, format, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesOnlineWithHttpInfo(document, format, password);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images in specified format. 
     * 
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesOnlineWithHttpInfo(byte[] document, ImageExportFormat format, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesOnlineCall(document, format, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images in specified format.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesOnlineAsync(byte[] document, ImageExportFormat format, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesOnlineCall(document, format, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postExportImagesFromRequestWithFormat
     * @param request Request for postExportImagesFromRequestWithFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImagesFromRequestWithFormatCall(PostExportImagesFromRequestWithFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImagesOnlineCall(request.getDocument(), request.getFormat(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Get all presentation images in specified format. 
     * 
     * @param request Request for postExportImagesFromRequestWithFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postExportImagesFromRequestWithFormat(PostExportImagesFromRequestWithFormatRequest request) throws ApiException {
        return downloadImagesOnline(request.getDocument(), request.getFormat(), request.getPassword());
    }

    /**
     * Get all presentation images in specified format. 
     * 
     * @param request Request for postExportImagesFromRequestWithFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postExportImagesFromRequestWithFormatWithHttpInfo(PostExportImagesFromRequestWithFormatRequest request) throws ApiException {
        return downloadImagesOnlineWithHttpInfo(request.getDocument(), request.getFormat(), request.getPassword());
    }

    /**
     * Get all presentation images in specified format.  (asynchronously)
     * 
     * @param request Request for postExportImagesFromRequestWithFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImagesFromRequestWithFormatAsync(PostExportImagesFromRequestWithFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImagesOnlineAsync(request.getDocument(), request.getFormat(), request.getPassword(), callback);
    }
    /**
     * Build call for postExportImagesWithDefaultFormat
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postExportImagesWithDefaultFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/download"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images.
     * 
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImagesDefaultFormat(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesDefaultFormatWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesDefaultFormatWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images.
     * 
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesDefaultFormatWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesDefaultFormatCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images. (asynchronously)
     * 
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatAsync(String name, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesDefaultFormatCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postExportImagesWithDefaultFormat
     * @param request Request for postExportImagesWithDefaultFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImagesWithDefaultFormatCall(PostExportImagesWithDefaultFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImagesDefaultFormatCall(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Get all presentation images.
     * 
     * @param request Request for postExportImagesWithDefaultFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postExportImagesWithDefaultFormat(PostExportImagesWithDefaultFormatRequest request) throws ApiException {
        return downloadImagesDefaultFormat(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get all presentation images.
     * 
     * @param request Request for postExportImagesWithDefaultFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postExportImagesWithDefaultFormatWithHttpInfo(PostExportImagesWithDefaultFormatRequest request) throws ApiException {
        return downloadImagesDefaultFormatWithHttpInfo(request.getName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get all presentation images. (asynchronously)
     * 
     * @param request Request for postExportImagesWithDefaultFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImagesWithDefaultFormatAsync(PostExportImagesWithDefaultFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImagesDefaultFormatAsync(request.getName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postExportImagesWithFormat
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesCall(String name, ImageExportFormat format, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postExportImagesWithFormat(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postExportImagesWithFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/download/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images in specified format.
     * 
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImages(String name, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesWithHttpInfo(name, format, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesWithHttpInfo(name, format, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images in specified format.
     * 
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesWithHttpInfo(String name, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesCall(name, format, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images in specified format. (asynchronously)
     * 
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesAsync(String name, ImageExportFormat format, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesCall(name, format, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postExportImagesWithFormat
     * @param request Request for postExportImagesWithFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImagesWithFormatCall(PostExportImagesWithFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImagesCall(request.getName(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Get all presentation images in specified format.
     * 
     * @param request Request for postExportImagesWithFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postExportImagesWithFormat(PostExportImagesWithFormatRequest request) throws ApiException {
        return downloadImages(request.getName(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get all presentation images in specified format.
     * 
     * @param request Request for postExportImagesWithFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postExportImagesWithFormatWithHttpInfo(PostExportImagesWithFormatRequest request) throws ApiException {
        return downloadImagesWithHttpInfo(request.getName(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Get all presentation images in specified format. (asynchronously)
     * 
     * @param request Request for postExportImagesWithFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportImagesWithFormatAsync(PostExportImagesWithFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImagesAsync(request.getName(), request.getFormat(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postExportShape
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadShapeOnlineCall(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postExportShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postExportShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postExportShape(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postExportShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadShapeOnline(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, password, storage, scaleX, scaleY, bounds, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, password, storage, scaleX, scaleY, bounds, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadShapeOnlineWithHttpInfo(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadShapeOnlineCall(document, slideIndex, shapeIndex, format, password, storage, scaleX, scaleY, bounds, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadShapeOnlineAsync(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadShapeOnlineCall(document, slideIndex, shapeIndex, format, password, storage, scaleX, scaleY, bounds, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postExportShape
     * @param request Request for postExportShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportShapeCall(PostExportShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadShapeOnlineCall(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for postExportShape. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postExportShape(PostExportShapeRequest request) throws ApiException {
        return downloadShapeOnline(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for postExportShape. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postExportShapeWithHttpInfo(PostExportShapeRequest request) throws ApiException {
        return downloadShapeOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param request Request for postExportShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportShapeAsync(PostExportShapeRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadShapeOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postExportSlide
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSlideOnlineCall(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postExportSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postExportSlide(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postExportSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadSlideOnline(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadSlideOnlineCall(document, slideIndex, format, width, height, password, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSlideOnlineAsync(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSlideOnlineCall(document, slideIndex, format, width, height, password, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postExportSlide
     * @param request Request for postExportSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportSlideCall(PostExportSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadSlideOnlineCall(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for postExportSlide. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postExportSlide(PostExportSlideRequest request) throws ApiException {
        return downloadSlideOnline(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for postExportSlide. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postExportSlideWithHttpInfo(PostExportSlideRequest request) throws ApiException {
        return downloadSlideOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param request Request for postExportSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postExportSlideAsync(PostExportSlideRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadSlideOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postGetNotesSlide
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideOnlineCall(byte[] document, Integer slideIndex, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postGetNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postGetNotesSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read notes slide info.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide getNotesSlideOnline(byte[] document, Integer slideIndex, String password) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = getNotesSlideOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = getNotesSlideOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        }
    }

    /**
     * Read notes slide info.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> getNotesSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, String password) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideOnlineCall(document, slideIndex, password, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read notes slide info. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideOnlineAsync(byte[] document, Integer slideIndex, String password, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideOnlineCall(document, slideIndex, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postGetNotesSlide
     * @param request Request for postGetNotesSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postGetNotesSlideCall(PostGetNotesSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return getNotesSlideOnlineCall(request.getDocument(), request.getSlideIndex(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Read notes slide info.
     * 
     * @param request Request for postGetNotesSlide. (required)
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public NotesSlide postGetNotesSlide(PostGetNotesSlideRequest request) throws ApiException {
        return getNotesSlideOnline(request.getDocument(), request.getSlideIndex(), request.getPassword());
    }

    /**
     * Read notes slide info.
     * 
     * @param request Request for postGetNotesSlide. (required)
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<NotesSlide> postGetNotesSlideWithHttpInfo(PostGetNotesSlideRequest request) throws ApiException {
        return getNotesSlideOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getPassword());
    }

    /**
     * Read notes slide info. (asynchronously)
     * 
     * @param request Request for postGetNotesSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postGetNotesSlideAsync(PostGetNotesSlideRequest request, final ApiCallback<NotesSlide> callback) throws ApiException {
        return getNotesSlideOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getPassword(), callback);
    }
    /**
     * Build call for postGetNotesSlideExists
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsOnlineCall(byte[] document, Integer slideIndex, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postGetNotesSlideExists(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postGetNotesSlideExists(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/notesSlide/exist"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return EntityExists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityExists notesSlideExistsOnline(byte[] document, Integer slideIndex, String password) throws ApiException {
        try {
            ApiResponse<EntityExists> resp = notesSlideExistsOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<EntityExists> resp = notesSlideExistsOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        }
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;EntityExists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityExists> notesSlideExistsOnlineWithHttpInfo(byte[] document, Integer slideIndex, String password) throws ApiException {
        com.squareup.okhttp.Call call = notesSlideExistsOnlineCall(document, slideIndex, password, null, null);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get info whether a notes slide exists. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsOnlineAsync(byte[] document, Integer slideIndex, String password, final ApiCallback<EntityExists> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notesSlideExistsOnlineCall(document, slideIndex, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postGetNotesSlideExists
     * @param request Request for postGetNotesSlideExists. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postGetNotesSlideExistsCall(PostGetNotesSlideExistsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return notesSlideExistsOnlineCall(request.getDocument(), request.getSlideIndex(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param request Request for postGetNotesSlideExists. (required)
     * @return EntityExists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public EntityExists postGetNotesSlideExists(PostGetNotesSlideExistsRequest request) throws ApiException {
        return notesSlideExistsOnline(request.getDocument(), request.getSlideIndex(), request.getPassword());
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param request Request for postGetNotesSlideExists. (required)
     * @return ApiResponse&lt;EntityExists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EntityExists> postGetNotesSlideExistsWithHttpInfo(PostGetNotesSlideExistsRequest request) throws ApiException {
        return notesSlideExistsOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getPassword());
    }

    /**
     * Get info whether a notes slide exists. (asynchronously)
     * 
     * @param request Request for postGetNotesSlideExists. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postGetNotesSlideExistsAsync(PostGetNotesSlideExistsRequest request, final ApiCallback<EntityExists> callback) throws ApiException {
        return notesSlideExistsOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getPassword(), callback);
    }
    /**
     * Build call for postGetNotesSlideWithFormat
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideOnlineCall(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postGetNotesSlideWithFormat(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postGetNotesSlideWithFormat(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postGetNotesSlideWithFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/notesSlide/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadNotesSlideOnline(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadNotesSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadNotesSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadNotesSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadNotesSlideOnlineCall(document, slideIndex, format, width, height, password, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert notes slide to the specified image format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width Output file width. 
     * @param height Output file height. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideOnlineAsync(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadNotesSlideOnlineCall(document, slideIndex, format, width, height, password, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postGetNotesSlideWithFormat
     * @param request Request for postGetNotesSlideWithFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postGetNotesSlideWithFormatCall(PostGetNotesSlideWithFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadNotesSlideOnlineCall(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param request Request for postGetNotesSlideWithFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postGetNotesSlideWithFormat(PostGetNotesSlideWithFormatRequest request) throws ApiException {
        return downloadNotesSlideOnline(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFontsFolder());
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param request Request for postGetNotesSlideWithFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postGetNotesSlideWithFormatWithHttpInfo(PostGetNotesSlideWithFormatRequest request) throws ApiException {
        return downloadNotesSlideOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFontsFolder());
    }

    /**
     * Convert notes slide to the specified image format. (asynchronously)
     * 
     * @param request Request for postGetNotesSlideWithFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postGetNotesSlideWithFormatAsync(PostGetNotesSlideWithFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadNotesSlideOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postImagesFromRequestWithDefaultFormat
     * @param document Document data. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatOnlineCall(byte[] document, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postImagesFromRequestWithDefaultFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/download"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImagesDefaultFormatOnline(byte[] document, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesDefaultFormatOnlineWithHttpInfo(document, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesDefaultFormatOnlineWithHttpInfo(document, password);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesDefaultFormatOnlineWithHttpInfo(byte[] document, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesDefaultFormatOnlineCall(document, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatOnlineAsync(byte[] document, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesDefaultFormatOnlineCall(document, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postImagesFromRequestWithDefaultFormat
     * @param request Request for postImagesFromRequestWithDefaultFormat. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postImagesFromRequestWithDefaultFormatCall(PostImagesFromRequestWithDefaultFormatRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadImagesDefaultFormatOnlineCall(request.getDocument(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Get all presentation images.
     * 
     * @param request Request for postImagesFromRequestWithDefaultFormat. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postImagesFromRequestWithDefaultFormat(PostImagesFromRequestWithDefaultFormatRequest request) throws ApiException {
        return downloadImagesDefaultFormatOnline(request.getDocument(), request.getPassword());
    }

    /**
     * Get all presentation images.
     * 
     * @param request Request for postImagesFromRequestWithDefaultFormat. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postImagesFromRequestWithDefaultFormatWithHttpInfo(PostImagesFromRequestWithDefaultFormatRequest request) throws ApiException {
        return downloadImagesDefaultFormatOnlineWithHttpInfo(request.getDocument(), request.getPassword());
    }

    /**
     * Get all presentation images. (asynchronously)
     * 
     * @param request Request for postImagesFromRequestWithDefaultFormat. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postImagesFromRequestWithDefaultFormatAsync(PostImagesFromRequestWithDefaultFormatRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadImagesDefaultFormatOnlineAsync(request.getDocument(), request.getPassword(), callback);
    }
    /**
     * Build call for postNotesSlideAddNewParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNotesSlideAddNewParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postNotesSlideAddNewParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postNotesSlideAddNewParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postNotesSlideAddNewParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph createNotesSlideParagraph(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = createNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = createNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> createNotesSlideParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createNotesSlideParagraphCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNotesSlideParagraphCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postNotesSlideAddNewParagraph
     * @param request Request for postNotesSlideAddNewParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideAddNewParagraphCall(PostNotesSlideAddNewParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createNotesSlideParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Creates new paragraph.
     * 
     * @param request Request for postNotesSlideAddNewParagraph. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph postNotesSlideAddNewParagraph(PostNotesSlideAddNewParagraphRequest request) throws ApiException {
        return createNotesSlideParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new paragraph.
     * 
     * @param request Request for postNotesSlideAddNewParagraph. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> postNotesSlideAddNewParagraphWithHttpInfo(PostNotesSlideAddNewParagraphRequest request) throws ApiException {
        return createNotesSlideParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new paragraph. (asynchronously)
     * 
     * @param request Request for postNotesSlideAddNewParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideAddNewParagraphAsync(PostNotesSlideAddNewParagraphRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return createNotesSlideParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postNotesSlideAddNewPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNotesSlidePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNotesSlideAddNewPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postNotesSlideAddNewPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postNotesSlideAddNewPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling postNotesSlideAddNewPortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postNotesSlideAddNewPortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion createNotesSlidePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = createNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = createNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> createNotesSlidePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNotesSlidePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postNotesSlideAddNewPortion
     * @param request Request for postNotesSlideAddNewPortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideAddNewPortionCall(PostNotesSlideAddNewPortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createNotesSlidePortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Creates new portion.
     * 
     * @param request Request for postNotesSlideAddNewPortion. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion postNotesSlideAddNewPortion(PostNotesSlideAddNewPortionRequest request) throws ApiException {
        return createNotesSlidePortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new portion.
     * 
     * @param request Request for postNotesSlideAddNewPortion. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> postNotesSlideAddNewPortionWithHttpInfo(PostNotesSlideAddNewPortionRequest request) throws ApiException {
        return createNotesSlidePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Creates new portion. (asynchronously)
     * 
     * @param request Request for postNotesSlideAddNewPortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideAddNewPortionAsync(PostNotesSlideAddNewPortionRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return createNotesSlidePortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postNotesSlideAddNewShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideShapeCall(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNotesSlideAddNewShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postNotesSlideAddNewShape(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling postNotesSlideAddNewShape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeToClone", shapeToClone);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase createNotesSlideShape(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = createNotesSlideShapeWithHttpInfo(name, slideIndex, dto, shapeToClone, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = createNotesSlideShapeWithHttpInfo(name, slideIndex, dto, shapeToClone, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> createNotesSlideShapeWithHttpInfo(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createNotesSlideShapeCall(name, slideIndex, dto, shapeToClone, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create new shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideShapeAsync(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNotesSlideShapeCall(name, slideIndex, dto, shapeToClone, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postNotesSlideAddNewShape
     * @param request Request for postNotesSlideAddNewShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideAddNewShapeCall(PostNotesSlideAddNewShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createNotesSlideShapeCall(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create new shape.
     * 
     * @param request Request for postNotesSlideAddNewShape. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase postNotesSlideAddNewShape(PostNotesSlideAddNewShapeRequest request) throws ApiException {
        return createNotesSlideShape(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create new shape.
     * 
     * @param request Request for postNotesSlideAddNewShape. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> postNotesSlideAddNewShapeWithHttpInfo(PostNotesSlideAddNewShapeRequest request) throws ApiException {
        return createNotesSlideShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create new shape. (asynchronously)
     * 
     * @param request Request for postNotesSlideAddNewShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideAddNewShapeAsync(PostNotesSlideAddNewShapeRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return createNotesSlideShapeAsync(request.getName(), request.getSlideIndex(), request.getDto(), request.getShapeToClone(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postNotesSlideShapeSaveAs
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNotesSlideShapeSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postNotesSlideShapeSaveAs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postNotesSlideShapeSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postNotesSlideShapeSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadNotesSlideShape(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadNotesSlideShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadNotesSlideShapeCall(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadNotesSlideShapeCall(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postNotesSlideShapeSaveAs
     * @param request Request for postNotesSlideShapeSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideShapeSaveAsCall(PostNotesSlideShapeSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadNotesSlideShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for postNotesSlideShapeSaveAs. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postNotesSlideShapeSaveAs(PostNotesSlideShapeSaveAsRequest request) throws ApiException {
        return downloadNotesSlideShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for postNotesSlideShapeSaveAs. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postNotesSlideShapeSaveAsWithHttpInfo(PostNotesSlideShapeSaveAsRequest request) throws ApiException {
        return downloadNotesSlideShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param request Request for postNotesSlideShapeSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postNotesSlideShapeSaveAsAsync(PostNotesSlideShapeSaveAsRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadNotesSlideShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postPresentationMerge
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeCall(String name, PresentationsMergeRequest request, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postPresentationMerge(Async)");
        }
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling postPresentationMerge(Async)");
        }
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document merge(String name, PresentationsMergeRequest request, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = mergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = mergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> mergeWithHttpInfo(String name, PresentationsMergeRequest request, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = mergeCall(name, request, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeAsync(String name, PresentationsMergeRequest request, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeCall(name, request, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postPresentationMerge
     * @param request Request for postPresentationMerge. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postPresentationMergeCall(PostPresentationMergeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return mergeCall(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     * 
     * @param request Request for postPresentationMerge. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document postPresentationMerge(PostPresentationMergeRequest request) throws ApiException {
        return merge(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     * 
     * @param request Request for postPresentationMerge. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> postPresentationMergeWithHttpInfo(PostPresentationMergeRequest request) throws ApiException {
        return mergeWithHttpInfo(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter. (asynchronously)
     * 
     * @param request Request for postPresentationMerge. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postPresentationMergeAsync(PostPresentationMergeRequest request, final ApiCallback<Document> callback) throws ApiException {
        return mergeAsync(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postPresentationReplaceText
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextOnlineCall(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postPresentationReplaceText(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling postPresentationReplaceText(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling postPresentationReplaceText(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/replaceText"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File replacePresentationTextOnline(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        try {
            ApiResponse<File> resp = replacePresentationTextOnlineWithHttpInfo(document, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = replacePresentationTextOnlineWithHttpInfo(document, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        }
    }

    /**
     * Replace text with a new value.
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> replacePresentationTextOnlineWithHttpInfo(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        com.squareup.okhttp.Call call = replacePresentationTextOnlineCall(document, oldValue, newValue, ignoreCase, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextOnlineAsync(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replacePresentationTextOnlineCall(document, oldValue, newValue, ignoreCase, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postPresentationReplaceText
     * @param request Request for postPresentationReplaceText. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postPresentationReplaceTextCall(PostPresentationReplaceTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return replacePresentationTextOnlineCall(request.getDocument(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param request Request for postPresentationReplaceText. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postPresentationReplaceText(PostPresentationReplaceTextRequest request) throws ApiException {
        return replacePresentationTextOnline(request.getDocument(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword());
    }

    /**
     * Replace text with a new value.
     * 
     * @param request Request for postPresentationReplaceText. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postPresentationReplaceTextWithHttpInfo(PostPresentationReplaceTextRequest request) throws ApiException {
        return replacePresentationTextOnlineWithHttpInfo(request.getDocument(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword());
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param request Request for postPresentationReplaceText. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postPresentationReplaceTextAsync(PostPresentationReplaceTextRequest request, final ApiCallback<File> callback) throws ApiException {
        return replacePresentationTextOnlineAsync(request.getDocument(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), callback);
    }
    /**
     * Build call for postPresentationSplit
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitOnlineCall(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postPresentationSplit(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postPresentationSplit(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/split/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "from", from);
        apiClient.addQueryParameter(queryParams, "to", to);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File splitOnline(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = splitOnlineWithHttpInfo(document, format, width, height, from, to, password, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = splitOnlineWithHttpInfo(document, format, width, height, from, to, password, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> splitOnlineWithHttpInfo(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = splitOnlineCall(document, format, width, height, from, to, password, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitOnlineAsync(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitOnlineCall(document, format, width, height, from, to, password, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postPresentationSplit
     * @param request Request for postPresentationSplit. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postPresentationSplitCall(PostPresentationSplitRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return splitOnlineCall(request.getDocument(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param request Request for postPresentationSplit. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postPresentationSplit(PostPresentationSplitRequest request) throws ApiException {
        return splitOnline(request.getDocument(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param request Request for postPresentationSplit. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postPresentationSplitWithHttpInfo(PostPresentationSplitRequest request) throws ApiException {
        return splitOnlineWithHttpInfo(request.getDocument(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.  (asynchronously)
     * 
     * @param request Request for postPresentationSplit. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postPresentationSplitAsync(PostPresentationSplitRequest request, final ApiCallback<File> callback) throws ApiException {
        return splitOnlineAsync(request.getDocument(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postSection
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSectionCall(String name, String sectionName, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSection(Async)");
        }
        // verify the required parameter 'sectionName' is set
        if (sectionName == null) {
            throw new ApiException("Missing the required parameter 'sectionName' when calling postSection(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sectionName", sectionName);
        apiClient.addQueryParameter(queryParams, "slideIndex", slideIndex);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a section starting at a specified slide index.
     * 
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections createSection(String name, String sectionName, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = createSectionWithHttpInfo(name, sectionName, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = createSectionWithHttpInfo(name, sectionName, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a section starting at a specified slide index.
     * 
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> createSectionWithHttpInfo(String name, String sectionName, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSectionCall(name, sectionName, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a section starting at a specified slide index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSectionAsync(String name, String sectionName, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSectionCall(name, sectionName, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSection
     * @param request Request for postSection. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSectionCall(PostSectionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createSectionCall(request.getName(), request.getSectionName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create a section starting at a specified slide index.
     * 
     * @param request Request for postSection. (required)
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Sections postSection(PostSectionRequest request) throws ApiException {
        return createSection(request.getName(), request.getSectionName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a section starting at a specified slide index.
     * 
     * @param request Request for postSection. (required)
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Sections> postSectionWithHttpInfo(PostSectionRequest request) throws ApiException {
        return createSectionWithHttpInfo(request.getName(), request.getSectionName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a section starting at a specified slide index. (asynchronously)
     * 
     * @param request Request for postSection. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSectionAsync(PostSectionRequest request, final ApiCallback<Sections> callback) throws ApiException {
        return createSectionAsync(request.getName(), request.getSectionName(), request.getSlideIndex(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSectionMove
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveSectionCall(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSectionMove(Async)");
        }
        // verify the required parameter 'sectionIndex' is set
        if (sectionIndex == null) {
            throw new ApiException("Missing the required parameter 'sectionIndex' when calling postSectionMove(Async)");
        }
        // verify the required parameter 'newPosition' is set
        if (newPosition == null) {
            throw new ApiException("Missing the required parameter 'newPosition' when calling postSectionMove(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections/{sectionIndex}/move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "sectionIndex" + "\\}", apiClient.objectToString(sectionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "newPosition", newPosition);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Move presentation section to a specified position.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections moveSection(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = moveSectionWithHttpInfo(name, sectionIndex, newPosition, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = moveSectionWithHttpInfo(name, sectionIndex, newPosition, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Move presentation section to a specified position.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> moveSectionWithHttpInfo(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = moveSectionCall(name, sectionIndex, newPosition, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Move presentation section to a specified position. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveSectionAsync(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveSectionCall(name, sectionIndex, newPosition, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSectionMove
     * @param request Request for postSectionMove. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSectionMoveCall(PostSectionMoveRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return moveSectionCall(request.getName(), request.getSectionIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Move presentation section to a specified position.
     * 
     * @param request Request for postSectionMove. (required)
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Sections postSectionMove(PostSectionMoveRequest request) throws ApiException {
        return moveSection(request.getName(), request.getSectionIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Move presentation section to a specified position.
     * 
     * @param request Request for postSectionMove. (required)
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Sections> postSectionMoveWithHttpInfo(PostSectionMoveRequest request) throws ApiException {
        return moveSectionWithHttpInfo(request.getName(), request.getSectionIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Move presentation section to a specified position. (asynchronously)
     * 
     * @param request Request for postSectionMove. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSectionMoveAsync(PostSectionMoveRequest request, final ApiCallback<Sections> callback) throws ApiException {
        return moveSectionAsync(request.getName(), request.getSectionIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postShapeSaveAs
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postShapeSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postShapeSaveAs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postShapeSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postShapeSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadShape(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadShapeWithHttpInfo(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadShapeWithHttpInfo(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadShapeCall(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadShapeCall(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postShapeSaveAs
     * @param request Request for postShapeSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postShapeSaveAsCall(PostShapeSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for postShapeSaveAs. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postShapeSaveAs(PostShapeSaveAsRequest request) throws ApiException {
        return downloadShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for postShapeSaveAs. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postShapeSaveAsWithHttpInfo(PostShapeSaveAsRequest request) throws ApiException {
        return downloadShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param request Request for postShapeSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postShapeSaveAsAsync(PostShapeSaveAsRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postSlideAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAnimationEffectCall(String name, Integer slideIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling postSlideAnimationEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add an effect to slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createAnimationEffect(String name, Integer slideIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createAnimationEffectWithHttpInfo(name, slideIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createAnimationEffectWithHttpInfo(name, slideIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add an effect to slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createAnimationEffectWithHttpInfo(String name, Integer slideIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createAnimationEffectCall(name, slideIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add an effect to slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAnimationEffectAsync(String name, Integer slideIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAnimationEffectCall(name, slideIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlideAnimationEffect
     * @param request Request for postSlideAnimationEffect. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideAnimationEffectCall(PostSlideAnimationEffectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createAnimationEffectCall(request.getName(), request.getSlideIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Add an effect to slide animation.
     * 
     * @param request Request for postSlideAnimationEffect. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation postSlideAnimationEffect(PostSlideAnimationEffectRequest request) throws ApiException {
        return createAnimationEffect(request.getName(), request.getSlideIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add an effect to slide animation.
     * 
     * @param request Request for postSlideAnimationEffect. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> postSlideAnimationEffectWithHttpInfo(PostSlideAnimationEffectRequest request) throws ApiException {
        return createAnimationEffectWithHttpInfo(request.getName(), request.getSlideIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add an effect to slide animation. (asynchronously)
     * 
     * @param request Request for postSlideAnimationEffect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideAnimationEffectAsync(PostSlideAnimationEffectRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return createAnimationEffectAsync(request.getName(), request.getSlideIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlideAnimationInteractiveSequence
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceCall(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'sequence' is set
        if (sequence == null) {
            throw new ApiException("Missing the required parameter 'sequence' when calling postSlideAnimationInteractiveSequence(Async)");
        }
        Object postBody = sequence;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createAnimationInteractiveSequence(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequence, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequence, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createAnimationInteractiveSequenceWithHttpInfo(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceCall(name, slideIndex, sequence, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceAsync(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceCall(name, slideIndex, sequence, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlideAnimationInteractiveSequence
     * @param request Request for postSlideAnimationInteractiveSequence. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideAnimationInteractiveSequenceCall(PostSlideAnimationInteractiveSequenceRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createAnimationInteractiveSequenceCall(request.getName(), request.getSlideIndex(), request.getSequence(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set slide animation.
     * 
     * @param request Request for postSlideAnimationInteractiveSequence. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation postSlideAnimationInteractiveSequence(PostSlideAnimationInteractiveSequenceRequest request) throws ApiException {
        return createAnimationInteractiveSequence(request.getName(), request.getSlideIndex(), request.getSequence(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set slide animation.
     * 
     * @param request Request for postSlideAnimationInteractiveSequence. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> postSlideAnimationInteractiveSequenceWithHttpInfo(PostSlideAnimationInteractiveSequenceRequest request) throws ApiException {
        return createAnimationInteractiveSequenceWithHttpInfo(request.getName(), request.getSlideIndex(), request.getSequence(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set slide animation. (asynchronously)
     * 
     * @param request Request for postSlideAnimationInteractiveSequence. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideAnimationInteractiveSequenceAsync(PostSlideAnimationInteractiveSequenceRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return createAnimationInteractiveSequenceAsync(request.getName(), request.getSlideIndex(), request.getSequence(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlideAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling postSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling postSlideAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createAnimationInteractiveSequenceEffect(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add an animation effect to a slide interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlideAnimationInteractiveSequenceEffect
     * @param request Request for postSlideAnimationInteractiveSequenceEffect. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideAnimationInteractiveSequenceEffectCall(PostSlideAnimationInteractiveSequenceEffectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createAnimationInteractiveSequenceEffectCall(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     * 
     * @param request Request for postSlideAnimationInteractiveSequenceEffect. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation postSlideAnimationInteractiveSequenceEffect(PostSlideAnimationInteractiveSequenceEffectRequest request) throws ApiException {
        return createAnimationInteractiveSequenceEffect(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     * 
     * @param request Request for postSlideAnimationInteractiveSequenceEffect. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> postSlideAnimationInteractiveSequenceEffectWithHttpInfo(PostSlideAnimationInteractiveSequenceEffectRequest request) throws ApiException {
        return createAnimationInteractiveSequenceEffectWithHttpInfo(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Add an animation effect to a slide interactive sequence. (asynchronously)
     * 
     * @param request Request for postSlideAnimationInteractiveSequenceEffect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideAnimationInteractiveSequenceEffectAsync(PostSlideAnimationInteractiveSequenceEffectRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return createAnimationInteractiveSequenceEffectAsync(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlideReplaceText
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextOnlineCall(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postSlideReplaceText(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSlideReplaceText(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling postSlideReplaceText(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling postSlideReplaceText(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/replaceText"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace slide text with a new value.
     * 
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File replaceSlideTextOnline(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        try {
            ApiResponse<File> resp = replaceSlideTextOnlineWithHttpInfo(document, slideIndex, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = replaceSlideTextOnlineWithHttpInfo(document, slideIndex, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        }
    }

    /**
     * Replace slide text with a new value.
     * 
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> replaceSlideTextOnlineWithHttpInfo(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        com.squareup.okhttp.Call call = replaceSlideTextOnlineCall(document, slideIndex, oldValue, newValue, ignoreCase, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace slide text with a new value. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextOnlineAsync(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceSlideTextOnlineCall(document, slideIndex, oldValue, newValue, ignoreCase, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlideReplaceText
     * @param request Request for postSlideReplaceText. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideReplaceTextCall(PostSlideReplaceTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return replaceSlideTextOnlineCall(request.getDocument(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Replace slide text with a new value.
     * 
     * @param request Request for postSlideReplaceText. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postSlideReplaceText(PostSlideReplaceTextRequest request) throws ApiException {
        return replaceSlideTextOnline(request.getDocument(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword());
    }

    /**
     * Replace slide text with a new value.
     * 
     * @param request Request for postSlideReplaceText. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postSlideReplaceTextWithHttpInfo(PostSlideReplaceTextRequest request) throws ApiException {
        return replaceSlideTextOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword());
    }

    /**
     * Replace slide text with a new value. (asynchronously)
     * 
     * @param request Request for postSlideReplaceText. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideReplaceTextAsync(PostSlideReplaceTextRequest request, final ApiCallback<File> callback) throws ApiException {
        return replaceSlideTextOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), callback);
    }
    /**
     * Build call for postSlideSaveAs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSlideCall(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlideSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSlideSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postSlideSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadSlide(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadSlideWithHttpInfo(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadSlideWithHttpInfo(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadSlideWithHttpInfo(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadSlideCall(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSlideAsync(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSlideCall(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlideSaveAs
     * @param request Request for postSlideSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideSaveAsCall(PostSlideSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadSlideCall(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for postSlideSaveAs. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postSlideSaveAs(PostSlideSaveAsRequest request) throws ApiException {
        return downloadSlide(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for postSlideSaveAs. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postSlideSaveAsWithHttpInfo(PostSlideSaveAsRequest request) throws ApiException {
        return downloadSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param request Request for postSlideSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlideSaveAsAsync(PostSlideSaveAsRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadSlideAsync(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postSlidesAdd
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSlideCall(String name, String layoutAlias, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesAdd(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "layoutAlias", layoutAlias);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a slide.
     * 
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides createSlide(String name, String layoutAlias, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = createSlideWithHttpInfo(name, layoutAlias, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = createSlideWithHttpInfo(name, layoutAlias, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a slide.
     * 
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> createSlideWithHttpInfo(String name, String layoutAlias, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSlideCall(name, layoutAlias, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSlideAsync(String name, String layoutAlias, Integer position, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSlideCall(name, layoutAlias, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesAdd
     * @param request Request for postSlidesAdd. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesAddCall(PostSlidesAddRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createSlideCall(request.getName(), request.getLayoutAlias(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create a slide.
     * 
     * @param request Request for postSlidesAdd. (required)
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slides postSlidesAdd(PostSlidesAddRequest request) throws ApiException {
        return createSlide(request.getName(), request.getLayoutAlias(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a slide.
     * 
     * @param request Request for postSlidesAdd. (required)
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slides> postSlidesAddWithHttpInfo(PostSlidesAddRequest request) throws ApiException {
        return createSlideWithHttpInfo(request.getName(), request.getLayoutAlias(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a slide. (asynchronously)
     * 
     * @param request Request for postSlidesAdd. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesAddAsync(PostSlidesAddRequest request, final ApiCallback<Slides> callback) throws ApiException {
        return createSlideAsync(request.getName(), request.getLayoutAlias(), request.getPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesConvert
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertCall(byte[] document, ExportFormat format, String password, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling postSlidesConvert(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postSlidesConvert(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/convert/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File convert(byte[] document, ExportFormat format, String password, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = convertWithHttpInfo(document, format, password, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = convertWithHttpInfo(document, format, password, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> convertWithHttpInfo(byte[] document, ExportFormat format, String password, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = convertCall(document, format, password, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert presentation from request content to format specified. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertAsync(byte[] document, ExportFormat format, String password, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertCall(document, format, password, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesConvert
     * @param request Request for postSlidesConvert. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesConvertCall(PostSlidesConvertRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return convertCall(request.getDocument(), request.getFormat(), request.getPassword(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param request Request for postSlidesConvert. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postSlidesConvert(PostSlidesConvertRequest request) throws ApiException {
        return convert(request.getDocument(), request.getFormat(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param request Request for postSlidesConvert. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postSlidesConvertWithHttpInfo(PostSlidesConvertRequest request) throws ApiException {
        return convertWithHttpInfo(request.getDocument(), request.getFormat(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Convert presentation from request content to format specified. (asynchronously)
     * 
     * @param request Request for postSlidesConvert. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesConvertAsync(PostSlidesConvertRequest request, final ApiCallback<File> callback) throws ApiException {
        return convertAsync(request.getDocument(), request.getFormat(), request.getPassword(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postSlidesCopy
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copySlideCall(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesCopy(Async)");
        }
        // verify the required parameter 'slideToCopy' is set
        if (slideToCopy == null) {
            throw new ApiException("Missing the required parameter 'slideToCopy' when calling postSlidesCopy(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "slideToCopy", slideToCopy);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "source", source);
        apiClient.addQueryParameter(queryParams, "sourceStorage", sourceStorage);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (sourcePassword != null)
        headerParams.put("sourcePassword", apiClient.parameterToString(sourcePassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy a slide from the current or another presentation.
     * 
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides copySlide(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = copySlideWithHttpInfo(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = copySlideWithHttpInfo(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Copy a slide from the current or another presentation.
     * 
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> copySlideWithHttpInfo(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = copySlideCall(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Copy a slide from the current or another presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copySlideAsync(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copySlideCall(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesCopy
     * @param request Request for postSlidesCopy. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesCopyCall(PostSlidesCopyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return copySlideCall(request.getName(), request.getSlideToCopy(), request.getPosition(), request.getSource(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Copy a slide from the current or another presentation.
     * 
     * @param request Request for postSlidesCopy. (required)
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slides postSlidesCopy(PostSlidesCopyRequest request) throws ApiException {
        return copySlide(request.getName(), request.getSlideToCopy(), request.getPosition(), request.getSource(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Copy a slide from the current or another presentation.
     * 
     * @param request Request for postSlidesCopy. (required)
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slides> postSlidesCopyWithHttpInfo(PostSlidesCopyRequest request) throws ApiException {
        return copySlideWithHttpInfo(request.getName(), request.getSlideToCopy(), request.getPosition(), request.getSource(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Copy a slide from the current or another presentation. (asynchronously)
     * 
     * @param request Request for postSlidesCopy. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesCopyAsync(PostSlidesCopyRequest request, final ApiCallback<Slides> callback) throws ApiException {
        return copySlideAsync(request.getName(), request.getSlideToCopy(), request.getPosition(), request.getSource(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesDocument
     * @param name Document name. (required)
     * @param data Document input data. 
     * @param inputPassword The password for input document. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPresentationCall(String name, byte[] data, String inputPassword, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesDocument(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (inputPassword != null)
        headerParams.put("inputPassword", apiClient.parameterToString(inputPassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (data != null)
        formParams.put("data", data);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param data Document input data. 
     * @param inputPassword The password for input document. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document createPresentation(String name, byte[] data, String inputPassword, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = createPresentationWithHttpInfo(name, data, inputPassword, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = createPresentationWithHttpInfo(name, data, inputPassword, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param data Document input data. 
     * @param inputPassword The password for input document. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> createPresentationWithHttpInfo(String name, byte[] data, String inputPassword, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createPresentationCall(name, data, inputPassword, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param data Document input data. 
     * @param inputPassword The password for input document. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPresentationAsync(String name, byte[] data, String inputPassword, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPresentationCall(name, data, inputPassword, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesDocument
     * @param request Request for postSlidesDocument. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentCall(PostSlidesDocumentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createPresentationCall(request.getName(), request.getData(), request.getInputPassword(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create a presentation.
     * 
     * @param request Request for postSlidesDocument. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document postSlidesDocument(PostSlidesDocumentRequest request) throws ApiException {
        return createPresentation(request.getName(), request.getData(), request.getInputPassword(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a presentation.
     * 
     * @param request Request for postSlidesDocument. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> postSlidesDocumentWithHttpInfo(PostSlidesDocumentRequest request) throws ApiException {
        return createPresentationWithHttpInfo(request.getName(), request.getData(), request.getInputPassword(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a presentation. (asynchronously)
     * 
     * @param request Request for postSlidesDocument. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentAsync(PostSlidesDocumentRequest request, final ApiCallback<Document> callback) throws ApiException {
        return createPresentationAsync(request.getName(), request.getData(), request.getInputPassword(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesDocumentFromHtml
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importFromHtmlCall(String name, String html, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesDocumentFromHtml(Async)");
        }
        Object postBody = html;

        // create path and map variables
        String methodPath = "/slides/{name}/fromHtml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create presentation document from html.
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document importFromHtml(String name, String html, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = importFromHtmlWithHttpInfo(name, html, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = importFromHtmlWithHttpInfo(name, html, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create presentation document from html.
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> importFromHtmlWithHttpInfo(String name, String html, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = importFromHtmlCall(name, html, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create presentation document from html. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importFromHtmlAsync(String name, String html, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importFromHtmlCall(name, html, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesDocumentFromHtml
     * @param request Request for postSlidesDocumentFromHtml. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromHtmlCall(PostSlidesDocumentFromHtmlRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return importFromHtmlCall(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create presentation document from html.
     * 
     * @param request Request for postSlidesDocumentFromHtml. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document postSlidesDocumentFromHtml(PostSlidesDocumentFromHtmlRequest request) throws ApiException {
        return importFromHtml(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create presentation document from html.
     * 
     * @param request Request for postSlidesDocumentFromHtml. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> postSlidesDocumentFromHtmlWithHttpInfo(PostSlidesDocumentFromHtmlRequest request) throws ApiException {
        return importFromHtmlWithHttpInfo(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create presentation document from html. (asynchronously)
     * 
     * @param request Request for postSlidesDocumentFromHtml. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromHtmlAsync(PostSlidesDocumentFromHtmlRequest request, final ApiCallback<Document> callback) throws ApiException {
        return importFromHtmlAsync(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesDocumentFromPdf
     * @param name Document name. (required)
     * @param pdf PDF data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importFromPdfCall(String name, byte[] pdf, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesDocumentFromPdf(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fromPdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (pdf != null)
        formParams.put("pdf", pdf);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     * 
     * @param name Document name. (required)
     * @param pdf PDF data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document importFromPdf(String name, byte[] pdf, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = importFromPdfWithHttpInfo(name, pdf, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = importFromPdfWithHttpInfo(name, pdf, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     * 
     * @param name Document name. (required)
     * @param pdf PDF data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> importFromPdfWithHttpInfo(String name, byte[] pdf, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = importFromPdfCall(name, pdf, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param pdf PDF data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importFromPdfAsync(String name, byte[] pdf, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importFromPdfCall(name, pdf, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesDocumentFromPdf
     * @param request Request for postSlidesDocumentFromPdf. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromPdfCall(PostSlidesDocumentFromPdfRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return importFromPdfCall(request.getName(), request.getPdf(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     * 
     * @param request Request for postSlidesDocumentFromPdf. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document postSlidesDocumentFromPdf(PostSlidesDocumentFromPdfRequest request) throws ApiException {
        return importFromPdf(request.getName(), request.getPdf(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     * 
     * @param request Request for postSlidesDocumentFromPdf. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> postSlidesDocumentFromPdfWithHttpInfo(PostSlidesDocumentFromPdfRequest request) throws ApiException {
        return importFromPdfWithHttpInfo(request.getName(), request.getPdf(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation. (asynchronously)
     * 
     * @param request Request for postSlidesDocumentFromPdf. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromPdfAsync(PostSlidesDocumentFromPdfRequest request, final ApiCallback<Document> callback) throws ApiException {
        return importFromPdfAsync(request.getName(), request.getPdf(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesDocumentFromSource
     * @param name Document name. (required)
     * @param sourcePath Template file path. 
     * @param sourcePassword Template file password. 
     * @param sourceStorage Template storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromSourceCall(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesDocumentFromSource(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fromSource"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sourcePath", sourcePath);
        apiClient.addQueryParameter(queryParams, "sourceStorage", sourceStorage);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (sourcePassword != null)
        headerParams.put("sourcePassword", apiClient.parameterToString(sourcePassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a presentation from an existing source.
     * 
     * @param name Document name. (required)
     * @param sourcePath Template file path. 
     * @param sourcePassword Template file password. 
     * @param sourceStorage Template storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document createPresentationFromSource(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = createPresentationFromSourceWithHttpInfo(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = createPresentationFromSourceWithHttpInfo(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a presentation from an existing source.
     * 
     * @param name Document name. (required)
     * @param sourcePath Template file path. 
     * @param sourcePassword Template file password. 
     * @param sourceStorage Template storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> createPresentationFromSourceWithHttpInfo(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createPresentationFromSourceCall(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a presentation from an existing source. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sourcePath Template file path. 
     * @param sourcePassword Template file password. 
     * @param sourceStorage Template storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromSourceAsync(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPresentationFromSourceCall(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesDocumentFromSource
     * @param request Request for postSlidesDocumentFromSource. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromSourceCall(PostSlidesDocumentFromSourceRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createPresentationFromSourceCall(request.getName(), request.getSourcePath(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create a presentation from an existing source.
     * 
     * @param request Request for postSlidesDocumentFromSource. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document postSlidesDocumentFromSource(PostSlidesDocumentFromSourceRequest request) throws ApiException {
        return createPresentationFromSource(request.getName(), request.getSourcePath(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a presentation from an existing source.
     * 
     * @param request Request for postSlidesDocumentFromSource. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> postSlidesDocumentFromSourceWithHttpInfo(PostSlidesDocumentFromSourceRequest request) throws ApiException {
        return createPresentationFromSourceWithHttpInfo(request.getName(), request.getSourcePath(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a presentation from an existing source. (asynchronously)
     * 
     * @param request Request for postSlidesDocumentFromSource. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromSourceAsync(PostSlidesDocumentFromSourceRequest request, final ApiCallback<Document> callback) throws ApiException {
        return createPresentationFromSourceAsync(request.getName(), request.getSourcePath(), request.getSourcePassword(), request.getSourceStorage(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesDocumentFromTemplate
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromTemplateCall(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesDocumentFromTemplate(Async)");
        }
        // verify the required parameter 'templatePath' is set
        if (templatePath == null) {
            throw new ApiException("Missing the required parameter 'templatePath' when calling postSlidesDocumentFromTemplate(Async)");
        }
        Object postBody = data;

        // create path and map variables
        String methodPath = "/slides/{name}/fromTemplate"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "templatePath", templatePath);
        apiClient.addQueryParameter(queryParams, "templateStorage", templateStorage);
        apiClient.addQueryParameter(queryParams, "isImageDataEmbedded", isImageDataEmbedded);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (templatePassword != null)
        headerParams.put("templatePassword", apiClient.parameterToString(templatePassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document createPresentationFromTemplate(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = createPresentationFromTemplateWithHttpInfo(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = createPresentationFromTemplateWithHttpInfo(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> createPresentationFromTemplateWithHttpInfo(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createPresentationFromTemplateCall(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromTemplateAsync(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPresentationFromTemplateCall(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesDocumentFromTemplate
     * @param request Request for postSlidesDocumentFromTemplate. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromTemplateCall(PostSlidesDocumentFromTemplateRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return createPresentationFromTemplateCall(request.getName(), request.getTemplatePath(), request.getData(), request.getTemplatePassword(), request.getTemplateStorage(), request.getIsImageDataEmbedded(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Create a presentation.
     * 
     * @param request Request for postSlidesDocumentFromTemplate. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document postSlidesDocumentFromTemplate(PostSlidesDocumentFromTemplateRequest request) throws ApiException {
        return createPresentationFromTemplate(request.getName(), request.getTemplatePath(), request.getData(), request.getTemplatePassword(), request.getTemplateStorage(), request.getIsImageDataEmbedded(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a presentation.
     * 
     * @param request Request for postSlidesDocumentFromTemplate. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> postSlidesDocumentFromTemplateWithHttpInfo(PostSlidesDocumentFromTemplateRequest request) throws ApiException {
        return createPresentationFromTemplateWithHttpInfo(request.getName(), request.getTemplatePath(), request.getData(), request.getTemplatePassword(), request.getTemplateStorage(), request.getIsImageDataEmbedded(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Create a presentation. (asynchronously)
     * 
     * @param request Request for postSlidesDocumentFromTemplate. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesDocumentFromTemplateAsync(PostSlidesDocumentFromTemplateRequest request, final ApiCallback<Document> callback) throws ApiException {
        return createPresentationFromTemplateAsync(request.getName(), request.getTemplatePath(), request.getData(), request.getTemplatePassword(), request.getTemplateStorage(), request.getIsImageDataEmbedded(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesMerge
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeOnlineCall(List<FileInfo> files, OrderedMergeRequest request, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/merge"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (files != null)
        formParams.put("files", files);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     * 
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File mergeOnline(List<FileInfo> files, OrderedMergeRequest request, String password) throws ApiException {
        try {
            ApiResponse<File> resp = mergeOnlineWithHttpInfo(files, request, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = mergeOnlineWithHttpInfo(files, request, password);
            return resp.getData();
        }
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     * 
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> mergeOnlineWithHttpInfo(List<FileInfo> files, OrderedMergeRequest request, String password) throws ApiException {
        com.squareup.okhttp.Call call = mergeOnlineCall(files, request, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response.  (asynchronously)
     * 
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeOnlineAsync(List<FileInfo> files, OrderedMergeRequest request, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeOnlineCall(files, request, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesMerge
     * @param request Request for postSlidesMerge. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesMergeCall(PostSlidesMergeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return mergeOnlineCall(request.getFiles(), request.getRequest(), request.getPassword(), progressListener, progressRequestListener);
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     * 
     * @param request Request for postSlidesMerge. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postSlidesMerge(PostSlidesMergeRequest request) throws ApiException {
        return mergeOnline(request.getFiles(), request.getRequest(), request.getPassword());
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     * 
     * @param request Request for postSlidesMerge. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postSlidesMergeWithHttpInfo(PostSlidesMergeRequest request) throws ApiException {
        return mergeOnlineWithHttpInfo(request.getFiles(), request.getRequest(), request.getPassword());
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Returns result file in the response.  (asynchronously)
     * 
     * @param request Request for postSlidesMerge. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesMergeAsync(PostSlidesMergeRequest request, final ApiCallback<File> callback) throws ApiException {
        return mergeOnlineAsync(request.getFiles(), request.getRequest(), request.getPassword(), callback);
    }
    /**
     * Build call for postSlidesPipeline
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pipelineCall(Pipeline pipeline, List<FileInfo> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling postSlidesPipeline(Async)");
        }
        Object postBody = pipeline;

        // create path and map variables
        String methodPath = "/slides/pipeline"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (files != null)
        formParams.put("files", files);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Performs slides pipeline.
     * 
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File pipeline(Pipeline pipeline, List<FileInfo> files) throws ApiException {
        try {
            ApiResponse<File> resp = pipelineWithHttpInfo(pipeline, files);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = pipelineWithHttpInfo(pipeline, files);
            return resp.getData();
        }
    }

    /**
     * Performs slides pipeline.
     * 
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> pipelineWithHttpInfo(Pipeline pipeline, List<FileInfo> files) throws ApiException {
        com.squareup.okhttp.Call call = pipelineCall(pipeline, files, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Performs slides pipeline. (asynchronously)
     * 
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pipelineAsync(Pipeline pipeline, List<FileInfo> files, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pipelineCall(pipeline, files, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesPipeline
     * @param request Request for postSlidesPipeline. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesPipelineCall(PostSlidesPipelineRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return pipelineCall(request.getPipeline(), request.getFiles(), progressListener, progressRequestListener);
    }

    /**
     * Performs slides pipeline.
     * 
     * @param request Request for postSlidesPipeline. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postSlidesPipeline(PostSlidesPipelineRequest request) throws ApiException {
        return pipeline(request.getPipeline(), request.getFiles());
    }

    /**
     * Performs slides pipeline.
     * 
     * @param request Request for postSlidesPipeline. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postSlidesPipelineWithHttpInfo(PostSlidesPipelineRequest request) throws ApiException {
        return pipelineWithHttpInfo(request.getPipeline(), request.getFiles());
    }

    /**
     * Performs slides pipeline. (asynchronously)
     * 
     * @param request Request for postSlidesPipeline. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesPipelineAsync(PostSlidesPipelineRequest request, final ApiCallback<File> callback) throws ApiException {
        return pipelineAsync(request.getPipeline(), request.getFiles(), callback);
    }
    /**
     * Build call for postSlidesPresentationReplaceText
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextCall(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesPresentationReplaceText(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling postSlidesPresentationReplaceText(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling postSlidesPresentationReplaceText(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentReplaceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentReplaceResult replacePresentationText(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentReplaceResult> resp = replacePresentationTextWithHttpInfo(name, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentReplaceResult> resp = replacePresentationTextWithHttpInfo(name, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentReplaceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentReplaceResult> replacePresentationTextWithHttpInfo(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = replacePresentationTextCall(name, oldValue, newValue, ignoreCase, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentReplaceResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextAsync(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ApiCallback<DocumentReplaceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replacePresentationTextCall(name, oldValue, newValue, ignoreCase, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentReplaceResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesPresentationReplaceText
     * @param request Request for postSlidesPresentationReplaceText. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesPresentationReplaceTextCall(PostSlidesPresentationReplaceTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return replacePresentationTextCall(request.getName(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param request Request for postSlidesPresentationReplaceText. (required)
     * @return DocumentReplaceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentReplaceResult postSlidesPresentationReplaceText(PostSlidesPresentationReplaceTextRequest request) throws ApiException {
        return replacePresentationText(request.getName(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Replace text with a new value.
     * 
     * @param request Request for postSlidesPresentationReplaceText. (required)
     * @return ApiResponse&lt;DocumentReplaceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentReplaceResult> postSlidesPresentationReplaceTextWithHttpInfo(PostSlidesPresentationReplaceTextRequest request) throws ApiException {
        return replacePresentationTextWithHttpInfo(request.getName(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param request Request for postSlidesPresentationReplaceText. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesPresentationReplaceTextAsync(PostSlidesPresentationReplaceTextRequest request, final ApiCallback<DocumentReplaceResult> callback) throws ApiException {
        return replacePresentationTextAsync(request.getName(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesReorder
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveSlideCall(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesReorder(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSlidesReorder(Async)");
        }
        // verify the required parameter 'newPosition' is set
        if (newPosition == null) {
            throw new ApiException("Missing the required parameter 'newPosition' when calling postSlidesReorder(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "newPosition", newPosition);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Reorder presentation slide position.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides moveSlide(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = moveSlideWithHttpInfo(name, slideIndex, newPosition, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = moveSlideWithHttpInfo(name, slideIndex, newPosition, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Reorder presentation slide position.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> moveSlideWithHttpInfo(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = moveSlideCall(name, slideIndex, newPosition, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Reorder presentation slide position. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveSlideAsync(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveSlideCall(name, slideIndex, newPosition, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesReorder
     * @param request Request for postSlidesReorder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesReorderCall(PostSlidesReorderRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return moveSlideCall(request.getName(), request.getSlideIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Reorder presentation slide position.
     * 
     * @param request Request for postSlidesReorder. (required)
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slides postSlidesReorder(PostSlidesReorderRequest request) throws ApiException {
        return moveSlide(request.getName(), request.getSlideIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Reorder presentation slide position.
     * 
     * @param request Request for postSlidesReorder. (required)
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slides> postSlidesReorderWithHttpInfo(PostSlidesReorderRequest request) throws ApiException {
        return moveSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Reorder presentation slide position. (asynchronously)
     * 
     * @param request Request for postSlidesReorder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesReorderAsync(PostSlidesReorderRequest request, final ApiCallback<Slides> callback) throws ApiException {
        return moveSlideAsync(request.getName(), request.getSlideIndex(), request.getNewPosition(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesReorderMany
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reorderSlidesCall(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesReorderMany(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/reorder"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldPositions", oldPositions);
        apiClient.addQueryParameter(queryParams, "newPositions", newPositions);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Reorder presentation slides positions.
     * 
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides reorderSlides(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = reorderSlidesWithHttpInfo(name, oldPositions, newPositions, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = reorderSlidesWithHttpInfo(name, oldPositions, newPositions, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Reorder presentation slides positions.
     * 
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> reorderSlidesWithHttpInfo(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = reorderSlidesCall(name, oldPositions, newPositions, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Reorder presentation slides positions. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reorderSlidesAsync(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reorderSlidesCall(name, oldPositions, newPositions, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesReorderMany
     * @param request Request for postSlidesReorderMany. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesReorderManyCall(PostSlidesReorderManyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return reorderSlidesCall(request.getName(), request.getOldPositions(), request.getNewPositions(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Reorder presentation slides positions.
     * 
     * @param request Request for postSlidesReorderMany. (required)
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slides postSlidesReorderMany(PostSlidesReorderManyRequest request) throws ApiException {
        return reorderSlides(request.getName(), request.getOldPositions(), request.getNewPositions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Reorder presentation slides positions.
     * 
     * @param request Request for postSlidesReorderMany. (required)
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slides> postSlidesReorderManyWithHttpInfo(PostSlidesReorderManyRequest request) throws ApiException {
        return reorderSlidesWithHttpInfo(request.getName(), request.getOldPositions(), request.getNewPositions(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Reorder presentation slides positions. (asynchronously)
     * 
     * @param request Request for postSlidesReorderMany. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesReorderManyAsync(PostSlidesReorderManyRequest request, final ApiCallback<Slides> callback) throws ApiException {
        return reorderSlidesAsync(request.getName(), request.getOldPositions(), request.getNewPositions(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesSaveAs
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadPresentationCall(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postSlidesSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadPresentation(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadPresentationWithHttpInfo(name, format, options, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadPresentationWithHttpInfo(name, format, options, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadPresentationWithHttpInfo(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadPresentationCall(name, format, options, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Save a presentation to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadPresentationAsync(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadPresentationCall(name, format, options, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesSaveAs
     * @param request Request for postSlidesSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSaveAsCall(PostSlidesSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadPresentationCall(request.getName(), request.getFormat(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param request Request for postSlidesSaveAs. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postSlidesSaveAs(PostSlidesSaveAsRequest request) throws ApiException {
        return downloadPresentation(request.getName(), request.getFormat(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param request Request for postSlidesSaveAs. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postSlidesSaveAsWithHttpInfo(PostSlidesSaveAsRequest request) throws ApiException {
        return downloadPresentationWithHttpInfo(request.getName(), request.getFormat(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a presentation to a specified format. (asynchronously)
     * 
     * @param request Request for postSlidesSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSaveAsAsync(PostSlidesSaveAsRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadPresentationAsync(request.getName(), request.getFormat(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postSlidesSetDocumentProperties
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertiesCall(String name, DocumentProperties properties, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesSetDocumentProperties(Async)");
        }
        // verify the required parameter 'properties' is set
        if (properties == null) {
            throw new ApiException("Missing the required parameter 'properties' when calling postSlidesSetDocumentProperties(Async)");
        }
        Object postBody = properties;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set document properties.
     * 
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties setDocumentProperties(String name, DocumentProperties properties, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = setDocumentPropertiesWithHttpInfo(name, properties, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = setDocumentPropertiesWithHttpInfo(name, properties, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set document properties.
     * 
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> setDocumentPropertiesWithHttpInfo(String name, DocumentProperties properties, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setDocumentPropertiesCall(name, properties, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertiesAsync(String name, DocumentProperties properties, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDocumentPropertiesCall(name, properties, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesSetDocumentProperties
     * @param request Request for postSlidesSetDocumentProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSetDocumentPropertiesCall(PostSlidesSetDocumentPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setDocumentPropertiesCall(request.getName(), request.getProperties(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set document properties.
     * 
     * @param request Request for postSlidesSetDocumentProperties. (required)
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentProperties postSlidesSetDocumentProperties(PostSlidesSetDocumentPropertiesRequest request) throws ApiException {
        return setDocumentProperties(request.getName(), request.getProperties(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set document properties.
     * 
     * @param request Request for postSlidesSetDocumentProperties. (required)
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentProperties> postSlidesSetDocumentPropertiesWithHttpInfo(PostSlidesSetDocumentPropertiesRequest request) throws ApiException {
        return setDocumentPropertiesWithHttpInfo(request.getName(), request.getProperties(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set document properties. (asynchronously)
     * 
     * @param request Request for postSlidesSetDocumentProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSetDocumentPropertiesAsync(PostSlidesSetDocumentPropertiesRequest request, final ApiCallback<DocumentProperties> callback) throws ApiException {
        return setDocumentPropertiesAsync(request.getName(), request.getProperties(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesSlideReplaceText
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextCall(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesSlideReplaceText(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSlidesSlideReplaceText(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling postSlidesSlideReplaceText(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling postSlidesSlideReplaceText(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideReplaceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideReplaceResult replaceSlideText(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideReplaceResult> resp = replaceSlideTextWithHttpInfo(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideReplaceResult> resp = replaceSlideTextWithHttpInfo(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideReplaceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideReplaceResult> replaceSlideTextWithHttpInfo(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = replaceSlideTextCall(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideReplaceResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextAsync(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ApiCallback<SlideReplaceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceSlideTextCall(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideReplaceResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesSlideReplaceText
     * @param request Request for postSlidesSlideReplaceText. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSlideReplaceTextCall(PostSlidesSlideReplaceTextRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return replaceSlideTextCall(request.getName(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param request Request for postSlidesSlideReplaceText. (required)
     * @return SlideReplaceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideReplaceResult postSlidesSlideReplaceText(PostSlidesSlideReplaceTextRequest request) throws ApiException {
        return replaceSlideText(request.getName(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Replace text with a new value.
     * 
     * @param request Request for postSlidesSlideReplaceText. (required)
     * @return ApiResponse&lt;SlideReplaceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideReplaceResult> postSlidesSlideReplaceTextWithHttpInfo(PostSlidesSlideReplaceTextRequest request) throws ApiException {
        return replaceSlideTextWithHttpInfo(request.getName(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param request Request for postSlidesSlideReplaceText. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSlideReplaceTextAsync(PostSlidesSlideReplaceTextRequest request, final ApiCallback<SlideReplaceResult> callback) throws ApiException {
        return replaceSlideTextAsync(request.getName(), request.getSlideIndex(), request.getOldValue(), request.getNewValue(), request.getIgnoreCase(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for postSlidesSplit
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitCall(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSlidesSplit(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/split"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "format", format);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "from", from);
        apiClient.addQueryParameter(queryParams, "to", to);
        apiClient.addQueryParameter(queryParams, "destFolder", destFolder);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Splitting presentations. Create one image per slide.
     * 
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return SplitDocumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitDocumentResult split(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<SplitDocumentResult> resp = splitWithHttpInfo(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SplitDocumentResult> resp = splitWithHttpInfo(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Splitting presentations. Create one image per slide.
     * 
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;SplitDocumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitDocumentResult> splitWithHttpInfo(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = splitCall(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Splitting presentations. Create one image per slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitAsync(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder, final ApiCallback<SplitDocumentResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitCall(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSlidesSplit
     * @param request Request for postSlidesSplit. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSplitCall(PostSlidesSplitRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return splitCall(request.getName(), request.getOptions(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getDestFolder(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Splitting presentations. Create one image per slide.
     * 
     * @param request Request for postSlidesSplit. (required)
     * @return SplitDocumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SplitDocumentResult postSlidesSplit(PostSlidesSplitRequest request) throws ApiException {
        return split(request.getName(), request.getOptions(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getDestFolder(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Splitting presentations. Create one image per slide.
     * 
     * @param request Request for postSlidesSplit. (required)
     * @return ApiResponse&lt;SplitDocumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SplitDocumentResult> postSlidesSplitWithHttpInfo(PostSlidesSplitRequest request) throws ApiException {
        return splitWithHttpInfo(request.getName(), request.getOptions(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getDestFolder(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Splitting presentations. Create one image per slide. (asynchronously)
     * 
     * @param request Request for postSlidesSplit. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSlidesSplitAsync(PostSlidesSplitRequest request, final ApiCallback<SplitDocumentResult> callback) throws ApiException {
        return splitAsync(request.getName(), request.getOptions(), request.getFormat(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getDestFolder(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for postSubshapeSaveAs
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSubshapeCall(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postSubshapeSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling postSubshapeSaveAs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling postSubshapeSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling postSubshapeSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes).
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadSubshape(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes).
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadSubshapeWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadSubshapeCall(name, slideIndex, path, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes). (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSubshapeAsync(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSubshapeCall(name, slideIndex, path, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for postSubshapeSaveAs
     * @param request Request for postSubshapeSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSubshapeSaveAsCall(PostSubshapeSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return downloadSubshapeCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes).
     * 
     * @param request Request for postSubshapeSaveAs. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public File postSubshapeSaveAs(PostSubshapeSaveAsRequest request) throws ApiException {
        return downloadSubshape(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes).
     * 
     * @param request Request for postSubshapeSaveAs. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<File> postSubshapeSaveAsWithHttpInfo(PostSubshapeSaveAsRequest request) throws ApiException {
        return downloadSubshapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for postSubshapeSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call postSubshapeSaveAsAsync(PostSubshapeSaveAsRequest request, final ApiCallback<File> callback) throws ApiException {
        return downloadSubshapeAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putChartCategory
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChartCategoryCall(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putChartCategory(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putChartCategory(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putChartCategory(Async)");
        }
        // verify the required parameter 'categoryIndex' is set
        if (categoryIndex == null) {
            throw new ApiException("Missing the required parameter 'categoryIndex' when calling putChartCategory(Async)");
        }
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling putChartCategory(Async)");
        }
        Object postBody = category;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "categoryIndex" + "\\}", apiClient.objectToString(categoryIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a chart category.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart updateChartCategory(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = updateChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = updateChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a chart category.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> updateChartCategoryWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a chart category. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChartCategoryAsync(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putChartCategory
     * @param request Request for putChartCategory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putChartCategoryCall(PutChartCategoryRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateChartCategoryCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update a chart category.
     * 
     * @param request Request for putChartCategory. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart putChartCategory(PutChartCategoryRequest request) throws ApiException {
        return updateChartCategory(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a chart category.
     * 
     * @param request Request for putChartCategory. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> putChartCategoryWithHttpInfo(PutChartCategoryRequest request) throws ApiException {
        return updateChartCategoryWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a chart category. (asynchronously)
     * 
     * @param request Request for putChartCategory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putChartCategoryAsync(PutChartCategoryRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return updateChartCategoryAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getCategoryIndex(), request.getCategory(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putChartDataPoint
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChartDataPointCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putChartDataPoint(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putChartDataPoint(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putChartDataPoint(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling putChartDataPoint(Async)");
        }
        // verify the required parameter 'pointIndex' is set
        if (pointIndex == null) {
            throw new ApiException("Missing the required parameter 'pointIndex' when calling putChartDataPoint(Async)");
        }
        // verify the required parameter 'dataPoint' is set
        if (dataPoint == null) {
            throw new ApiException("Missing the required parameter 'dataPoint' when calling putChartDataPoint(Async)");
        }
        Object postBody = dataPoint;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex)).replaceAll("\\{" + "pointIndex" + "\\}", apiClient.objectToString(pointIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a data point in a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart updateChartDataPoint(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = updateChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = updateChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a data point in a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> updateChartDataPointWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a data point in a chart series. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChartDataPointAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putChartDataPoint
     * @param request Request for putChartDataPoint. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putChartDataPointCall(PutChartDataPointRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateChartDataPointCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update a data point in a chart series.
     * 
     * @param request Request for putChartDataPoint. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart putChartDataPoint(PutChartDataPointRequest request) throws ApiException {
        return updateChartDataPoint(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a data point in a chart series.
     * 
     * @param request Request for putChartDataPoint. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> putChartDataPointWithHttpInfo(PutChartDataPointRequest request) throws ApiException {
        return updateChartDataPointWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a data point in a chart series. (asynchronously)
     * 
     * @param request Request for putChartDataPoint. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putChartDataPointAsync(PutChartDataPointRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return updateChartDataPointAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getPointIndex(), request.getDataPoint(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putChartSeries
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChartSeriesCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putChartSeries(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putChartSeries(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putChartSeries(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling putChartSeries(Async)");
        }
        // verify the required parameter 'series' is set
        if (series == null) {
            throw new ApiException("Missing the required parameter 'series' when calling putChartSeries(Async)");
        }
        Object postBody = series;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a series in a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart updateChartSeries(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = updateChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = updateChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a series in a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> updateChartSeriesWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a series in a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChartSeriesAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putChartSeries
     * @param request Request for putChartSeries. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putChartSeriesCall(PutChartSeriesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateChartSeriesCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update a series in a chart.
     * 
     * @param request Request for putChartSeries. (required)
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Chart putChartSeries(PutChartSeriesRequest request) throws ApiException {
        return updateChartSeries(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a series in a chart.
     * 
     * @param request Request for putChartSeries. (required)
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Chart> putChartSeriesWithHttpInfo(PutChartSeriesRequest request) throws ApiException {
        return updateChartSeriesWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a series in a chart. (asynchronously)
     * 
     * @param request Request for putChartSeries. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putChartSeriesAsync(PutChartSeriesRequest request, final ApiCallback<Chart> callback) throws ApiException {
        return updateChartSeriesAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getSeriesIndex(), request.getSeries(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putExportShape
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveShapeOnlineCall(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling putExportShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putExportShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putExportShape(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putExportShape(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putExportShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveShapeOnline(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder) throws ApiException {
        try {
            saveShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, outPath, password, storage, scaleX, scaleY, bounds, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            saveShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, outPath, password, storage, scaleX, scaleY, bounds, fontsFolder);
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveShapeOnlineWithHttpInfo(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = saveShapeOnlineCall(document, slideIndex, shapeIndex, format, outPath, password, storage, scaleX, scaleY, bounds, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveShapeOnlineAsync(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, String password, String storage, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveShapeOnlineCall(document, slideIndex, shapeIndex, format, outPath, password, storage, scaleX, scaleY, bounds, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putExportShape
     * @param request Request for putExportShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putExportShapeCall(PutExportShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return saveShapeOnlineCall(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putExportShape. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putExportShape(PutExportShapeRequest request) throws ApiException {
        saveShapeOnline(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putExportShape. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putExportShapeWithHttpInfo(PutExportShapeRequest request) throws ApiException {
        return saveShapeOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param request Request for putExportShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putExportShapeAsync(PutExportShapeRequest request, final ApiCallback<Void> callback) throws ApiException {
        return saveShapeOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putExportSlide
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSlideOnlineCall(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling putExportSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putExportSlide(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putExportSlide(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putExportSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveSlideOnline(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder) throws ApiException {
        try {
            saveSlideOnlineWithHttpInfo(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            saveSlideOnlineWithHttpInfo(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder);
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = saveSlideOnlineCall(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSlideOnlineAsync(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSlideOnlineCall(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putExportSlide
     * @param request Request for putExportSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putExportSlideCall(PutExportSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return saveSlideOnlineCall(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for putExportSlide. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putExportSlide(PutExportSlideRequest request) throws ApiException {
        saveSlideOnline(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for putExportSlide. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putExportSlideWithHttpInfo(PutExportSlideRequest request) throws ApiException {
        return saveSlideOnlineWithHttpInfo(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param request Request for putExportSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putExportSlideAsync(PutExportSlideRequest request, final ApiCallback<Void> callback) throws ApiException {
        return saveSlideOnlineAsync(request.getDocument(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getWidth(), request.getHeight(), request.getPassword(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putLayoutSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLayoutSlideCall(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putLayoutSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putLayoutSlide(Async)");
        }
        // verify the required parameter 'slideDto' is set
        if (slideDto == null) {
            throw new ApiException("Missing the required parameter 'slideDto' when calling putLayoutSlide(Async)");
        }
        Object postBody = slideDto;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a layoutSlide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlide updateLayoutSlide(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlide> resp = updateLayoutSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlide> resp = updateLayoutSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a layoutSlide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlide> updateLayoutSlideWithHttpInfo(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateLayoutSlideCall(name, slideIndex, slideDto, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a layoutSlide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLayoutSlideAsync(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage, final ApiCallback<LayoutSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLayoutSlideCall(name, slideIndex, slideDto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putLayoutSlide
     * @param request Request for putLayoutSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putLayoutSlideCall(PutLayoutSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateLayoutSlideCall(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update a layoutSlide.
     * 
     * @param request Request for putLayoutSlide. (required)
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public LayoutSlide putLayoutSlide(PutLayoutSlideRequest request) throws ApiException {
        return updateLayoutSlide(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a layoutSlide.
     * 
     * @param request Request for putLayoutSlide. (required)
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<LayoutSlide> putLayoutSlideWithHttpInfo(PutLayoutSlideRequest request) throws ApiException {
        return updateLayoutSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a layoutSlide. (asynchronously)
     * 
     * @param request Request for putLayoutSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putLayoutSlideAsync(PutLayoutSlideRequest request, final ApiCallback<LayoutSlide> callback) throws ApiException {
        return updateLayoutSlideAsync(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putNotesSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setNotesSlideHeaderFooterCall(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putNotesSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putNotesSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putNotesSlideHeaderFooter(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set header/footer the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlideHeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlideHeaderFooter setNotesSlideHeaderFooter(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlideHeaderFooter> resp = setNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlideHeaderFooter> resp = setNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set header/footer the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlideHeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlideHeaderFooter> setNotesSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setNotesSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set header/footer the notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setNotesSlideHeaderFooterAsync(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage, final ApiCallback<NotesSlideHeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setNotesSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putNotesSlideHeaderFooter
     * @param request Request for putNotesSlideHeaderFooter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putNotesSlideHeaderFooterCall(PutNotesSlideHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setNotesSlideHeaderFooterCall(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set header/footer the notes slide.
     * 
     * @param request Request for putNotesSlideHeaderFooter. (required)
     * @return NotesSlideHeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public NotesSlideHeaderFooter putNotesSlideHeaderFooter(PutNotesSlideHeaderFooterRequest request) throws ApiException {
        return setNotesSlideHeaderFooter(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set header/footer the notes slide.
     * 
     * @param request Request for putNotesSlideHeaderFooter. (required)
     * @return ApiResponse&lt;NotesSlideHeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<NotesSlideHeaderFooter> putNotesSlideHeaderFooterWithHttpInfo(PutNotesSlideHeaderFooterRequest request) throws ApiException {
        return setNotesSlideHeaderFooterWithHttpInfo(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set header/footer the notes slide. (asynchronously)
     * 
     * @param request Request for putNotesSlideHeaderFooter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putNotesSlideHeaderFooterAsync(PutNotesSlideHeaderFooterRequest request, final ApiCallback<NotesSlideHeaderFooter> callback) throws ApiException {
        return setNotesSlideHeaderFooterAsync(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putNotesSlideShapeSaveAs
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveNotesSlideShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putNotesSlideShapeSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putNotesSlideShapeSaveAs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putNotesSlideShapeSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putNotesSlideShapeSaveAs(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putNotesSlideShapeSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveNotesSlideShape(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            saveNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            saveNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveNotesSlideShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = saveNotesSlideShapeCall(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveNotesSlideShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveNotesSlideShapeCall(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putNotesSlideShapeSaveAs
     * @param request Request for putNotesSlideShapeSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putNotesSlideShapeSaveAsCall(PutNotesSlideShapeSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return saveNotesSlideShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putNotesSlideShapeSaveAs. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putNotesSlideShapeSaveAs(PutNotesSlideShapeSaveAsRequest request) throws ApiException {
        saveNotesSlideShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putNotesSlideShapeSaveAs. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putNotesSlideShapeSaveAsWithHttpInfo(PutNotesSlideShapeSaveAsRequest request) throws ApiException {
        return saveNotesSlideShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param request Request for putNotesSlideShapeSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putNotesSlideShapeSaveAsAsync(PutNotesSlideShapeSaveAsRequest request, final ApiCallback<Void> callback) throws ApiException {
        return saveNotesSlideShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putPresentationMerge
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderedMergeCall(String name, OrderedMergeRequest request, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putPresentationMerge(Async)");
        }
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling putPresentationMerge(Async)");
        }
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document orderedMerge(String name, OrderedMergeRequest request, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = orderedMergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = orderedMergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> orderedMergeWithHttpInfo(String name, OrderedMergeRequest request, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = orderedMergeCall(name, request, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderedMergeAsync(String name, OrderedMergeRequest request, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderedMergeCall(name, request, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putPresentationMerge
     * @param request Request for putPresentationMerge. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putPresentationMergeCall(PutPresentationMergeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return orderedMergeCall(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     * 
     * @param request Request for putPresentationMerge. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document putPresentationMerge(PutPresentationMergeRequest request) throws ApiException {
        return orderedMerge(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     * 
     * @param request Request for putPresentationMerge. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> putPresentationMergeWithHttpInfo(PutPresentationMergeRequest request) throws ApiException {
        return orderedMergeWithHttpInfo(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter. (asynchronously)
     * 
     * @param request Request for putPresentationMerge. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putPresentationMergeAsync(PutPresentationMergeRequest request, final ApiCallback<Document> callback) throws ApiException {
        return orderedMergeAsync(request.getName(), request.getRequest(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putPresentationSplit
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitAndSaveOnlineCall(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling putPresentationSplit(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putPresentationSplit(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/split/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destFolder", destFolder);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "from", from);
        apiClient.addQueryParameter(queryParams, "to", to);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return SplitDocumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitDocumentResult splitAndSaveOnline(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<SplitDocumentResult> resp = splitAndSaveOnlineWithHttpInfo(document, format, destFolder, width, height, from, to, password, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SplitDocumentResult> resp = splitAndSaveOnlineWithHttpInfo(document, format, destFolder, width, height, from, to, password, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;SplitDocumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitDocumentResult> splitAndSaveOnlineWithHttpInfo(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = splitAndSaveOnlineCall(document, format, destFolder, width, height, from, to, password, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitAndSaveOnlineAsync(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, final ApiCallback<SplitDocumentResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitAndSaveOnlineCall(document, format, destFolder, width, height, from, to, password, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putPresentationSplit
     * @param request Request for putPresentationSplit. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putPresentationSplitCall(PutPresentationSplitRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return splitAndSaveOnlineCall(request.getDocument(), request.getFormat(), request.getDestFolder(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param request Request for putPresentationSplit. (required)
     * @return SplitDocumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SplitDocumentResult putPresentationSplit(PutPresentationSplitRequest request) throws ApiException {
        return splitAndSaveOnline(request.getDocument(), request.getFormat(), request.getDestFolder(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param request Request for putPresentationSplit. (required)
     * @return ApiResponse&lt;SplitDocumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SplitDocumentResult> putPresentationSplitWithHttpInfo(PutPresentationSplitRequest request) throws ApiException {
        return splitAndSaveOnlineWithHttpInfo(request.getDocument(), request.getFormat(), request.getDestFolder(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.  (asynchronously)
     * 
     * @param request Request for putPresentationSplit. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putPresentationSplitAsync(PutPresentationSplitRequest request, final ApiCallback<SplitDocumentResult> callback) throws ApiException {
        return splitAndSaveOnlineAsync(request.getDocument(), request.getFormat(), request.getDestFolder(), request.getWidth(), request.getHeight(), request.getFrom(), request.getTo(), request.getPassword(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putSection
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSectionCall(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSection(Async)");
        }
        // verify the required parameter 'sectionIndex' is set
        if (sectionIndex == null) {
            throw new ApiException("Missing the required parameter 'sectionIndex' when calling putSection(Async)");
        }
        // verify the required parameter 'sectionName' is set
        if (sectionName == null) {
            throw new ApiException("Missing the required parameter 'sectionName' when calling putSection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections/{sectionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "sectionIndex" + "\\}", apiClient.objectToString(sectionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sectionName", sectionName);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update section name.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections updateSection(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = updateSectionWithHttpInfo(name, sectionIndex, sectionName, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = updateSectionWithHttpInfo(name, sectionIndex, sectionName, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update section name.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> updateSectionWithHttpInfo(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSectionCall(name, sectionIndex, sectionName, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update section name. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSectionAsync(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSectionCall(name, sectionIndex, sectionName, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSection
     * @param request Request for putSection. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSectionCall(PutSectionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateSectionCall(request.getName(), request.getSectionIndex(), request.getSectionName(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update section name.
     * 
     * @param request Request for putSection. (required)
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Sections putSection(PutSectionRequest request) throws ApiException {
        return updateSection(request.getName(), request.getSectionIndex(), request.getSectionName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update section name.
     * 
     * @param request Request for putSection. (required)
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Sections> putSectionWithHttpInfo(PutSectionRequest request) throws ApiException {
        return updateSectionWithHttpInfo(request.getName(), request.getSectionIndex(), request.getSectionName(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update section name. (asynchronously)
     * 
     * @param request Request for putSection. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSectionAsync(PutSectionRequest request, final ApiCallback<Sections> callback) throws ApiException {
        return updateSectionAsync(request.getName(), request.getSectionIndex(), request.getSectionName(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSections
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSectionsCall(String name, Sections sections, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSections(Async)");
        }
        // verify the required parameter 'sections' is set
        if (sections == null) {
            throw new ApiException("Missing the required parameter 'sections' when calling putSections(Async)");
        }
        Object postBody = sections;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     * 
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections setSections(String name, Sections sections, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = setSectionsWithHttpInfo(name, sections, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = setSectionsWithHttpInfo(name, sections, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     * 
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> setSectionsWithHttpInfo(String name, Sections sections, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSectionsCall(name, sections, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSectionsAsync(String name, Sections sections, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSectionsCall(name, sections, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSections
     * @param request Request for putSections. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSectionsCall(PutSectionsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setSectionsCall(request.getName(), request.getSections(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     * 
     * @param request Request for putSections. (required)
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Sections putSections(PutSectionsRequest request) throws ApiException {
        return setSections(request.getName(), request.getSections(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     * 
     * @param request Request for putSections. (required)
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Sections> putSectionsWithHttpInfo(PutSectionsRequest request) throws ApiException {
        return setSectionsWithHttpInfo(request.getName(), request.getSections(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO. (asynchronously)
     * 
     * @param request Request for putSections. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSectionsAsync(PutSectionsRequest request, final ApiCallback<Sections> callback) throws ApiException {
        return setSectionsAsync(request.getName(), request.getSections(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSetParagraphPortionProperties
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSetParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSetParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putSetParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling putSetParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling putSetParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSetParagraphPortionProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion updatePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = updatePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = updatePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> updatePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updatePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update portion properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSetParagraphPortionProperties
     * @param request Request for putSetParagraphPortionProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetParagraphPortionPropertiesCall(PutSetParagraphPortionPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updatePortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update portion properties.
     * 
     * @param request Request for putSetParagraphPortionProperties. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion putSetParagraphPortionProperties(PutSetParagraphPortionPropertiesRequest request) throws ApiException {
        return updatePortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update portion properties.
     * 
     * @param request Request for putSetParagraphPortionProperties. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> putSetParagraphPortionPropertiesWithHttpInfo(PutSetParagraphPortionPropertiesRequest request) throws ApiException {
        return updatePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update portion properties. (asynchronously)
     * 
     * @param request Request for putSetParagraphPortionProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetParagraphPortionPropertiesAsync(PutSetParagraphPortionPropertiesRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return updatePortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSetParagraphProperties
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSetParagraphProperties(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSetParagraphProperties(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putSetParagraphProperties(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling putSetParagraphProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSetParagraphProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph updateParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = updateParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = updateParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> updateParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update paragraph properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSetParagraphProperties
     * @param request Request for putSetParagraphProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetParagraphPropertiesCall(PutSetParagraphPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update paragraph properties.
     * 
     * @param request Request for putSetParagraphProperties. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph putSetParagraphProperties(PutSetParagraphPropertiesRequest request) throws ApiException {
        return updateParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update paragraph properties.
     * 
     * @param request Request for putSetParagraphProperties. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> putSetParagraphPropertiesWithHttpInfo(PutSetParagraphPropertiesRequest request) throws ApiException {
        return updateParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update paragraph properties. (asynchronously)
     * 
     * @param request Request for putSetParagraphProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetParagraphPropertiesAsync(PutSetParagraphPropertiesRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return updateParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSetSubshapeParagraphPortionProperties
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSubshapePortionCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSetSubshapeParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSetSubshapeParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putSetSubshapeParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling putSetSubshapeParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling putSetSubshapeParagraphPortionProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSetSubshapeParagraphPortionProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update portion properties (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion updateSubshapePortion(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = updateSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = updateSubshapePortionWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update portion properties (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> updateSubshapePortionWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update portion properties (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSubshapePortionAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSubshapePortionCall(name, slideIndex, path, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSetSubshapeParagraphPortionProperties
     * @param request Request for putSetSubshapeParagraphPortionProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetSubshapeParagraphPortionPropertiesCall(PutSetSubshapeParagraphPortionPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateSubshapePortionCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update portion properties (for smart art and group shapes).
     * 
     * @param request Request for putSetSubshapeParagraphPortionProperties. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion putSetSubshapeParagraphPortionProperties(PutSetSubshapeParagraphPortionPropertiesRequest request) throws ApiException {
        return updateSubshapePortion(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update portion properties (for smart art and group shapes).
     * 
     * @param request Request for putSetSubshapeParagraphPortionProperties. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> putSetSubshapeParagraphPortionPropertiesWithHttpInfo(PutSetSubshapeParagraphPortionPropertiesRequest request) throws ApiException {
        return updateSubshapePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update portion properties (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for putSetSubshapeParagraphPortionProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetSubshapeParagraphPortionPropertiesAsync(PutSetSubshapeParagraphPortionPropertiesRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return updateSubshapePortionAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSetSubshapeParagraphProperties
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSubshapeParagraphCall(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSetSubshapeParagraphProperties(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSetSubshapeParagraphProperties(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putSetSubshapeParagraphProperties(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling putSetSubshapeParagraphProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSetSubshapeParagraphProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update paragraph properties (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph updateSubshapeParagraph(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = updateSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = updateSubshapeParagraphWithHttpInfo(name, slideIndex, path, shapeIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update paragraph properties (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> updateSubshapeParagraphWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSubshapeParagraphCall(name, slideIndex, path, shapeIndex, paragraphIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update paragraph properties (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSubshapeParagraphAsync(String name, Integer slideIndex, String path, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSubshapeParagraphCall(name, slideIndex, path, shapeIndex, paragraphIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSetSubshapeParagraphProperties
     * @param request Request for putSetSubshapeParagraphProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetSubshapeParagraphPropertiesCall(PutSetSubshapeParagraphPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateSubshapeParagraphCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update paragraph properties (for smart art and group shapes).
     * 
     * @param request Request for putSetSubshapeParagraphProperties. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph putSetSubshapeParagraphProperties(PutSetSubshapeParagraphPropertiesRequest request) throws ApiException {
        return updateSubshapeParagraph(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update paragraph properties (for smart art and group shapes).
     * 
     * @param request Request for putSetSubshapeParagraphProperties. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> putSetSubshapeParagraphPropertiesWithHttpInfo(PutSetSubshapeParagraphPropertiesRequest request) throws ApiException {
        return updateSubshapeParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update paragraph properties (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for putSetSubshapeParagraphProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSetSubshapeParagraphPropertiesAsync(PutSetSubshapeParagraphPropertiesRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return updateSubshapeParagraphAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putShapeSaveAs
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putShapeSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putShapeSaveAs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putShapeSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putShapeSaveAs(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putShapeSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveShape(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            saveShapeWithHttpInfo(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            saveShapeWithHttpInfo(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = saveShapeCall(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveShapeCall(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putShapeSaveAs
     * @param request Request for putShapeSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putShapeSaveAsCall(PutShapeSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return saveShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putShapeSaveAs. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putShapeSaveAs(PutShapeSaveAsRequest request) throws ApiException {
        saveShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putShapeSaveAs. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putShapeSaveAsWithHttpInfo(PutShapeSaveAsRequest request) throws ApiException {
        return saveShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param request Request for putShapeSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putShapeSaveAsAsync(PutShapeSaveAsRequest request, final ApiCallback<Void> callback) throws ApiException {
        return saveShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putSlideAnimation
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAnimationCall(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlideAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlideAnimation(Async)");
        }
        // verify the required parameter 'animation' is set
        if (animation == null) {
            throw new ApiException("Missing the required parameter 'animation' when calling putSlideAnimation(Async)");
        }
        Object postBody = animation;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation setAnimation(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = setAnimationWithHttpInfo(name, slideIndex, animation, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = setAnimationWithHttpInfo(name, slideIndex, animation, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> setAnimationWithHttpInfo(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setAnimationCall(name, slideIndex, animation, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAnimationAsync(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAnimationCall(name, slideIndex, animation, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlideAnimation
     * @param request Request for putSlideAnimation. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideAnimationCall(PutSlideAnimationRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setAnimationCall(request.getName(), request.getSlideIndex(), request.getAnimation(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set slide animation.
     * 
     * @param request Request for putSlideAnimation. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation putSlideAnimation(PutSlideAnimationRequest request) throws ApiException {
        return setAnimation(request.getName(), request.getSlideIndex(), request.getAnimation(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set slide animation.
     * 
     * @param request Request for putSlideAnimation. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> putSlideAnimationWithHttpInfo(PutSlideAnimationRequest request) throws ApiException {
        return setAnimationWithHttpInfo(request.getName(), request.getSlideIndex(), request.getAnimation(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set slide animation. (asynchronously)
     * 
     * @param request Request for putSlideAnimation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideAnimationAsync(PutSlideAnimationRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return setAnimationAsync(request.getName(), request.getSlideIndex(), request.getAnimation(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlideAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAnimationEffectCall(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling putSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling putSlideAnimationEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Modify an animation effect for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation updateAnimationEffect(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = updateAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = updateAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Modify an animation effect for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> updateAnimationEffectWithHttpInfo(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateAnimationEffectCall(name, slideIndex, effectIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Modify an animation effect for a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAnimationEffectAsync(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAnimationEffectCall(name, slideIndex, effectIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlideAnimationEffect
     * @param request Request for putSlideAnimationEffect. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideAnimationEffectCall(PutSlideAnimationEffectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateAnimationEffectCall(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Modify an animation effect for a slide.
     * 
     * @param request Request for putSlideAnimationEffect. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation putSlideAnimationEffect(PutSlideAnimationEffectRequest request) throws ApiException {
        return updateAnimationEffect(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Modify an animation effect for a slide.
     * 
     * @param request Request for putSlideAnimationEffect. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> putSlideAnimationEffectWithHttpInfo(PutSlideAnimationEffectRequest request) throws ApiException {
        return updateAnimationEffectWithHttpInfo(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Modify an animation effect for a slide. (asynchronously)
     * 
     * @param request Request for putSlideAnimationEffect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideAnimationEffectAsync(PutSlideAnimationEffectRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return updateAnimationEffectAsync(request.getName(), request.getSlideIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlideAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling putSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling putSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling putSlideAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation updateAnimationInteractiveSequenceEffect(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = updateAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = updateAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> updateAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Modify an animation effect for a slide interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlideAnimationInteractiveSequenceEffect
     * @param request Request for putSlideAnimationInteractiveSequenceEffect. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideAnimationInteractiveSequenceEffectCall(PutSlideAnimationInteractiveSequenceEffectRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateAnimationInteractiveSequenceEffectCall(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     * 
     * @param request Request for putSlideAnimationInteractiveSequenceEffect. (required)
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideAnimation putSlideAnimationInteractiveSequenceEffect(PutSlideAnimationInteractiveSequenceEffectRequest request) throws ApiException {
        return updateAnimationInteractiveSequenceEffect(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     * 
     * @param request Request for putSlideAnimationInteractiveSequenceEffect. (required)
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideAnimation> putSlideAnimationInteractiveSequenceEffectWithHttpInfo(PutSlideAnimationInteractiveSequenceEffectRequest request) throws ApiException {
        return updateAnimationInteractiveSequenceEffectWithHttpInfo(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Modify an animation effect for a slide interactive sequence. (asynchronously)
     * 
     * @param request Request for putSlideAnimationInteractiveSequenceEffect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideAnimationInteractiveSequenceEffectAsync(PutSlideAnimationInteractiveSequenceEffectRequest request, final ApiCallback<SlideAnimation> callback) throws ApiException {
        return updateAnimationInteractiveSequenceEffectAsync(request.getName(), request.getSlideIndex(), request.getSequenceIndex(), request.getEffectIndex(), request.getEffect(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSlideHeaderFooterCall(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSlideHeaderFooter(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set footer the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return HeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HeaderFooter setSlideHeaderFooter(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<HeaderFooter> resp = setSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<HeaderFooter> resp = setSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set footer the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;HeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HeaderFooter> setSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set footer the slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSlideHeaderFooterAsync(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage, final ApiCallback<HeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlideHeaderFooter
     * @param request Request for putSlideHeaderFooter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideHeaderFooterCall(PutSlideHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setSlideHeaderFooterCall(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set footer the slide.
     * 
     * @param request Request for putSlideHeaderFooter. (required)
     * @return HeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public HeaderFooter putSlideHeaderFooter(PutSlideHeaderFooterRequest request) throws ApiException {
        return setSlideHeaderFooter(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set footer the slide.
     * 
     * @param request Request for putSlideHeaderFooter. (required)
     * @return ApiResponse&lt;HeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<HeaderFooter> putSlideHeaderFooterWithHttpInfo(PutSlideHeaderFooterRequest request) throws ApiException {
        return setSlideHeaderFooterWithHttpInfo(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set footer the slide. (asynchronously)
     * 
     * @param request Request for putSlideHeaderFooter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideHeaderFooterAsync(PutSlideHeaderFooterRequest request, final ApiCallback<HeaderFooter> callback) throws ApiException {
        return setSlideHeaderFooterAsync(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlideSaveAs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSlideCall(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlideSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlideSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putSlideSaveAs(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putSlideSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveSlide(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            saveSlideWithHttpInfo(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            saveSlideWithHttpInfo(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder);
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveSlideWithHttpInfo(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = saveSlideCall(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width Output file width; 0 to not adjust the size. Default is 0. 
     * @param height Output file height; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSlideAsync(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSlideCall(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putSlideSaveAs
     * @param request Request for putSlideSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideSaveAsCall(PutSlideSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return saveSlideCall(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for putSlideSaveAs. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putSlideSaveAs(PutSlideSaveAsRequest request) throws ApiException {
        saveSlide(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param request Request for putSlideSaveAs. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putSlideSaveAsWithHttpInfo(PutSlideSaveAsRequest request) throws ApiException {
        return saveSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param request Request for putSlideSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideSaveAsAsync(PutSlideSaveAsRequest request, final ApiCallback<Void> callback) throws ApiException {
        return saveSlideAsync(request.getName(), request.getSlideIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getWidth(), request.getHeight(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putSlideShapeInfo
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlideShapeInfo(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlideShapeInfo(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putSlideShapeInfo(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSlideShapeInfo(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase updateShape(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = updateShapeWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = updateShapeWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> updateShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateShapeCall(name, slideIndex, shapeIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update shape properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateShapeCall(name, slideIndex, shapeIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlideShapeInfo
     * @param request Request for putSlideShapeInfo. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideShapeInfoCall(PutSlideShapeInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update shape properties.
     * 
     * @param request Request for putSlideShapeInfo. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase putSlideShapeInfo(PutSlideShapeInfoRequest request) throws ApiException {
        return updateShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update shape properties.
     * 
     * @param request Request for putSlideShapeInfo. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> putSlideShapeInfoWithHttpInfo(PutSlideShapeInfoRequest request) throws ApiException {
        return updateShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update shape properties. (asynchronously)
     * 
     * @param request Request for putSlideShapeInfo. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideShapeInfoAsync(PutSlideShapeInfoRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return updateShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlideSubshapeInfo
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSubshapeCall(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlideSubshapeInfo(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlideSubshapeInfo(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putSlideSubshapeInfo(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSlideSubshapeInfo(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update shape properties (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase updateSubshape(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = updateSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = updateSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update shape properties (for smart art and group shapes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> updateSubshapeWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSubshapeCall(name, slideIndex, path, shapeIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update shape properties (for smart art and group shapes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path. 
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSubshapeAsync(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSubshapeCall(name, slideIndex, path, shapeIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlideSubshapeInfo
     * @param request Request for putSlideSubshapeInfo. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideSubshapeInfoCall(PutSlideSubshapeInfoRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateSubshapeCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update shape properties (for smart art and group shapes).
     * 
     * @param request Request for putSlideSubshapeInfo. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase putSlideSubshapeInfo(PutSlideSubshapeInfoRequest request) throws ApiException {
        return updateSubshape(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update shape properties (for smart art and group shapes).
     * 
     * @param request Request for putSlideSubshapeInfo. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> putSlideSubshapeInfoWithHttpInfo(PutSlideSubshapeInfoRequest request) throws ApiException {
        return updateSubshapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update shape properties (for smart art and group shapes). (asynchronously)
     * 
     * @param request Request for putSlideSubshapeInfo. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlideSubshapeInfoAsync(PutSlideSubshapeInfoRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return updateSubshapeAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesConvert
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertAndSaveCall(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling putSlidesConvert(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putSlidesConvert(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putSlidesConvert(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/convert/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void convertAndSave(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder) throws ApiException {
        try {
            convertAndSaveWithHttpInfo(document, format, outPath, password, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            convertAndSaveWithHttpInfo(document, format, outPath, password, storage, fontsFolder);
        }
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> convertAndSaveWithHttpInfo(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = convertAndSaveCall(document, format, outPath, password, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Convert presentation from request content to format specified. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertAndSaveAsync(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertAndSaveCall(document, format, outPath, password, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putSlidesConvert
     * @param request Request for putSlidesConvert. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesConvertCall(PutSlidesConvertRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return convertAndSaveCall(request.getDocument(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param request Request for putSlidesConvert. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putSlidesConvert(PutSlidesConvertRequest request) throws ApiException {
        convertAndSave(request.getDocument(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param request Request for putSlidesConvert. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putSlidesConvertWithHttpInfo(PutSlidesConvertRequest request) throws ApiException {
        return convertAndSaveWithHttpInfo(request.getDocument(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Convert presentation from request content to format specified. (asynchronously)
     * 
     * @param request Request for putSlidesConvert. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesConvertAsync(PutSlidesConvertRequest request, final ApiCallback<Void> callback) throws ApiException {
        return convertAndSaveAsync(request.getDocument(), request.getFormat(), request.getOutPath(), request.getPassword(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putSlidesDocumentFromHtml
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesDocumentFromHtmlCall(String name, String html, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesDocumentFromHtml(Async)");
        }
        Object postBody = html;

        // create path and map variables
        String methodPath = "/slides/{name}/fromHtml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update presentation document from html.
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document putSlidesDocumentFromHtml(String name, String html, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = putSlidesDocumentFromHtmlWithHttpInfo(name, html, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = putSlidesDocumentFromHtmlWithHttpInfo(name, html, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update presentation document from html.
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> putSlidesDocumentFromHtmlWithHttpInfo(String name, String html, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putSlidesDocumentFromHtmlCall(name, html, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update presentation document from html. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesDocumentFromHtmlAsync(String name, String html, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSlidesDocumentFromHtmlCall(name, html, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesDocumentFromHtml
     * @param request Request for putSlidesDocumentFromHtml. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesDocumentFromHtmlCall(PutSlidesDocumentFromHtmlRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return putSlidesDocumentFromHtmlCall(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update presentation document from html.
     * 
     * @param request Request for putSlidesDocumentFromHtml. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document putSlidesDocumentFromHtml(PutSlidesDocumentFromHtmlRequest request) throws ApiException {
        return putSlidesDocumentFromHtml(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation document from html.
     * 
     * @param request Request for putSlidesDocumentFromHtml. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> putSlidesDocumentFromHtmlWithHttpInfo(PutSlidesDocumentFromHtmlRequest request) throws ApiException {
        return putSlidesDocumentFromHtmlWithHttpInfo(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation document from html. (asynchronously)
     * 
     * @param request Request for putSlidesDocumentFromHtml. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesDocumentFromHtmlAsync(PutSlidesDocumentFromHtmlRequest request, final ApiCallback<Document> callback) throws ApiException {
        return putSlidesDocumentFromHtmlAsync(request.getName(), request.getHtml(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesHeaderFooter
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPresentationHeaderFooterCall(String name, HeaderFooter dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesHeaderFooter(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSlidesHeaderFooter(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set footers for all slides in a presentation.
     * 
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document setPresentationHeaderFooter(String name, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = setPresentationHeaderFooterWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = setPresentationHeaderFooterWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set footers for all slides in a presentation.
     * 
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> setPresentationHeaderFooterWithHttpInfo(String name, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setPresentationHeaderFooterCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set footers for all slides in a presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPresentationHeaderFooterAsync(String name, HeaderFooter dto, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPresentationHeaderFooterCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesHeaderFooter
     * @param request Request for putSlidesHeaderFooter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesHeaderFooterCall(PutSlidesHeaderFooterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setPresentationHeaderFooterCall(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set footers for all slides in a presentation.
     * 
     * @param request Request for putSlidesHeaderFooter. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document putSlidesHeaderFooter(PutSlidesHeaderFooterRequest request) throws ApiException {
        return setPresentationHeaderFooter(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set footers for all slides in a presentation.
     * 
     * @param request Request for putSlidesHeaderFooter. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> putSlidesHeaderFooterWithHttpInfo(PutSlidesHeaderFooterRequest request) throws ApiException {
        return setPresentationHeaderFooterWithHttpInfo(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set footers for all slides in a presentation. (asynchronously)
     * 
     * @param request Request for putSlidesHeaderFooter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesHeaderFooterAsync(PutSlidesHeaderFooterRequest request, final ApiCallback<Document> callback) throws ApiException {
        return setPresentationHeaderFooterAsync(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesMerge
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeAndSaveOnlineCall(String outPath, List<FileInfo> files, OrderedMergeRequest request, String password, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putSlidesMerge(Async)");
        }
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/merge"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (files != null)
        formParams.put("files", files);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     * 
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void mergeAndSaveOnline(String outPath, List<FileInfo> files, OrderedMergeRequest request, String password, String storage) throws ApiException {
        try {
            mergeAndSaveOnlineWithHttpInfo(outPath, files, request, password, storage);
        } catch (NeedRepeatRequestException e) {
            mergeAndSaveOnlineWithHttpInfo(outPath, files, request, password, storage);
        }
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     * 
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> mergeAndSaveOnlineWithHttpInfo(String outPath, List<FileInfo> files, OrderedMergeRequest request, String password, String storage) throws ApiException {
        com.squareup.okhttp.Call call = mergeAndSaveOnlineCall(outPath, files, request, password, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage.  (asynchronously)
     * 
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeAndSaveOnlineAsync(String outPath, List<FileInfo> files, OrderedMergeRequest request, String password, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeAndSaveOnlineCall(outPath, files, request, password, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putSlidesMerge
     * @param request Request for putSlidesMerge. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesMergeCall(PutSlidesMergeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return mergeAndSaveOnlineCall(request.getOutPath(), request.getFiles(), request.getRequest(), request.getPassword(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     * 
     * @param request Request for putSlidesMerge. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putSlidesMerge(PutSlidesMergeRequest request) throws ApiException {
        mergeAndSaveOnline(request.getOutPath(), request.getFiles(), request.getRequest(), request.getPassword(), request.getStorage());
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage. 
     * 
     * @param request Request for putSlidesMerge. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putSlidesMergeWithHttpInfo(PutSlidesMergeRequest request) throws ApiException {
        return mergeAndSaveOnlineWithHttpInfo(request.getOutPath(), request.getFiles(), request.getRequest(), request.getPassword(), request.getStorage());
    }

    /**
     * Merges the presentation with other presentations or some of their slides specified in the request parameter. Puts result in the storage.  (asynchronously)
     * 
     * @param request Request for putSlidesMerge. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesMergeAsync(PutSlidesMergeRequest request, final ApiCallback<Void> callback) throws ApiException {
        return mergeAndSaveOnlineAsync(request.getOutPath(), request.getFiles(), request.getRequest(), request.getPassword(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesProtectionProperties
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setProtectionPropertiesCall(String name, ProtectionProperties dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesProtectionProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSlidesProtectionProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/protectionProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ProtectionProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProtectionProperties setProtectionProperties(String name, ProtectionProperties dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ProtectionProperties> resp = setProtectionPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ProtectionProperties> resp = setProtectionPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ProtectionProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProtectionProperties> setProtectionPropertiesWithHttpInfo(String name, ProtectionProperties dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setProtectionPropertiesCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update presentation protection properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setProtectionPropertiesAsync(String name, ProtectionProperties dto, String password, String folder, String storage, final ApiCallback<ProtectionProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setProtectionPropertiesCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesProtectionProperties
     * @param request Request for putSlidesProtectionProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesProtectionPropertiesCall(PutSlidesProtectionPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setProtectionPropertiesCall(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update presentation protection properties.
     * 
     * @param request Request for putSlidesProtectionProperties. (required)
     * @return ProtectionProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ProtectionProperties putSlidesProtectionProperties(PutSlidesProtectionPropertiesRequest request) throws ApiException {
        return setProtectionProperties(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation protection properties.
     * 
     * @param request Request for putSlidesProtectionProperties. (required)
     * @return ApiResponse&lt;ProtectionProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProtectionProperties> putSlidesProtectionPropertiesWithHttpInfo(PutSlidesProtectionPropertiesRequest request) throws ApiException {
        return setProtectionPropertiesWithHttpInfo(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation protection properties. (asynchronously)
     * 
     * @param request Request for putSlidesProtectionProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesProtectionPropertiesAsync(PutSlidesProtectionPropertiesRequest request, final ApiCallback<ProtectionProperties> callback) throws ApiException {
        return setProtectionPropertiesAsync(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesSaveAs
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call savePresentationCall(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putSlidesSaveAs(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putSlidesSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void savePresentation(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            savePresentationWithHttpInfo(name, format, outPath, options, password, folder, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            savePresentationWithHttpInfo(name, format, outPath, options, password, folder, storage, fontsFolder);
        }
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> savePresentationWithHttpInfo(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = savePresentationCall(name, format, outPath, options, password, folder, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a presentation to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call savePresentationAsync(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savePresentationCall(name, format, outPath, options, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putSlidesSaveAs
     * @param request Request for putSlidesSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSaveAsCall(PutSlidesSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return savePresentationCall(request.getName(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param request Request for putSlidesSaveAs. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putSlidesSaveAs(PutSlidesSaveAsRequest request) throws ApiException {
        savePresentation(request.getName(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param request Request for putSlidesSaveAs. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putSlidesSaveAsWithHttpInfo(PutSlidesSaveAsRequest request) throws ApiException {
        return savePresentationWithHttpInfo(request.getName(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Save a presentation to a specified format. (asynchronously)
     * 
     * @param request Request for putSlidesSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSaveAsAsync(PutSlidesSaveAsRequest request, final ApiCallback<Void> callback) throws ApiException {
        return savePresentationAsync(request.getName(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putSlidesSetDocumentProperty
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertyCall(String name, String propertyName, DocumentProperty property, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesSetDocumentProperty(Async)");
        }
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling putSlidesSetDocumentProperty(Async)");
        }
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling putSlidesSetDocumentProperty(Async)");
        }
        Object postBody = property;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "propertyName" + "\\}", apiClient.objectToString(propertyName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperty setDocumentProperty(String name, String propertyName, DocumentProperty property, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperty> resp = setDocumentPropertyWithHttpInfo(name, propertyName, property, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperty> resp = setDocumentPropertyWithHttpInfo(name, propertyName, property, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperty> setDocumentPropertyWithHttpInfo(String name, String propertyName, DocumentProperty property, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setDocumentPropertyCall(name, propertyName, property, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set document property. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertyAsync(String name, String propertyName, DocumentProperty property, String password, String folder, String storage, final ApiCallback<DocumentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDocumentPropertyCall(name, propertyName, property, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesSetDocumentProperty
     * @param request Request for putSlidesSetDocumentProperty. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSetDocumentPropertyCall(PutSlidesSetDocumentPropertyRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setDocumentPropertyCall(request.getName(), request.getPropertyName(), request.getProperty(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set document property.
     * 
     * @param request Request for putSlidesSetDocumentProperty. (required)
     * @return DocumentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public DocumentProperty putSlidesSetDocumentProperty(PutSlidesSetDocumentPropertyRequest request) throws ApiException {
        return setDocumentProperty(request.getName(), request.getPropertyName(), request.getProperty(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set document property.
     * 
     * @param request Request for putSlidesSetDocumentProperty. (required)
     * @return ApiResponse&lt;DocumentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DocumentProperty> putSlidesSetDocumentPropertyWithHttpInfo(PutSlidesSetDocumentPropertyRequest request) throws ApiException {
        return setDocumentPropertyWithHttpInfo(request.getName(), request.getPropertyName(), request.getProperty(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set document property. (asynchronously)
     * 
     * @param request Request for putSlidesSetDocumentProperty. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSetDocumentPropertyAsync(PutSlidesSetDocumentPropertyRequest request, final ApiCallback<DocumentProperty> callback) throws ApiException {
        return setDocumentPropertyAsync(request.getName(), request.getPropertyName(), request.getProperty(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSlideCall(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlidesSlide(Async)");
        }
        // verify the required parameter 'slideDto' is set
        if (slideDto == null) {
            throw new ApiException("Missing the required parameter 'slideDto' when calling putSlidesSlide(Async)");
        }
        Object postBody = slideDto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slide updateSlide(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slide> resp = updateSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slide> resp = updateSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slide> updateSlideWithHttpInfo(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSlideCall(name, slideIndex, slideDto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSlideAsync(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage, final ApiCallback<Slide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSlideCall(name, slideIndex, slideDto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesSlide
     * @param request Request for putSlidesSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideCall(PutSlidesSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateSlideCall(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update a slide.
     * 
     * @param request Request for putSlidesSlide. (required)
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Slide putSlidesSlide(PutSlidesSlideRequest request) throws ApiException {
        return updateSlide(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a slide.
     * 
     * @param request Request for putSlidesSlide. (required)
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Slide> putSlidesSlideWithHttpInfo(PutSlidesSlideRequest request) throws ApiException {
        return updateSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update a slide. (asynchronously)
     * 
     * @param request Request for putSlidesSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideAsync(PutSlidesSlideRequest request, final ApiCallback<Slide> callback) throws ApiException {
        return updateSlideAsync(request.getName(), request.getSlideIndex(), request.getSlideDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesSlideBackground
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBackgroundCall(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesSlideBackground(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlidesSlideBackground(Async)");
        }
        // verify the required parameter 'background' is set
        if (background == null) {
            throw new ApiException("Missing the required parameter 'background' when calling putSlidesSlideBackground(Async)");
        }
        Object postBody = background;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set background for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground setBackground(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = setBackgroundWithHttpInfo(name, slideIndex, background, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = setBackgroundWithHttpInfo(name, slideIndex, background, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set background for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> setBackgroundWithHttpInfo(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setBackgroundCall(name, slideIndex, background, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set background for a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBackgroundAsync(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBackgroundCall(name, slideIndex, background, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesSlideBackground
     * @param request Request for putSlidesSlideBackground. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideBackgroundCall(PutSlidesSlideBackgroundRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setBackgroundCall(request.getName(), request.getSlideIndex(), request.getBackground(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set background for a slide.
     * 
     * @param request Request for putSlidesSlideBackground. (required)
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideBackground putSlidesSlideBackground(PutSlidesSlideBackgroundRequest request) throws ApiException {
        return setBackground(request.getName(), request.getSlideIndex(), request.getBackground(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set background for a slide.
     * 
     * @param request Request for putSlidesSlideBackground. (required)
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideBackground> putSlidesSlideBackgroundWithHttpInfo(PutSlidesSlideBackgroundRequest request) throws ApiException {
        return setBackgroundWithHttpInfo(request.getName(), request.getSlideIndex(), request.getBackground(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set background for a slide. (asynchronously)
     * 
     * @param request Request for putSlidesSlideBackground. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideBackgroundAsync(PutSlidesSlideBackgroundRequest request, final ApiCallback<SlideBackground> callback) throws ApiException {
        return setBackgroundAsync(request.getName(), request.getSlideIndex(), request.getBackground(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesSlideBackgroundColor
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBackgroundColorCall(String name, Integer slideIndex, String color, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesSlideBackgroundColor(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSlidesSlideBackgroundColor(Async)");
        }
        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling putSlidesSlideBackgroundColor(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/backgroundColor"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "color", color);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set background color for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground setBackgroundColor(String name, Integer slideIndex, String color, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = setBackgroundColorWithHttpInfo(name, slideIndex, color, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = setBackgroundColorWithHttpInfo(name, slideIndex, color, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set background color for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> setBackgroundColorWithHttpInfo(String name, Integer slideIndex, String color, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setBackgroundColorCall(name, slideIndex, color, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set background color for a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBackgroundColorAsync(String name, Integer slideIndex, String color, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBackgroundColorCall(name, slideIndex, color, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesSlideBackgroundColor
     * @param request Request for putSlidesSlideBackgroundColor. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideBackgroundColorCall(PutSlidesSlideBackgroundColorRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setBackgroundColorCall(request.getName(), request.getSlideIndex(), request.getColor(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set background color for a slide.
     * 
     * @param request Request for putSlidesSlideBackgroundColor. (required)
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideBackground putSlidesSlideBackgroundColor(PutSlidesSlideBackgroundColorRequest request) throws ApiException {
        return setBackgroundColor(request.getName(), request.getSlideIndex(), request.getColor(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set background color for a slide.
     * 
     * @param request Request for putSlidesSlideBackgroundColor. (required)
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideBackground> putSlidesSlideBackgroundColorWithHttpInfo(PutSlidesSlideBackgroundColorRequest request) throws ApiException {
        return setBackgroundColorWithHttpInfo(request.getName(), request.getSlideIndex(), request.getColor(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set background color for a slide. (asynchronously)
     * 
     * @param request Request for putSlidesSlideBackgroundColor. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideBackgroundColorAsync(PutSlidesSlideBackgroundColorRequest request, final ApiCallback<SlideBackground> callback) throws ApiException {
        return setBackgroundColorAsync(request.getName(), request.getSlideIndex(), request.getColor(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesSlideProperties
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSlidePropertiesCall(String name, SlideProperties dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesSlideProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSlidesSlideProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slideProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideProperties setSlideProperties(String name, SlideProperties dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideProperties> resp = setSlidePropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideProperties> resp = setSlidePropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideProperties> setSlidePropertiesWithHttpInfo(String name, SlideProperties dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSlidePropertiesCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update presentation slide properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSlidePropertiesAsync(String name, SlideProperties dto, String password, String folder, String storage, final ApiCallback<SlideProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSlidePropertiesCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesSlideProperties
     * @param request Request for putSlidesSlideProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlidePropertiesCall(PutSlidesSlidePropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setSlidePropertiesCall(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update presentation slide properties.
     * 
     * @param request Request for putSlidesSlideProperties. (required)
     * @return SlideProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public SlideProperties putSlidesSlideProperties(PutSlidesSlidePropertiesRequest request) throws ApiException {
        return setSlideProperties(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation slide properties.
     * 
     * @param request Request for putSlidesSlideProperties. (required)
     * @return ApiResponse&lt;SlideProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SlideProperties> putSlidesSlidePropertiesWithHttpInfo(PutSlidesSlidePropertiesRequest request) throws ApiException {
        return setSlidePropertiesWithHttpInfo(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation slide properties. (asynchronously)
     * 
     * @param request Request for putSlidesSlideProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlidePropertiesAsync(PutSlidesSlidePropertiesRequest request, final ApiCallback<SlideProperties> callback) throws ApiException {
        return setSlidePropertiesAsync(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesSlideSize
     * @param name Document name. (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param sizeType Standard slide size type. 
     * @param scaleType Standard slide scale type. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideSizeCall(String name, Integer width, Integer height, SizeType sizeType, ScaleType scaleType, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesSlideSize(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slideSize"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "sizeType", sizeType);
        apiClient.addQueryParameter(queryParams, "scaleType", scaleType);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set slide size for a presentation.
     * 
     * @param name Document name. (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param sizeType Standard slide size type. 
     * @param scaleType Standard slide scale type. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document putSlidesSlideSize(String name, Integer width, Integer height, SizeType sizeType, ScaleType scaleType, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = putSlidesSlideSizeWithHttpInfo(name, width, height, sizeType, scaleType, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = putSlidesSlideSizeWithHttpInfo(name, width, height, sizeType, scaleType, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set slide size for a presentation.
     * 
     * @param name Document name. (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param sizeType Standard slide size type. 
     * @param scaleType Standard slide scale type. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> putSlidesSlideSizeWithHttpInfo(String name, Integer width, Integer height, SizeType sizeType, ScaleType scaleType, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = putSlidesSlideSizeCall(name, width, height, sizeType, scaleType, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set slide size for a presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param sizeType Standard slide size type. 
     * @param scaleType Standard slide scale type. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideSizeAsync(String name, Integer width, Integer height, SizeType sizeType, ScaleType scaleType, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putSlidesSlideSizeCall(name, width, height, sizeType, scaleType, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesSlideSize
     * @param request Request for putSlidesSlideSize. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideSizeCall(PutSlidesSlideSizeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return putSlidesSlideSizeCall(request.getName(), request.getWidth(), request.getHeight(), request.getSizeType(), request.getScaleType(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Set slide size for a presentation.
     * 
     * @param request Request for putSlidesSlideSize. (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Document putSlidesSlideSize(PutSlidesSlideSizeRequest request) throws ApiException {
        return putSlidesSlideSize(request.getName(), request.getWidth(), request.getHeight(), request.getSizeType(), request.getScaleType(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set slide size for a presentation.
     * 
     * @param request Request for putSlidesSlideSize. (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Document> putSlidesSlideSizeWithHttpInfo(PutSlidesSlideSizeRequest request) throws ApiException {
        return putSlidesSlideSizeWithHttpInfo(request.getName(), request.getWidth(), request.getHeight(), request.getSizeType(), request.getScaleType(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Set slide size for a presentation. (asynchronously)
     * 
     * @param request Request for putSlidesSlideSize. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesSlideSizeAsync(PutSlidesSlideSizeRequest request, final ApiCallback<Document> callback) throws ApiException {
        return putSlidesSlideSizeAsync(request.getName(), request.getWidth(), request.getHeight(), request.getSizeType(), request.getScaleType(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSlidesViewProperties
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setViewPropertiesCall(String name, ViewProperties dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSlidesViewProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putSlidesViewProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/viewProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update presentation document properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ViewProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewProperties setViewProperties(String name, ViewProperties dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ViewProperties> resp = setViewPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ViewProperties> resp = setViewPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update presentation document properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ViewProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewProperties> setViewPropertiesWithHttpInfo(String name, ViewProperties dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setViewPropertiesCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update presentation document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setViewPropertiesAsync(String name, ViewProperties dto, String password, String folder, String storage, final ApiCallback<ViewProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setViewPropertiesCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putSlidesViewProperties
     * @param request Request for putSlidesViewProperties. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesViewPropertiesCall(PutSlidesViewPropertiesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return setViewPropertiesCall(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update presentation document properties.
     * 
     * @param request Request for putSlidesViewProperties. (required)
     * @return ViewProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ViewProperties putSlidesViewProperties(PutSlidesViewPropertiesRequest request) throws ApiException {
        return setViewProperties(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation document properties.
     * 
     * @param request Request for putSlidesViewProperties. (required)
     * @return ApiResponse&lt;ViewProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ViewProperties> putSlidesViewPropertiesWithHttpInfo(PutSlidesViewPropertiesRequest request) throws ApiException {
        return setViewPropertiesWithHttpInfo(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update presentation document properties. (asynchronously)
     * 
     * @param request Request for putSlidesViewProperties. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSlidesViewPropertiesAsync(PutSlidesViewPropertiesRequest request, final ApiCallback<ViewProperties> callback) throws ApiException {
        return setViewPropertiesAsync(request.getName(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putSubshapeSaveAs
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSubshapeCall(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putSubshapeSaveAs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putSubshapeSaveAs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putSubshapeSaveAs(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling putSubshapeSaveAs(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling putSubshapeSaveAs(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveSubshape(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            saveSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            saveSubshapeWithHttpInfo(name, slideIndex, path, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder);
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveSubshapeWithHttpInfo(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = saveSubshapeCall(name, slideIndex, path, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param path Shape path (for smart art and group shapes). 
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSubshapeAsync(String name, Integer slideIndex, String path, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSubshapeCall(name, slideIndex, path, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for putSubshapeSaveAs
     * @param request Request for putSubshapeSaveAs. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSubshapeSaveAsCall(PutSubshapeSaveAsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return saveSubshapeCall(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), progressListener, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putSubshapeSaveAs. (required)
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public void putSubshapeSaveAs(PutSubshapeSaveAsRequest request) throws ApiException {
        saveSubshape(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param request Request for putSubshapeSaveAs. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putSubshapeSaveAsWithHttpInfo(PutSubshapeSaveAsRequest request) throws ApiException {
        return saveSubshapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder());
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param request Request for putSubshapeSaveAs. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putSubshapeSaveAsAsync(PutSubshapeSaveAsRequest request, final ApiCallback<Void> callback) throws ApiException {
        return saveSubshapeAsync(request.getName(), request.getSlideIndex(), request.getPath(), request.getShapeIndex(), request.getFormat(), request.getOutPath(), request.getOptions(), request.getScaleX(), request.getScaleY(), request.getBounds(), request.getPassword(), request.getFolder(), request.getStorage(), request.getFontsFolder(), callback);
    }
    /**
     * Build call for putUpdateNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideCall(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putUpdateNotesSlide(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putUpdateNotesSlide(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update notes slide properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide updateNotesSlide(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = updateNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = updateNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update notes slide properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> updateNotesSlideWithHttpInfo(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateNotesSlideCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update notes slide properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideAsync(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotesSlideCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putUpdateNotesSlide
     * @param request Request for putUpdateNotesSlide. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideCall(PutUpdateNotesSlideRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateNotesSlideCall(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update notes slide properties.
     * 
     * @param request Request for putUpdateNotesSlide. (required)
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public NotesSlide putUpdateNotesSlide(PutUpdateNotesSlideRequest request) throws ApiException {
        return updateNotesSlide(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update notes slide properties.
     * 
     * @param request Request for putUpdateNotesSlide. (required)
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<NotesSlide> putUpdateNotesSlideWithHttpInfo(PutUpdateNotesSlideRequest request) throws ApiException {
        return updateNotesSlideWithHttpInfo(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update notes slide properties. (asynchronously)
     * 
     * @param request Request for putUpdateNotesSlide. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideAsync(PutUpdateNotesSlideRequest request, final ApiCallback<NotesSlide> callback) throws ApiException {
        return updateNotesSlideAsync(request.getName(), request.getSlideIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putUpdateNotesSlideShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateNotesSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putUpdateNotesSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putUpdateNotesSlideShape(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putUpdateNotesSlideShape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase updateNotesSlideShape(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = updateNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = updateNotesSlideShapeWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> updateNotesSlideShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateNotesSlideShapeCall(name, slideIndex, shapeIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update shape properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotesSlideShapeCall(name, slideIndex, shapeIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putUpdateNotesSlideShape
     * @param request Request for putUpdateNotesSlideShape. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideShapeCall(PutUpdateNotesSlideShapeRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateNotesSlideShapeCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update shape properties.
     * 
     * @param request Request for putUpdateNotesSlideShape. (required)
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ShapeBase putUpdateNotesSlideShape(PutUpdateNotesSlideShapeRequest request) throws ApiException {
        return updateNotesSlideShape(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update shape properties.
     * 
     * @param request Request for putUpdateNotesSlideShape. (required)
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ShapeBase> putUpdateNotesSlideShapeWithHttpInfo(PutUpdateNotesSlideShapeRequest request) throws ApiException {
        return updateNotesSlideShapeWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update shape properties. (asynchronously)
     * 
     * @param request Request for putUpdateNotesSlideShape. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideShapeAsync(PutUpdateNotesSlideShapeRequest request, final ApiCallback<ShapeBase> callback) throws ApiException {
        return updateNotesSlideShapeAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putUpdateNotesSlideShapeParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateNotesSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putUpdateNotesSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putUpdateNotesSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling putUpdateNotesSlideShapeParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putUpdateNotesSlideShapeParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph updateNotesSlideParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = updateNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = updateNotesSlideParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> updateNotesSlideParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateNotesSlideParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update paragraph properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotesSlideParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putUpdateNotesSlideShapeParagraph
     * @param request Request for putUpdateNotesSlideShapeParagraph. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideShapeParagraphCall(PutUpdateNotesSlideShapeParagraphRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateNotesSlideParagraphCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update paragraph properties.
     * 
     * @param request Request for putUpdateNotesSlideShapeParagraph. (required)
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Paragraph putUpdateNotesSlideShapeParagraph(PutUpdateNotesSlideShapeParagraphRequest request) throws ApiException {
        return updateNotesSlideParagraph(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update paragraph properties.
     * 
     * @param request Request for putUpdateNotesSlideShapeParagraph. (required)
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Paragraph> putUpdateNotesSlideShapeParagraphWithHttpInfo(PutUpdateNotesSlideShapeParagraphRequest request) throws ApiException {
        return updateNotesSlideParagraphWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update paragraph properties. (asynchronously)
     * 
     * @param request Request for putUpdateNotesSlideShapeParagraph. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideShapeParagraphAsync(PutUpdateNotesSlideShapeParagraphRequest request, final ApiCallback<Paragraph> callback) throws ApiException {
        return updateNotesSlideParagraphAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for putUpdateNotesSlideShapePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlidePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putUpdateNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling putUpdateNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling putUpdateNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling putUpdateNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling putUpdateNotesSlideShapePortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling putUpdateNotesSlideShapePortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion updateNotesSlidePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = updateNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = updateNotesSlidePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> updateNotesSlidePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update portion properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlidePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotesSlidePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for putUpdateNotesSlideShapePortion
     * @param request Request for putUpdateNotesSlideShapePortion. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideShapePortionCall(PutUpdateNotesSlideShapePortionRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return updateNotesSlidePortionCall(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), progressListener, progressRequestListener);
    }

    /**
     * Update portion properties.
     * 
     * @param request Request for putUpdateNotesSlideShapePortion. (required)
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public Portion putUpdateNotesSlideShapePortion(PutUpdateNotesSlideShapePortionRequest request) throws ApiException {
        return updateNotesSlidePortion(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update portion properties.
     * 
     * @param request Request for putUpdateNotesSlideShapePortion. (required)
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Portion> putUpdateNotesSlideShapePortionWithHttpInfo(PutUpdateNotesSlideShapePortionRequest request) throws ApiException {
        return updateNotesSlidePortionWithHttpInfo(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage());
    }

    /**
     * Update portion properties. (asynchronously)
     * 
     * @param request Request for putUpdateNotesSlideShapePortion. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call putUpdateNotesSlideShapePortionAsync(PutUpdateNotesSlideShapePortionRequest request, final ApiCallback<Portion> callback) throws ApiException {
        return updateNotesSlidePortionAsync(request.getName(), request.getSlideIndex(), request.getShapeIndex(), request.getParagraphIndex(), request.getPortionIndex(), request.getDto(), request.getPassword(), request.getFolder(), request.getStorage(), callback);
    }
    /**
     * Build call for storageExists
     * @param storageName Storage name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageExistsCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'storageName' is set
        if (storageName == null) {
            throw new ApiException("Missing the required parameter 'storageName' when calling storageExists(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/{storageName}/exist"
            .replaceAll("\\{" + "storageName" + "\\}", apiClient.objectToString(storageName));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return StorageExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageExist storageExists(String storageName) throws ApiException {
        try {
            ApiResponse<StorageExist> resp = storageExistsWithHttpInfo(storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<StorageExist> resp = storageExistsWithHttpInfo(storageName);
            return resp.getData();
        }
    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return ApiResponse&lt;StorageExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageExist> storageExistsWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = storageExistsCall(storageName, null, null);
        Type returnType = new TypeToken<StorageExist>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Check if storage exists (asynchronously)
     * 
     * @param storageName Storage name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageExistsAsync(String storageName, final ApiCallback<StorageExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageExistsCall(storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<StorageExist>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for storageExists
     * @param request Request for storageExists. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call storageExistsCall(StorageExistsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return storageExistsCall(request.getStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Check if storage exists
     * 
     * @param request Request for storageExists. (required)
     * @return StorageExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public StorageExist storageExists(StorageExistsRequest request) throws ApiException {
        return storageExists(request.getStorageName());
    }

    /**
     * Check if storage exists
     * 
     * @param request Request for storageExists. (required)
     * @return ApiResponse&lt;StorageExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<StorageExist> storageExistsWithHttpInfo(StorageExistsRequest request) throws ApiException {
        return storageExistsWithHttpInfo(request.getStorageName());
    }

    /**
     * Check if storage exists (asynchronously)
     * 
     * @param request Request for storageExists. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call storageExistsAsync(StorageExistsRequest request, final ApiCallback<StorageExist> callback) throws ApiException {
        return storageExistsAsync(request.getStorageName(), callback);
    }
    /**
     * Build call for uploadFile
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileCall(String path, byte[] file, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadFile(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new HashMap<String, Object>();
        if (file != null)
        formParams.put("file", file);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @return FilesUploadResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesUploadResult uploadFile(String path, byte[] file, String storageName) throws ApiException {
        try {
            ApiResponse<FilesUploadResult> resp = uploadFileWithHttpInfo(path, file, storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FilesUploadResult> resp = uploadFileWithHttpInfo(path, file, storageName);
            return resp.getData();
        }
    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @return ApiResponse&lt;FilesUploadResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesUploadResult> uploadFileWithHttpInfo(String path, byte[] file, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileCall(path, file, storageName, null, null);
        Type returnType = new TypeToken<FilesUploadResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Upload file (asynchronously)
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(String path, byte[] file, String storageName, final ApiCallback<FilesUploadResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileCall(path, file, storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FilesUploadResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    /**
     * Build call for uploadFile
     * @param request Request for uploadFile. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call uploadFileCall(UploadFileRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        return uploadFileCall(request.getPath(), request.getFile(), request.getStorageName(), progressListener, progressRequestListener);
    }

    /**
     * Upload file
     * 
     * @param request Request for uploadFile. (required)
     * @return FilesUploadResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public FilesUploadResult uploadFile(UploadFileRequest request) throws ApiException {
        return uploadFile(request.getPath(), request.getFile(), request.getStorageName());
    }

    /**
     * Upload file
     * 
     * @param request Request for uploadFile. (required)
     * @return ApiResponse&lt;FilesUploadResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<FilesUploadResult> uploadFileWithHttpInfo(UploadFileRequest request) throws ApiException {
        return uploadFileWithHttpInfo(request.getPath(), request.getFile(), request.getStorageName());
    }

    /**
     * Upload file (asynchronously)
     * 
     * @param request Request for uploadFile. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call uploadFileAsync(UploadFileRequest request, final ApiCallback<FilesUploadResult> callback) throws ApiException {
        return uploadFileAsync(request.getPath(), request.getFile(), request.getStorageName(), callback);
    }

    private final ApiClient apiClient;
}
